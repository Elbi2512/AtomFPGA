// MQTT.cpp : Defines the entry point for the application.
//


#ifndef M_PI 
#define M_PI 3.1415926535 
#endif


// Converts degrees to radians.
#define radf(angleDegrees) (angleDegrees * M_PI / 180.0)

// Converts radians to degrees.
#define degf(angleRadians) (angleRadians * 180.0 / M_PI)

#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
	//make sure this is commented out in all code (usually stdafx.h)
	// #define WIN32_LEAN_AND_MEAN 
#define UNTITLED TEXT ("(untitled)")

#include "framework.h"
#include "MQTT.h"
#include <process.h>
#include <string.h>
#include <windows.h>
#include <math.h>
#include <errno.h>
#include <commdlg.h>
#include <dwrite.h>
#include <cstdio>
#include <string.h>
#include <cwchar>
#include <stdio.h> 
#include <wchar.h>
#include "Atom.h"
#include "roms.h"
#include "float.h"


void initmem();
BOOL DrawBitmap(HDC , HBITMAP , short , short , DWORD);
HANDLE mainthread;
HWND hWnd, shWnd;
HRESULT GetFilePathFromKey(const void* fontFileReferenceKey,
	UINT32 fontFileReferenceKeySize,
	WCHAR* filePath,
	UINT32 filePathSize
);
void SetByte(unsigned int, BYTE);
static TCHAR szAppName[] = TEXT("wAatom");
enum {
	_a_KEY_A = 1,
	_a_KEY_B = 2,
	_a_KEY_C = 3,
	_a_KEY_D = 4,
	_a_KEY_E = 5,
	_a_KEY_F = 6,
	_a_KEY_G = 7,
	_a_KEY_H = 8,
	_a_KEY_I = 9,
	_a_KEY_J = 10,
	_a_KEY_K = 11,
	_a_KEY_L = 12,
	_a_KEY_M = 13,
	_a_KEY_N = 14,
	_a_KEY_O = 15,
	_a_KEY_P = 16,
	_a_KEY_Q = 17,
	_a_KEY_R = 18,
	_a_KEY_S = 19,
	_a_KEY_T = 20,
	_a_KEY_U = 21,
	_a_KEY_V = 22,
	_a_KEY_W = 23,
	_a_KEY_X = 24,
	_a_KEY_Y = 25,
	_a_KEY_Z = 26,
	_a_KEY_0 = 27,
	_a_KEY_1 = 28,
	_a_KEY_2 = 29,
	_a_KEY_3 = 30,
	_a_KEY_4 = 31,
	_a_KEY_5 = 32,
	_a_KEY_6 = 33,
	_a_KEY_7 = 34,
	_a_KEY_8 = 35,
	_a_KEY_9 = 36,
	_a_KEY_0_PAD = 37,
	_a_KEY_1_PAD = 38,
	_a_KEY_2_PAD = 39,
	_a_KEY_3_PAD = 40,
	_a_KEY_4_PAD = 41,
	_a_KEY_5_PAD = 42,
	_a_KEY_6_PAD = 43,
	_a_KEY_7_PAD = 44,
	_a_KEY_8_PAD = 45,
	_a_KEY_9_PAD = 46,
	_a_KEY_F1 = 47,
	_a_KEY_F2 = 48,
	_a_KEY_F3 = 49,
	_a_KEY_F4 = 50,
	_a_KEY_F5 = 51,
	_a_KEY_F6 = 52,
	_a_KEY_F7 = 53,
	_a_KEY_F8 = 54,
	_a_KEY_F9 = 55,
	_a_KEY_F10 = 56,
	_a_KEY_F11 = 57,
	_a_KEY_F12 = 58,
	_a_KEY_ESC = 59,
	_a_KEY_TILDE = 60,
	_a_KEY_MINUS = 61,
	_a_KEY_EQUALS = 62,
	_a_KEY_BACKSPACE = 63,
	_a_KEY_TAB = 64,
	_a_KEY_OPENBRACE = 65,
	_a_KEY_CLOSEBRACE = 66,
	_a_KEY_ENTER = 67,
	_a_KEY_COLON = 68,
	_a_KEY_QUOTE = 69,
	_a_KEY_BACKSLASH = 70,
	_a_KEY_BACKSLASH2 = 71,
	_a_KEY_COMMA = 72,
	_a_KEY_STOP = 73,
	_a_KEY_SLASH = 74,
	_a_KEY_SPACE = 75,
	_a_KEY_INSERT = 76,
	_a_KEY_DEL = 77,
	_a_KEY_HOME = 78,
	_a_KEY_END = 79,
	_a_KEY_PGUP = 80,
	_a_KEY_PGDN = 81,
	_a_KEY_LEFT = 82,
	_a_KEY_RIGHT = 83,
	_a_KEY_UP = 84,
	_a_KEY_DOWN = 85,
	_a_KEY_SLASH_PAD = 86,
	_a_KEY_ASTERISK = 87,
	_a_KEY_MINUS_PAD = 88,
	_a_KEY_PLUS_PAD = 89,
	_a_KEY_DEL_PAD = 90,
	_a_KEY_ENTER_PAD = 91,
	_a_KEY_PRTSCR = 92,
	_a_KEY_PAUSE = 93,
	_a_KEY_ABNT_C1 = 94,
	_a_KEY_YEN = 95,
	_a_KEY_KANA = 96,
	_a_KEY_CONVERT = 97,
	_a_KEY_NOCONVERT = 98,
	_a_KEY_AT = 99,
	_a_KEY_CIRCUMFLEX = 100,
	_a_KEY_COLON2 = 101,
	_a_KEY_KANJI = 102,
	_a_KEY_EQUALS_PAD = 103,  /* MacOS X */
	_a_KEY_BACKQUOTE = 104,  /* MacOS X */
	_a_KEY_SEMICOLON = 105,  /* MacOS X */
	_a_KEY_COMMAND = 106,  /* MacOS X */
	_a_KEY_UNKNOWN1 = 107,
	_a_KEY_UNKNOWN2 = 108,
	_a_KEY_UNKNOWN3 = 109,
	_a_KEY_UNKNOWN4 = 110,
	_a_KEY_UNKNOWN5 = 111,
	_a_KEY_UNKNOWN6 = 112,
	_a_KEY_UNKNOWN7 = 113,
	_a_KEY_UNKNOWN8 = 114,

	_a_KEY_MODIFIERS = 115,

	_a_KEY_LSHIFT = 115,
	_a_KEY_RSHIFT = 116,
	_a_KEY_LCONTROL = 117,
	_a_KEY_RCONTROL = 118,
	_a_KEY_ALT = 119,
	_a_KEY_ALTGR = 120,
	_a_KEY_LWIN = 121,
	_a_KEY_RWIN = 122,
	_a_KEY_MENU = 123,
	_a_KEY_SCRLOCK = 124,
	_a_KEY_NUMLOCK = 125,
	_a_KEY_CAPSLOCK = 126,

	_a_KEY_MAX = 127
};

int 	nFrameRate = 0;
unsigned char table[256] = {
64,
65,
66,
67,
68,
69,
70,
71,
72,
73,
74,
75,
76,
77,
78,
79,
80,
81,
82,
83,
84,
85,
86,
87,
88,
89,
90,
91,
92,
93,
94,
95,
32,
33,
34,
35,
36,
37,
38,
39,
40,
41,
42,
43,
44,
45,
46,
47,
48,
49,
50,
51,
52,
53,
54,
55,
56,
57,
58,
59,
60,
61,
62,
63,
192,
161,
161,
162,
163,
164,
165,
166,
167,
168,
169,
170,
171,
172,
173,
174,
175,
176,
177,
178,
179,
180,
181,
182,
183,
184,
185,
186,
187,
188,
189,
190,
32,
33,
34,
35,
36,
37,
38,
39,
40,
41,
42,
43,
44,
45,
46,
47,
48,
49,
50,
51,
52,
53,
54,
55,
56,
57,
58,
59,
60,
61,
62,
190,
191,
225,
226,
227,
228,
229,
230,
231,
232,
233,
234,
235,
236,
237,
238,
239,
240,
241,
242,
243,
244,
245,
246,
247,
248,
249,
250,
251,
252,
253,
254,
200,
255,
193,
194,
195,
196,
197,
198,
199,
200,
201,
202,
203,
204,
205,
206,
207,
208,
209,
210,
211,
212,
213,
214,
215,
216,
217,
218,
219,
220,
221,
222,
223,
192,
161,
162,
163,
164,
165,
166,
167,
168,
169,
170,
171,
172,
173,
174,
175,
176,
177,
178,
179,
180,
181,
182,
183,
184,
185,
186,
187,
188,
189,
190,
191,
192,
161,
162,
163,
164,
165,
166,
167,
168,
169,
170,
171,
172,
173,
174,
175,
176,
177,
178,
179,
180,
181,
182,
183,
184,
185,
186,
187,
188,
189,
190,
191
};

unsigned char hw_to_mycode[256] = {
	/* 0x00 */ 0,		  _a_KEY_ESC,	 _a_KEY_1,		 _a_KEY_2,
	/* 0x04 */ _a_KEY_3,	  _a_KEY_4,	 _a_KEY_5,		 _a_KEY_6,
	/* 0x08 */ _a_KEY_7,	  _a_KEY_8,	 _a_KEY_9,		 _a_KEY_0,
	/* 0x0C */ _a_KEY_MINUS,	  _a_KEY_EQUALS,	 _a_KEY_BACKSPACE,	 _a_KEY_TAB,
	/* 0x10 */ _a_KEY_Q,	  _a_KEY_W,	 _a_KEY_E,		 _a_KEY_R,
	/* 0x14 */ _a_KEY_T,	  _a_KEY_Y,	 _a_KEY_U,		 _a_KEY_I,
	/* 0x18 */ _a_KEY_O,	  _a_KEY_P,	 _a_KEY_OPENBRACE,	 _a_KEY_CLOSEBRACE,
	/* 0x1C */ _a_KEY_ENTER,	  _a_KEY_LCONTROL,	 _a_KEY_A,		 _a_KEY_S,
	/* 0x20 */ _a_KEY_D,	  _a_KEY_F,	 _a_KEY_G,		 _a_KEY_H,
	/* 0x24 */ _a_KEY_J,	  _a_KEY_K,	 _a_KEY_L,		 _a_KEY_SEMICOLON,
	/* 0x28 */ _a_KEY_QUOTE,	  _a_KEY_TILDE,	 _a_KEY_LSHIFT,	 _a_KEY_BACKSLASH,
	/* 0x2C */ _a_KEY_Z,	  _a_KEY_X,	 _a_KEY_C,		 _a_KEY_V,
	/* 0x30 */ _a_KEY_B,	  _a_KEY_N,	 _a_KEY_M,		 _a_KEY_COMMA,
	/* 0x34 */ _a_KEY_STOP,	  _a_KEY_SLASH,	 _a_KEY_RSHIFT,	 _a_KEY_ASTERISK,
	/* 0x38 */ _a_KEY_ALT,	  _a_KEY_SPACE,	 _a_KEY_CAPSLOCK,	 _a_KEY_F1,
	/* 0x3C */ _a_KEY_F2,	  _a_KEY_F3,	 _a_KEY_F4,	 _a_KEY_F5,
	/* 0x40 */ _a_KEY_F6,	  _a_KEY_F7,	 _a_KEY_F8,	 _a_KEY_F9,
	/* 0x44 */ _a_KEY_F10,	  _a_KEY_NUMLOCK,	 _a_KEY_SCRLOCK,	 _a_KEY_7_PAD,
	/* 0x48 */ _a_KEY_8_PAD,	  _a_KEY_9_PAD,	 _a_KEY_MINUS_PAD,	 _a_KEY_4_PAD,
	/* 0x4C */ _a_KEY_5_PAD,	  _a_KEY_6_PAD,	 _a_KEY_PLUS_PAD,	 _a_KEY_1_PAD,
	/* 0x50 */ _a_KEY_2_PAD,	  _a_KEY_3_PAD,	 _a_KEY_0_PAD,	 _a_KEY_DEL_PAD,
	/* 0x54 */ _a_KEY_PRTSCR,	  0,		 _a_KEY_BACKSLASH2, _a_KEY_F11,
	/* 0x58 */ _a_KEY_F12,	  0,		 0,		 _a_KEY_LWIN,
	/* 0x5C */ _a_KEY_RWIN,	  _a_KEY_MENU,	 0,		 0,
	/* 0x60 */ 0,		  0,		 0,		 0,
	/* 0x64 */ 0,		  0,		 0,		 0,
	/* 0x68 */ 0,		  0,		 0,		 0,
	/* 0x6C */ 0,		  0,		 0,		 0,
	/* 0x70 */ _a_KEY_KANA,	  0,		 0,		 _a_KEY_ABNT_C1,
	/* 0x74 */ 0,		  0,		 0,		 0,
	/* 0x78 */ 0,		  _a_KEY_CONVERT,	 0,		 _a_KEY_NOCONVERT,
	/* 0x7C */ 0,		  _a_KEY_YEN,	 0,		 0,
	/* 0x80 */ 0,		  0,		 0,		 0,
	/* 0x84 */ 0,		  0,		 0,		 0,
	/* 0x88 */ 0,		  0,		 0,		 0,
	/* 0x8C */ 0,		  0,		 0,		 0,
	/* 0x90 */ 0,		  _a_KEY_AT,	 _a_KEY_COLON2,	 0,
	/* 0x94 */ _a_KEY_KANJI,	  0,		 0,		 0,
	/* 0x98 */ 0,		  0,		 0,		 0,
	/* 0x9C */ _a_KEY_ENTER_PAD, _a_KEY_RCONTROL,	 0,		 0,
	/* 0xA0 */ 0,		  0,		 0,		 0,
	/* 0xA4 */ 0,		  0,		 0,		 0,
	/* 0xA8 */ 0,		  0,		 0,		 0,
	/* 0xAC */ 0,		  0,		 0,		 0,
	/* 0xB0 */ 0,		  0,		 0,		 0,
	/* 0xB4 */ 0,		  _a_KEY_SLASH_PAD, 0,		 _a_KEY_PRTSCR,
	/* 0xB8 */ _a_KEY_ALTGR,	  0,		 0,		 0,
	/* 0xBC */ 0,		  0,		 0,		 0,
	/* 0xC0 */ 0,		  0,		 0,		 0,
	/* 0xC4 */ 0,		  _a_KEY_PAUSE,	 0,		 _a_KEY_HOME,
	/* 0xC8 */ _a_KEY_UP,	  _a_KEY_PGUP,	 0,		 _a_KEY_LEFT,
	/* 0xCC */ 0,		  _a_KEY_RIGHT,	 0,		 _a_KEY_END,
	/* 0xD0 */ _a_KEY_DOWN,	  _a_KEY_PGDN,	 _a_KEY_INSERT,	 _a_KEY_DEL,
	/* 0xD4 */ 0,		  0,		 0,		 0,
	/* 0xD8 */ 0,		  0,		 0,		 _a_KEY_LWIN,
	/* 0xDC */ _a_KEY_RWIN,	  _a_KEY_MENU,	 0,		 0,
	/* 0xE0 */ 0,		  0,		 0,		 0,
	/* 0xE4 */ 0,		  0,		 0,		 0,
	/* 0xE8 */ 0,		  0,		 0,		 0,
	/* 0xEC */ 0,		  0,		 0,		 0,
	/* 0xF0 */ 0,		  0,		 0,		 0,
	/* 0xF4 */ 0,		  0,		 0,		 0,
	/* 0xF8 */ 0,		  0,		 0,		 0,
	/* 0xFC */ 0,		  0,		 0,		 0
};

unsigned char key[256];
#define SPACE " "
int bDirty = 1;
int cxIcon, cyIcon; // size of the icon
#define MAX_LOADSTRING 100

// Global Variables:
HINSTANCE hInst;                                // current instance
WCHAR szTitle[MAX_LOADSTRING];                  // The title bar text
WCHAR szWindowClass[MAX_LOADSTRING];            // the main window class name
MSG usermsg;
void Createfnt(HWND hWnd);
unsigned long kleurtbl[] = {
  RGB(0, 0, 0), // zwart
  RGB(255, 0, 0), // rood
  RGB(0, 255, 0), // groen
  RGB(255, 255, 0), // geel
  RGB(0, 0, 255), // blauw
  RGB(255, 0, 255), // magenta
  RGB(0, 255, 255), // cyaan
  RGB(255, 255, 255), // oewit
  RGB(191, 191, 191), // oewit na twee keer in de dreft
};
// waarden voor de handeling van de windows
//HINSTANCE hInst; /* current instance */
PAINTSTRUCT ps;
TEXTMETRIC tm;
HFONT hFont;
HBRUSH hBrush;
RECT hRect;
//HFONT hOldFont;
RECT Rect;

// waarden voor het afhandelen van de cursor en de cursor positie
int cxChar, cyChar, cxClient, cyClient;
int i;
DWORD idInst;
TCHAR scherm[32][17][2];
// variabelen voor de clipboard besturing
int xco_sto, yco_sto, xco_sta, yco_sta;
HDC hdcMem;
BITMAP Bitmap; // bitmap structure
BOOL bTrack;
int nHeight,
nWidth,
index;
unsigned int result;
int defver, defhor, defwidth, defheight;
// div zaken voor font
ABC abc[26];
int dHeight, dWidth;
HCURSOR    hCursor;
//a = 0x20;
BOOL bKey = FALSE;
unsigned char regels; // aantal afgedrukte regels in pagemode
BOOL bSchermstatus; // controle voor tekst naar scherm sturen
BOOL bPrinterstatus; // controle voor teken naar printer sturen
BOOL bPagemode = TRUE; // controle voor pagemode aan/uit
BOOL bCapsstatus; // status van de caps lock toets
BOOL bClear0;
unsigned char commandonr; // gebruikt voor opslag van commando nummer
unsigned char msb = 0xff; // controle bit voor bit7 wel of niet strippen
unsigned char kleur = 7; // tekst atribuut bij opstarten
unsigned char rvenster_ylo; // waarde in ini files
unsigned char rvenster_xrb; // waarde in de ini files
unsigned char venster_xlo = 0; // coordinaten tekstvenster
unsigned char venster_ylo = 16; //
unsigned char venster_xrb = 64; //
unsigned char venster_yrb = 0; //
unsigned int gwindow_xlo = 0; // coordinaten grafisch venster
unsigned int gwindow_ylo = 0; //
unsigned int gwindow_xrb = -1; //
unsigned int gwindow_yrb = -1; //
unsigned int oorsprong_x = 0; // offset voor grafische oorsprong
unsigned int oorsprong_y = 0; //
unsigned char schermpag = 0; // schermpagina nummer voor bewerking
unsigned char cenr; // critical errornummer
unsigned char adres_b000; // emulatie adres
unsigned char bEnd = FALSE; // nee, we zijn nog niet klaar
unsigned char bCursor = TRUE; // default wel een cursor
unsigned char scale_x = 1, scale_y = 1; // default vergroting
int rb_xco, rb_yco;
unsigned int iobase;
UINT nTimerID, nTimerRes;
int xco = 0, yco = 0; // actuele cursor positie
BOOL bShift, bCaps, bCtrl;
BYTE bscan, bascii;
BYTE BitMapBits[192][32];
//BYTE BitMapBits[24][8][32];

HBITMAP hBitmap;
//[24] ;
// ff
static BYTE byBits[] = {
	0x51, 0x77, 0x10, 00,
	0x57, 0x77, 0x50, 00,
	0x13, 0x77, 0x50, 00,
	0x57, 0x77, 0x50, 00,
	0x51, 0x11, 0x10, 00
};
BITMAPINFOHEADER Bi;
LPBITMAPINFOHEADER lpbi;
HANDLE hDIB[24];
LPSTR lpstBitmap, lpstTemp;
BOOL bGraph = FALSE;
WORD    j_l, j_r, j_b, j_o;
BOOL    bPlane[24] = {
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
};

/* C:\Users\LEENDERTBIJNAGTE\Downloads\INVADERS (12/20/2012 5:47:36 PM)
   StartOffset(h): 00000000, EndOffset(h): 00001315, Length(h): 00001316 */

unsigned char Invader[4886] = {
	0x53, 0x41, 0x43, 0x45, 0x49, 0x4E, 0x56, 0x41, 0x44, 0x45, 0x52, 0x53,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x86, 0xCE, 0x00, 0x13, 0x0D, 0x00,
	0x00, 0x52, 0x45, 0x4D, 0x20, 0x2F, 0x2F, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x20, 0x49, 0x4E, 0x56, 0x41, 0x44, 0x45, 0x52, 0x53, 0x2F, 0x2F, 0x20,
	0x56, 0x35, 0x0D, 0x00, 0x03, 0x3F, 0x23, 0x30, 0x30, 0x30, 0x38, 0x3D,
	0x23, 0x31, 0x0D, 0x00, 0x05, 0x50, 0x2E, 0x24, 0x31, 0x32, 0x22, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x80,
	0x69, 0x6E, 0x76, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x27, 0x0D, 0x00,
	0x0A, 0x48, 0x3D, 0x30, 0x3B, 0x40, 0x3D, 0x30, 0x3B, 0x5A, 0x3D, 0x23,
	0x42, 0x30, 0x30, 0x32, 0x3B, 0x47, 0x2E, 0x61, 0x0D, 0x00, 0xFA, 0x66,
	0x4D, 0x3D, 0x32, 0x3B, 0x42, 0x3D, 0x38, 0x3B, 0x41, 0x3D, 0x23, 0x38,
	0x32, 0x30, 0x31, 0x3B, 0x4F, 0x3D, 0x30, 0x3B, 0x53, 0x3D, 0x30, 0x3B,
	0x3F, 0x23, 0x32, 0x38, 0x31, 0x31, 0x3D, 0x2D, 0x31, 0x0D, 0x01, 0x04,
	0x21, 0x23, 0x32, 0x38, 0x30, 0x30, 0x3D, 0x23, 0x33, 0x32, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x3B, 0x21, 0x23, 0x32, 0x38, 0x30, 0x34, 0x3D,
	0x52, 0x2E, 0x26, 0x23, 0x46, 0x46, 0x46, 0x46, 0x0D, 0x01, 0x13, 0x63,
	0x46, 0x2E, 0x49, 0x3D, 0x23, 0x32, 0x38, 0x44, 0x36, 0x54, 0x4F, 0x23,
	0x32, 0x38, 0x46, 0x46, 0x3B, 0x3F, 0x49, 0x3D, 0x30, 0x3B, 0x4E, 0x2E,
	0x0D, 0x01, 0x15, 0x49, 0x46, 0x42, 0x3C, 0x32, 0x30, 0x42, 0x3D, 0x42,
	0x2B, 0x32, 0x3B, 0x3F, 0x23, 0x33, 0x33, 0x33, 0x37, 0x3D, 0x42, 0x3B,
	0x3F, 0x23, 0x33, 0x39, 0x46, 0x42, 0x3D, 0x42, 0x3B, 0x3F, 0x23, 0x33,
	0x41, 0x42, 0x32, 0x3D, 0x42, 0x3B, 0x3F, 0x23, 0x33, 0x34, 0x45, 0x44,
	0x3D, 0x42, 0x0D, 0x01, 0x18, 0x43, 0x3D, 0x30, 0x3B, 0x46, 0x2E, 0x49,
	0x3D, 0x30, 0x54, 0x4F, 0x23, 0x38, 0x30, 0x30, 0x53, 0x2E, 0x23, 0x32,
	0x30, 0x30, 0x0D, 0x01, 0x1B, 0x46, 0x2E, 0x4A, 0x3D, 0x30, 0x54, 0x4F,
	0x31, 0x38, 0x53, 0x2E, 0x32, 0x0D, 0x01, 0x1D, 0x4B, 0x3D, 0x41, 0x2B,
	0x49, 0x2B, 0x4A, 0x20, 0x0D, 0x01, 0x22, 0x43, 0x3F, 0x23, 0x32, 0x38,
	0x37, 0x32, 0x3D, 0x4B, 0x26, 0x23, 0x46, 0x46, 0x3B, 0x43, 0x3F, 0x23,
	0x32, 0x38, 0x37, 0x33, 0x3D, 0x28, 0x4B, 0x26, 0x23, 0x46, 0x46, 0x30,
	0x30, 0x29, 0x2F, 0x32, 0x35, 0x36, 0x0D, 0x01, 0x25, 0x43, 0x3D, 0x43,
	0x2B, 0x32, 0x3B, 0x4E, 0x2E, 0x3B, 0x4E, 0x2E, 0x3B, 0x49, 0x46, 0x41,
	0x3E, 0x23, 0x38, 0x38, 0x30, 0x30, 0x3B, 0x41, 0x3D, 0x23, 0x38, 0x32,
	0x30, 0x31, 0x0D, 0x01, 0x27, 0x49, 0x46, 0x53, 0x3C, 0x32, 0x4D, 0x3D,
	0x4D, 0x2B, 0x31, 0x3B, 0x53, 0x3D, 0x53, 0x2B, 0x31, 0x0D, 0x01, 0x2C,
	0x3F, 0x23, 0x32, 0x38, 0x30, 0x30, 0x3D, 0x30, 0x3B, 0x21, 0x23, 0x32,
	0x38, 0x30, 0x38, 0x3D, 0x23, 0x31, 0x30, 0x34, 0x3B, 0x21, 0x23, 0x32,
	0x38, 0x30, 0x43, 0x3D, 0x23, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x0D, 0x01, 0x31, 0x43, 0x4C, 0x45, 0x41, 0x52, 0x34, 0x3B, 0x54,
	0x3D, 0x23, 0x39, 0x30, 0x30, 0x30, 0x0D, 0x01, 0x4A, 0x46, 0x2E, 0x49,
	0x3D, 0x32, 0x54, 0x4F, 0x23, 0x31, 0x45, 0x53, 0x2E, 0x38, 0x3B, 0x54,
	0x21, 0x49, 0x3D, 0x23, 0x46, 0x46, 0x46, 0x46, 0x30, 0x30, 0x3B, 0x4E,
	0x2E, 0x0D, 0x01, 0x4C, 0x46, 0x2E, 0x49, 0x3D, 0x23, 0x32, 0x32, 0x54,
	0x4F, 0x23, 0x33, 0x45, 0x53, 0x2E, 0x38, 0x3B, 0x54, 0x21, 0x49, 0x3D,
	0x23, 0x38, 0x30, 0x46, 0x46, 0x46, 0x46, 0x30, 0x31, 0x3B, 0x4E, 0x2E,
	0x0D, 0x01, 0x4E, 0x46, 0x2E, 0x49, 0x3D, 0x23, 0x34, 0x32, 0x54, 0x4F,
	0x23, 0x35, 0x45, 0x53, 0x2E, 0x38, 0x3B, 0x54, 0x21, 0x49, 0x3D, 0x23,
	0x43, 0x30, 0x46, 0x46, 0x46, 0x46, 0x30, 0x33, 0x3B, 0x4E, 0x2E, 0x0D,
	0x01, 0x50, 0x46, 0x2E, 0x49, 0x3D, 0x23, 0x36, 0x32, 0x54, 0x4F, 0x23,
	0x37, 0x45, 0x53, 0x2E, 0x38, 0x3B, 0x54, 0x21, 0x49, 0x3D, 0x23, 0x45,
	0x30, 0x46, 0x46, 0x46, 0x46, 0x30, 0x37, 0x3B, 0x4E, 0x2E, 0x0D, 0x01,
	0x52, 0x46, 0x2E, 0x49, 0x3D, 0x23, 0x38, 0x32, 0x54, 0x4F, 0x23, 0x39,
	0x45, 0x53, 0x2E, 0x38, 0x3B, 0x54, 0x21, 0x49, 0x3D, 0x23, 0x46, 0x30,
	0x46, 0x46, 0x46, 0x46, 0x30, 0x46, 0x3B, 0x4E, 0x2E, 0x0D, 0x01, 0x54,
	0x46, 0x2E, 0x49, 0x3D, 0x23, 0x41, 0x32, 0x54, 0x4F, 0x23, 0x42, 0x45,
	0x53, 0x2E, 0x38, 0x3B, 0x54, 0x21, 0x49, 0x3D, 0x23, 0x46, 0x38, 0x46,
	0x46, 0x46, 0x46, 0x31, 0x46, 0x3B, 0x4E, 0x2E, 0x0D, 0x01, 0x56, 0x46,
	0x2E, 0x49, 0x3D, 0x23, 0x43, 0x32, 0x54, 0x4F, 0x23, 0x44, 0x45, 0x53,
	0x2E, 0x38, 0x3B, 0x54, 0x21, 0x49, 0x3D, 0x23, 0x46, 0x43, 0x46, 0x46,
	0x46, 0x46, 0x33, 0x46, 0x3B, 0x4E, 0x2E, 0x0D, 0x01, 0x58, 0x46, 0x2E,
	0x49, 0x3D, 0x23, 0x45, 0x32, 0x54, 0x4F, 0x23, 0x46, 0x45, 0x53, 0x2E,
	0x38, 0x3B, 0x54, 0x21, 0x49, 0x3D, 0x23, 0x46, 0x45, 0x46, 0x46, 0x46,
	0x46, 0x37, 0x46, 0x3B, 0x4E, 0x2E, 0x0D, 0x01, 0x5A, 0x46, 0x2E, 0x49,
	0x3D, 0x23, 0x31, 0x30, 0x32, 0x54, 0x4F, 0x23, 0x33, 0x37, 0x45, 0x53,
	0x2E, 0x38, 0x3B, 0x54, 0x21, 0x49, 0x3D, 0x2D, 0x31, 0x3B, 0x4E, 0x2E,
	0x0D, 0x01, 0x5C, 0x46, 0x2E, 0x49, 0x3D, 0x23, 0x33, 0x38, 0x32, 0x54,
	0x4F, 0x23, 0x34, 0x37, 0x46, 0x53, 0x2E, 0x38, 0x3B, 0x54, 0x21, 0x49,
	0x3D, 0x23, 0x46, 0x46, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x3B, 0x4E,
	0x2E, 0x0D, 0x01, 0x5D, 0x49, 0x46, 0x4D, 0x3C, 0x32, 0x47, 0x2E, 0x62,
	0x0D, 0x01, 0x5E, 0x46, 0x2E, 0x49, 0x3D, 0x32, 0x54, 0x4F, 0x4D, 0x3B,
	0x51, 0x3D, 0x49, 0x2A, 0x31, 0x32, 0x2D, 0x39, 0x3B, 0x4D, 0x4F, 0x56,
	0x45, 0x51, 0x2C, 0x32, 0x3B, 0x44, 0x52, 0x41, 0x57, 0x28, 0x51, 0x2B,
	0x34, 0x29, 0x2C, 0x36, 0x3B, 0x44, 0x52, 0x41, 0x57, 0x28, 0x51, 0x2B,
	0x38, 0x29, 0x2C, 0x32, 0x3B, 0x4E, 0x2E, 0x0D, 0x01, 0x68, 0x62, 0x46,
	0x2E, 0x49, 0x3D, 0x30, 0x54, 0x4F, 0x4F, 0x3B, 0x51, 0x3D, 0x32, 0x35,
	0x30, 0x2D, 0x49, 0x2A, 0x36, 0x3B, 0x4D, 0x4F, 0x56, 0x45, 0x51, 0x2C,
	0x30, 0x3B, 0x44, 0x52, 0x41, 0x57, 0x51, 0x2C, 0x36, 0x3B, 0x44, 0x52,
	0x41, 0x57, 0x28, 0x51, 0x2D, 0x32, 0x29, 0x2C, 0x36, 0x3B, 0x4E, 0x2E,
	0x0D, 0x01, 0x86, 0x4C, 0x49, 0x2E, 0x23, 0x33, 0x41, 0x30, 0x39, 0x0D,
	0x01, 0x90, 0x4C, 0x49, 0x2E, 0x23, 0x33, 0x41, 0x34, 0x35, 0x0D, 0x01,
	0xF4, 0x65, 0x49, 0x46, 0x3F, 0x23, 0x32, 0x38, 0x30, 0x36, 0x3C, 0x3E,
	0x30, 0x3B, 0x47, 0x2E, 0x6F, 0x0D, 0x02, 0x8A, 0x49, 0x46, 0x3F, 0x23,
	0x32, 0x38, 0x30, 0x33, 0x3D, 0x30, 0x3B, 0x3F, 0x23, 0x32, 0x38, 0x30,
	0x33, 0x3D, 0x35, 0x30, 0x3B, 0x41, 0x3D, 0x41, 0x2B, 0x23, 0x31, 0x30,
	0x30, 0x3B, 0x4F, 0x3D, 0x4F, 0x2B, 0x31, 0x3B, 0x47, 0x2E, 0x63, 0x0D,
	0x07, 0xD0, 0x6F, 0x3F, 0x23, 0x32, 0x38, 0x30, 0x36, 0x3D, 0x30, 0x3B,
	0x3F, 0x23, 0x37, 0x31, 0x3D, 0x23, 0x39, 0x35, 0x0D, 0x07, 0xDA, 0x46,
	0x2E, 0x4A, 0x3D, 0x30, 0x54, 0x4F, 0x31, 0x30, 0x30, 0x3B, 0x3F, 0x5A,
	0x3D, 0x3F, 0x5A, 0x3A, 0x28, 0x52, 0x2E, 0x26, 0x34, 0x29, 0x3B, 0x4E,
	0x2E, 0x0D, 0x07, 0xDF, 0x3F, 0x23, 0x37, 0x30, 0x3D, 0x3F, 0x23, 0x32,
	0x38, 0x30, 0x38, 0x3B, 0x46, 0x2E, 0x4A, 0x3D, 0x30, 0x54, 0x4F, 0x32,
	0x3B, 0x4C, 0x49, 0x2E, 0x23, 0x33, 0x30, 0x30, 0x38, 0x3B, 0x3F, 0x23,
	0x37, 0x30, 0x3D, 0x3F, 0x23, 0x37, 0x30, 0x2B, 0x31, 0x3B, 0x4E, 0x2E,
	0x0D, 0x07, 0xE4, 0x4D, 0x3D, 0x4D, 0x2D, 0x31, 0x3B, 0x49, 0x46, 0x4D,
	0x3C, 0x31, 0x3B, 0x47, 0x2E, 0x64, 0x0D, 0x07, 0xE6, 0x51, 0x3D, 0x4D,
	0x2A, 0x31, 0x32, 0x2B, 0x33, 0x3B, 0x4D, 0x4F, 0x56, 0x45, 0x51, 0x2C,
	0x32, 0x3B, 0x50, 0x4C, 0x4F, 0x54, 0x37, 0x2C, 0x28, 0x51, 0x2B, 0x34,
	0x29, 0x2C, 0x36, 0x3B, 0x50, 0x4C, 0x4F, 0x54, 0x37, 0x2C, 0x28, 0x51,
	0x2B, 0x38, 0x29, 0x2C, 0x32, 0x0D, 0x07, 0xE9, 0x3F, 0x23, 0x32, 0x38,
	0x30, 0x38, 0x3D, 0x34, 0x3B, 0x4C, 0x49, 0x2E, 0x28, 0x23, 0x33, 0x41,
	0x35, 0x36, 0x2B, 0x31, 0x37, 0x2A, 0x3F, 0x23, 0x32, 0x38, 0x30, 0x45,
	0x29, 0x3B, 0x47, 0x2E, 0x65, 0x0D, 0x07, 0xEE, 0x64, 0x46, 0x2E, 0x49,
	0x3D, 0x30, 0x54, 0x4F, 0x31, 0x32, 0x30, 0x3B, 0x57, 0x41, 0x49, 0x54,
	0x3B, 0x4E, 0x2E, 0x3B, 0x4B, 0x3D, 0x21, 0x23, 0x32, 0x38, 0x30, 0x31,
	0x26, 0x23, 0x46, 0x46, 0x46, 0x46, 0x0D, 0x07, 0xF3, 0x50, 0x2E, 0x24,
	0x31, 0x32, 0x22, 0x59, 0x4F, 0x55, 0x52, 0x20, 0x53, 0x43, 0x4F, 0x52,
	0x45, 0x20, 0x22, 0x4B, 0x22, 0x20, 0x20, 0x41, 0x52, 0x4D, 0x59, 0x20,
	0x22, 0x4F, 0x2B, 0x31, 0x27, 0x0D, 0x07, 0xF5, 0x6E, 0x49, 0x46, 0x4B,
	0x3E, 0x48, 0x3B, 0x48, 0x3D, 0x4B, 0x20, 0x0D, 0x07, 0xF8, 0x50, 0x2E,
	0x22, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x20, 0x53, 0x43, 0x4F,
	0x52, 0x45, 0x20, 0x22, 0x48, 0x27, 0x27, 0x0D, 0x08, 0x0C, 0x61, 0x50,
	0x2E, 0x27, 0x22, 0xA1, 0xBF, 0xCF, 0xA2, 0x20, 0x20, 0x20, 0x20, 0xA7,
	0xDF, 0xDF, 0xAB, 0x20, 0x20, 0x20, 0x20, 0xC9, 0xAF, 0xAF, 0xB6, 0x22,
	0x27, 0x22, 0xDD, 0xBF, 0xCF, 0xDE, 0x20, 0x20, 0x20, 0x20, 0xDD, 0xBF,
	0xCF, 0xDE, 0x20, 0x20, 0x20, 0x20, 0xDF, 0xD7, 0xDB, 0xDF, 0x20, 0x20,
	0x20, 0xBD, 0xD7, 0xD7, 0xA8, 0x22, 0x27, 0x0D, 0x08, 0x16, 0x50, 0x2E,
	0x22, 0xA0, 0xC8, 0xB4, 0xA0, 0x20, 0x20, 0x20, 0x20, 0xB4, 0xA8, 0xA4,
	0xC8, 0x20, 0x20, 0x20, 0x20, 0xB0, 0xC8, 0xB4, 0xC0, 0x22, 0x27, 0x27,
	0x0D, 0x08, 0x20, 0x50, 0x2E, 0x27, 0x22, 0x20, 0x33, 0x30, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x31, 0x30, 0x20, 0x20, 0x20, 0x20, 0x3F, 0x3F, 0x3F, 0x22, 0x27, 0x27,
	0x0D, 0x08, 0x43, 0x50, 0x2E, 0x22, 0x20, 0x4C, 0x45, 0x46, 0x54, 0x20,
	0x3A, 0x20, 0x43, 0x54, 0x52, 0x4C, 0x22, 0x27, 0x22, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x20, 0x3A, 0x20, 0x53, 0x48, 0x49, 0x46, 0x54, 0x22, 0x27,
	0x22, 0x20, 0x46, 0x49, 0x52, 0x45, 0x20, 0x3A, 0x20, 0x52, 0x45, 0x50,
	0x54, 0x22, 0x27, 0x0D, 0x08, 0x48, 0x50, 0x2E, 0x27, 0x22, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x20, 0x53, 0x50, 0x41, 0x43, 0x45, 0x20, 0x54, 0x4F,
	0x20, 0x53, 0x54, 0x41, 0x52, 0x54, 0x22, 0x0D, 0x08, 0x98, 0x4C, 0x49,
	0x2E, 0x23, 0x46, 0x46, 0x45, 0x33, 0x3B, 0x47, 0x2E, 0x66, 0x0D, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x38, 0x31, 0x0D, 0xFF, 0x3B, 0x52,
	0x45, 0x50, 0x54, 0x22, 0x27, 0x0D, 0x08, 0x48, 0x50, 0x2E, 0x27, 0x22,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x20, 0x4B, 0x45, 0x59, 0x20, 0x54, 0x4F,
	0x20, 0x53, 0x54, 0x41, 0x52, 0x54, 0x22, 0x0D, 0x08, 0x98, 0x4C, 0x49,
	0x2E, 0x23, 0x46, 0x46, 0x45, 0x33, 0x3B, 0x47, 0x2E, 0x66, 0x0D, 0x00,
	0x00, 0x20, 0x28, 0x43, 0x29, 0x20, 0x41, 0x43, 0x4F, 0x52, 0x4E, 0x53,
	0x4F, 0x46, 0x54, 0x20, 0x31, 0x39, 0x38, 0x31, 0x0D, 0xFF, 0x46, 0x31,
	0x0D, 0xFF, 0x43, 0x29, 0x20, 0x41, 0x43, 0x4F, 0x52, 0x4E, 0x53, 0x4F,
	0x46, 0x54, 0x20, 0x31, 0x39, 0x38, 0x31, 0x0D, 0xFF, 0x46, 0x20, 0x0D,
	0xFF, 0x20, 0x3B, 0x47, 0x2E, 0x66, 0x0D, 0xFF, 0x46, 0x0D, 0xFF, 0x20,
	0x33, 0x00, 0x00, 0xF0, 0x00, 0x1F, 0xFF, 0x80, 0x3F, 0xFF, 0xC0, 0x73,
	0x33, 0xE0, 0xF3, 0x33, 0xF0, 0x7F, 0xFF, 0xE0, 0x35, 0x55, 0xC0, 0x1F,
	0xFF, 0x80, 0x00, 0x0F, 0x00, 0x01, 0xFF, 0xF8, 0x03, 0xFF, 0xFC, 0x07,
	0xCC, 0xCE, 0x0F, 0xCC, 0xCF, 0x07, 0xFF, 0xFE, 0x03, 0xAA, 0xAC, 0x01,
	0xFF, 0xF8, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00, 0x03, 0xF0, 0x00, 0x07,
	0xF8, 0x00, 0x0F, 0xFC, 0x00, 0x0F, 0xFC, 0x00, 0x0F, 0xFC, 0x00, 0x0F,
	0xFC, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0xFC, 0x00, 0x01,
	0xFE, 0x00, 0x03, 0xFF, 0x00, 0x03, 0xFF, 0x00, 0x03, 0xFF, 0x00, 0x03,
	0xFF, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x3F, 0x00, 0x00,
	0x7F, 0x80, 0x00, 0xFF, 0xC0, 0x00, 0xFF, 0xC0, 0x00, 0xFF, 0xC0, 0x00,
	0xFF, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0F, 0xC0, 0x00,
	0x1F, 0xE0, 0x00, 0x3F, 0xF0, 0x00, 0x3F, 0xF0, 0x00, 0x3F, 0xF0, 0x00,
	0x3F, 0xF0, 0x18, 0x98, 0x69, 0x20, 0xA8, 0xA9, 0x00, 0x60, 0xA0, 0x00,
	0x18, 0xAD, 0x02, 0xB0, 0x30, 0xFB, 0x98, 0x91, 0x70, 0x20, 0x00, 0x30,
	0x90, 0xF9, 0x18, 0x60, 0xA0, 0x00, 0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xA9,
	0x24, 0x91, 0x70, 0xA0, 0x20, 0xA9, 0x3C, 0x91, 0x70, 0xA0, 0x40, 0x91,
	0x70, 0xA0, 0x60, 0xA9, 0x18, 0x91, 0x70, 0xA0, 0x00, 0x60, 0xA0, 0x00,
	0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xAD, 0x10, 0x28, 0x91, 0x70, 0xA0, 0x20,
	0x91, 0x70, 0xA0, 0x40, 0x91, 0x70, 0xA0, 0x60, 0x91, 0x70, 0xA0, 0x00,
	0x60, 0xA0, 0x00, 0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xA9, 0x10, 0x91, 0x70,
	0xA0, 0x20, 0x91, 0x70, 0xA9, 0x08, 0xA0, 0x40, 0x91, 0x70, 0xA0, 0x60,
	0x91, 0x70, 0xA9, 0x10, 0xA0, 0x80, 0x91, 0x70, 0xA0, 0xA0, 0x91, 0x70,
	0xA9, 0x08, 0xA0, 0xC0, 0x91, 0x70, 0xA0, 0xE0, 0x91, 0x70, 0xA0, 0x00,
	0x60, 0xA0, 0x00, 0x18, 0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xA9, 0x18, 0x91,
	0x70, 0x20, 0x00, 0x30, 0xA9, 0x3C, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9,
	0x7E, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xDB, 0x91, 0x70, 0x20, 0x00,
	0x30, 0xA9, 0xFF, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0x7E, 0x91, 0x70,
	0x20, 0x00, 0x30, 0xA9, 0x24, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0x24,
	0x91, 0x70, 0x20, 0x00, 0x30, 0x60, 0xA0, 0x00, 0x18, 0xAD, 0x02, 0xB0,
	0x30, 0xFB, 0xA9, 0x3C, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0x7E, 0x91,
	0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9,
	0xDB, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91, 0x70, 0x20, 0x00,
	0x30, 0xA9, 0x7E, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0x42, 0x91, 0x70,
	0x20, 0x00, 0x30, 0xA9, 0x66, 0x91, 0x70, 0x20, 0x00, 0x30, 0x60, 0xA0,
	0x00, 0x18, 0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xA9, 0x81, 0x91, 0x70, 0x20,
	0x00, 0x30, 0xA9, 0xBD, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0x7E, 0x91,
	0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9,
	0xDB, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91, 0x70, 0x20, 0x00,
	0x30, 0xA9, 0x66, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0x24, 0x91, 0x70,
	0x20, 0x00, 0x30, 0x60, 0xA0, 0x00, 0x18, 0xAD, 0x02, 0xB0, 0x30, 0xFB,
	0xA9, 0x18, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0x3C, 0x91, 0x70, 0x20,
	0x00, 0x30, 0xA9, 0x7E, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xDB, 0x91,
	0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9,
	0x7E, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0x42, 0x91, 0x70, 0x20, 0x00,
	0x30, 0xA9, 0x81, 0x91, 0x70, 0x20, 0x00, 0x30, 0x60, 0xA0, 0x00, 0x18,
	0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xA9, 0x3C, 0x91, 0x70, 0x20, 0x00, 0x30,
	0xA9, 0x7E, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91, 0x70, 0x20,
	0x00, 0x30, 0xA9, 0xDB, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91,
	0x70, 0x20, 0x00, 0x30, 0xA9, 0x7E, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9,
	0x42, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xC3, 0x91, 0x70, 0x20, 0x00,
	0x30, 0x60, 0xA0, 0x00, 0x18, 0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xA9, 0x81,
	0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xBD, 0x91, 0x70, 0x20, 0x00, 0x30,
	0xA9, 0x7E, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91, 0x70, 0x20,
	0x00, 0x30, 0xA9, 0xDB, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91,
	0x70, 0x20, 0x00, 0x30, 0xA9, 0xC3, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9,
	0x81, 0x91, 0x70, 0x20, 0x00, 0x30, 0x60, 0xBD, 0x70, 0x2F, 0x91, 0x70,
	0xE8, 0xC8, 0xBD, 0x70, 0x2F, 0x91, 0x70, 0xE8, 0xC8, 0xBD, 0x70, 0x2F,
	0x91, 0x70, 0xE8, 0x60, 0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xA0, 0x00, 0x20,
	0x09, 0x32, 0xA0, 0x20, 0x20, 0x09, 0x32, 0xA0, 0x40, 0x20, 0x09, 0x32,
	0xA0, 0x60, 0x20, 0x09, 0x32, 0xA0, 0x80, 0x20, 0x09, 0x32, 0xA0, 0xA0,
	0x20, 0x09, 0x32, 0xA0, 0xC0, 0x20, 0x09, 0x32, 0xA0, 0xE0, 0x20, 0x09,
	0x32, 0x60, 0xAD, 0x06, 0x28, 0xF0, 0x01, 0x60, 0xAD, 0x01, 0xB0, 0xC9,
	0xFF, 0xD0, 0x03, 0x4C, 0xB1, 0x32, 0x8D, 0x07, 0x28, 0xAD, 0x04, 0x28,
	0x29, 0x48, 0x69, 0x38, 0x0A, 0x0A, 0x2E, 0x13, 0x28, 0x2E, 0x05, 0x28,
	0x2E, 0x04, 0x28, 0xAD, 0x07, 0x28, 0xC9, 0x80, 0x10, 0x1F, 0xAD, 0x08,
	0x28, 0xC9, 0x1D, 0x10, 0x32, 0xAD, 0x0F, 0x28, 0x18, 0x69, 0x18, 0x8D,
	0x0F, 0x28, 0xC9, 0x79, 0x30, 0x25, 0xA9, 0x30, 0x8D, 0x0F, 0x28, 0xEE,
	0x08, 0x28, 0x4C, 0xB1, 0x32, 0xAD, 0x08, 0x28, 0xF0, 0x15, 0xAD, 0x0F,
	0x28, 0x38, 0xE9, 0x18, 0x8D, 0x0F, 0x28, 0xC9, 0x30, 0x10, 0x08, 0xA9,
	0x78, 0x8D, 0x0F, 0x28, 0xCE, 0x08, 0x28, 0xAD, 0x08, 0x28, 0x85, 0x70,
	0xAE, 0x0F, 0x28, 0xA9, 0x95, 0x85, 0x71, 0x4C, 0x1E, 0x32, 0xA2, 0x00,
	0xA0, 0x00, 0xBD, 0xD7, 0x28, 0xF0, 0x6B, 0x85, 0x71, 0xBD, 0xD6, 0x28,
	0x29, 0x1F, 0x85, 0x70, 0xB1, 0x70, 0x49, 0x81, 0xF0, 0x0F, 0xB1, 0x70,
	0x49, 0x3C, 0xF0, 0x09, 0xB1, 0x70, 0x49, 0x18, 0xF0, 0x03, 0x20, 0x08,
	0x30, 0xE6, 0x71, 0xA5, 0x71, 0xC9, 0x96, 0x30, 0x2A, 0xA9, 0x00, 0x9D,
	0xD7, 0x28, 0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xA0, 0x80, 0xA9, 0x5C, 0x91,
	0x70, 0x20, 0x00, 0x30, 0xA9, 0xC5, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9,
	0xFF, 0x91, 0x70, 0xA0, 0x00, 0x88, 0x98, 0xD0, 0xFC, 0x20, 0x08, 0x30,
	0x4C, 0x34, 0x33, 0xA0, 0xC0, 0xB1, 0x70, 0x29, 0x24, 0xD0, 0x1A, 0xA5,
	0x71, 0x9D, 0xD7, 0x28, 0xBD, 0xD6, 0x28, 0x30, 0x06, 0x20, 0x1A, 0x30,
	0x4C, 0x34, 0x33, 0x20, 0x53, 0x30, 0xE8, 0xE8, 0xE0, 0x0A, 0xD0, 0x88,
	0x60, 0xA5, 0x71, 0xC9, 0x95, 0x10, 0x3D, 0xA0, 0x00, 0xB1, 0x70, 0xF0,
	0x2C, 0xC9, 0xFF, 0xD0, 0x2B, 0x20, 0x08, 0x30, 0xA0, 0x60, 0xA9, 0x33,
	0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0x33, 0x91, 0x70, 0x20, 0x00, 0x30,
	0xA9, 0xF3, 0x91, 0x70, 0x20, 0x00, 0x30, 0xA9, 0xFF, 0x91, 0x70, 0x20,
	0x00, 0x30, 0xA9, 0xFF, 0x91, 0x70, 0x4C, 0x76, 0x33, 0x20, 0x08, 0x30,
	0xA9, 0x00, 0x9D, 0xD7, 0x28, 0x4C, 0x34, 0x33, 0xA9, 0x00, 0x9D, 0xD7,
	0x28, 0x20, 0x08, 0x30, 0xAD, 0x02, 0xB0, 0x30, 0xFB, 0xA0, 0x80, 0xA9,
	0x42, 0x91, 0x70, 0xA0, 0xA0, 0xA9, 0x95, 0x91, 0x70, 0xA0, 0xC0, 0xA9,
	0x28, 0x91, 0x70, 0xA0, 0xE0, 0xA9, 0xC5, 0x91, 0x70, 0xA9, 0xFF, 0x8D,
	0x06, 0x28, 0x60, 0xAD, 0x0C, 0x28, 0xD0, 0x03, 0x4C, 0x48, 0x35, 0x85,
	0x71, 0xAD, 0x0B, 0x28, 0x85, 0x70, 0xC6, 0x71, 0xA5, 0x71, 0xC9, 0x80,
	0x30, 0x1C, 0xA0, 0xC0, 0xB1, 0x70, 0xD0, 0x21, 0x20, 0x38, 0x30, 0xE6,
	0x71, 0xA0, 0xA0, 0xB1, 0x70, 0xD0, 0x03, 0x20, 0x08, 0x30, 0xC6, 0x71,
	0xA5, 0x71, 0x8D, 0x0C, 0x28, 0x60, 0xE6, 0x71, 0x20, 0x08, 0x30, 0xA9,
	0x00, 0x8D, 0x0C, 0x28, 0x60, 0x20, 0x08, 0x30, 0xE6, 0x71, 0x20, 0x08,
	0x30, 0xA9, 0x00, 0x8D, 0x0C, 0x28, 0xC6, 0x71, 0xA5, 0x71, 0xC9, 0x82,
	0x10, 0x7F, 0xA0, 0x08, 0x20, 0x88, 0xC9, 0xC6, 0x04, 0xA5, 0x08, 0x8D,
	0x04, 0x28, 0xC9, 0xC8, 0x90, 0x07, 0xA9, 0xC8, 0xA2, 0x20, 0x4C, 0x22,
	0x34, 0xC9, 0x64, 0x90, 0x07, 0xA9, 0x64, 0xA2, 0x10, 0x4C, 0x22, 0x34,
	0xA9, 0x32, 0xA2, 0x00, 0x18, 0x6D, 0x01, 0x28, 0x8D, 0x01, 0x28, 0xA9,
	0x00, 0x6D, 0x02, 0x28, 0x8D, 0x02, 0x28, 0xC6, 0x70, 0xC6, 0x70, 0x20,
	0x08, 0x30, 0xE6, 0x70, 0x20, 0x08, 0x30, 0xE6, 0x70, 0xE6, 0x70, 0xE6,
	0x70, 0x20, 0x08, 0x30, 0xC6, 0x70, 0xC6, 0x70, 0xA0, 0x00, 0x2C, 0x02,
	0xB0, 0x30, 0xFB, 0xBD, 0x34, 0x3B, 0x91, 0x70, 0xE8, 0x20, 0x00, 0x30,
	0x90, 0xF5, 0x4C, 0x64, 0x3B, 0xE6, 0x70, 0x20, 0x08, 0x30, 0x18, 0xA9,
	0x64, 0x6D, 0x01, 0x28, 0x8D, 0x01, 0x28, 0xA9, 0x00, 0x6D, 0x02, 0x28,
	0x8D, 0x02, 0x28, 0xA9, 0x00, 0x8D, 0x00, 0x28, 0x60, 0xA2, 0x72, 0xA0,
	0x00, 0xBD, 0x01, 0x28, 0xF0, 0x10, 0x85, 0x71, 0xBD, 0x00, 0x28, 0x85,
	0x70, 0xB1, 0x70, 0xD0, 0x05, 0xA9, 0x1E, 0x4C, 0xF1, 0x34, 0xE8, 0xE8,
	0xE0, 0x86, 0xD0, 0xE5, 0xBD, 0x01, 0x28, 0xF0, 0x10, 0x85, 0x71, 0xBD,
	0x00, 0x28, 0x85, 0x70, 0xB1, 0x70, 0xD0, 0x05, 0xA9, 0x14, 0x4C, 0xF1,
	0x34, 0xE8, 0xE8, 0xE0, 0xAE, 0xD0, 0xE5, 0xBD, 0x01, 0x28, 0xF0, 0x10,
	0x85, 0x71, 0xBD, 0x00, 0x28, 0x85, 0x70, 0xB1, 0x70, 0xD0, 0x05, 0xA9,
	0x0A, 0x4C, 0xF1, 0x34, 0xE8, 0xE8, 0xE0, 0xD6, 0xD0, 0xE5, 0xA2, 0x00,
	0xBD, 0xD7, 0x28, 0xF0, 0x13, 0x85, 0x71, 0xBD, 0xD6, 0x28, 0x29, 0x1F,
	0x85, 0x70, 0xB1, 0x70, 0xD0, 0x06, 0xA9, 0x00, 0x9D, 0xD7, 0x28, 0x60,
	0xE8, 0xE8, 0xE0, 0x0A, 0xD0, 0xE2, 0x60, 0x18, 0x6D, 0x01, 0x28, 0x8D,
	0x01, 0x28, 0xA9, 0x00, 0x6D, 0x02, 0x28, 0x8D, 0x02, 0x28, 0xAD, 0x02,
	0xB0, 0x30, 0xFB, 0xA0, 0x00, 0xA9, 0x18, 0x91, 0x70, 0xA0, 0x20, 0xA9,
	0x44, 0x91, 0x70, 0xA0, 0x40, 0xA9, 0x92, 0x91, 0x70, 0xA0, 0x60, 0xA9,
	0x22, 0x91, 0x70, 0xA0, 0x80, 0xA9, 0x40, 0x91, 0x70, 0xA0, 0xA0, 0xA9,
	0x10, 0x91, 0x70, 0xCE, 0x03, 0x28, 0xA9, 0x00, 0x9D, 0x01, 0x28, 0xA0,
	0x63, 0x88, 0x98, 0xAA, 0xCA, 0x8A, 0xD0, 0xFC, 0xAD, 0x02, 0xB0, 0x49,
	0x04, 0x8D, 0x02, 0xB0, 0x98, 0xD0, 0xEE, 0x4C, 0x08, 0x30, 0x2C, 0x02,
	0xB0, 0x50, 0x01, 0x60, 0xA9, 0x94, 0x8D, 0x0C, 0x28, 0xAD, 0x08, 0x28,
	0x8D, 0x0B, 0x28, 0xEE, 0x0B, 0x28, 0xA9, 0x95, 0x85, 0x71, 0xAD, 0x0B,
	0x28, 0x85, 0x70, 0xA0, 0x00, 0xB1, 0x70, 0x8D, 0x10, 0x28, 0xAD, 0x02,
	0xB0, 0x49, 0x04, 0x8D, 0x02, 0xB0, 0x60, 0x2C, 0x00, 0x28, 0x50, 0x3F,
	0x20, 0xA9, 0x33, 0x20, 0x4C, 0x32, 0xA9, 0x81, 0x85, 0x71, 0xAD, 0x00,
	0x28, 0x30, 0x11, 0x29, 0x1F, 0x85, 0x70, 0xA2, 0x18, 0x20, 0x1E, 0x32,
	0xA9, 0xC0, 0x05, 0x70, 0x8D, 0x00, 0x28, 0x60, 0xAD, 0x00, 0x28, 0x29,
	0x1F, 0x85, 0x70, 0x20, 0x08, 0x30, 0xE6, 0x70, 0xA5, 0x70, 0xC9, 0x1E,
	0x10, 0x26, 0xA2, 0x00, 0x20, 0x1E, 0x32, 0xA9, 0x40, 0x05, 0x70, 0x8D,
	0x00, 0x28, 0x60, 0xAD, 0x04, 0x28, 0x29, 0xFB, 0xF0, 0x01, 0x60, 0xA9,
	0x40, 0x8D, 0x00, 0x28, 0xAD, 0x03, 0x28, 0xF0, 0x01, 0x60, 0xA9, 0x00,
	0x8D, 0x00, 0x28, 0x60, 0xA9, 0x00, 0x8D, 0x00, 0x28, 0x20, 0x08, 0x30,
	0xE6, 0x70, 0x20, 0x08, 0x30, 0xE6, 0x70, 0x4C, 0x08, 0x30, 0xA2, 0x72,
	0x18, 0xBD, 0x01, 0x28, 0xD0, 0x03, 0x4C, 0x73, 0x36, 0x85, 0x71, 0xAD,
	0x00, 0x28, 0xF0, 0x0D, 0xA0, 0x14, 0xAD, 0x02, 0xB0, 0x49, 0x04, 0x8D,
	0x02, 0xB0, 0x88, 0xD0, 0xF5, 0xBD, 0x00, 0x28, 0x85, 0x70, 0x20, 0x08,
	0x30, 0xA5, 0x70, 0x6D, 0x09, 0x28, 0x9D, 0x00, 0x28, 0x18, 0xD0, 0x0C,
	0xAD, 0x09, 0x28, 0xC9, 0xFF, 0xD0, 0x05, 0xA9, 0x01, 0x8D, 0x0A, 0x28,
	0xBD, 0x00, 0x28, 0xC9, 0x1F, 0xD0, 0x0C, 0xAD, 0x09, 0x28, 0xC9, 0x01,
	0xD0, 0x05, 0xA9, 0xFF, 0x8D, 0x0A, 0x28, 0xBD, 0x00, 0x28, 0x85, 0x70,
	0x29, 0x01, 0xF0, 0x06, 0x20, 0x83, 0x30, 0x4C, 0x47, 0x36, 0x20, 0x46,
	0x31, 0x8A, 0x48, 0xA2, 0x00, 0xE8, 0xAC, 0x03, 0x28, 0x88, 0x98, 0xD0,
	0xFC, 0xE0, 0xC8, 0xD0, 0xF4, 0x20, 0xA9, 0x33, 0x20, 0x4C, 0x32, 0x20,
	0xA9, 0x33, 0x20, 0x4C, 0x32, 0x68, 0xAA, 0x29, 0x03, 0xD0, 0x0A, 0x8A,
	0x48, 0x20, 0xC0, 0x32, 0x20, 0x75, 0x35, 0x68, 0xAA, 0xE8, 0xE8, 0xE0,
	0x86, 0xF0, 0x03, 0x4C, 0xE6, 0x35, 0x18, 0x60, 0xA2, 0x86, 0x18, 0xBD,
	0x01, 0x28, 0xD0, 0x03, 0x4C, 0x0D, 0x37, 0x85, 0x71, 0xAD, 0x00, 0x28,
	0xF0, 0x0D, 0xA0, 0x14, 0xAD, 0x02, 0xB0, 0x49, 0x04, 0x8D, 0x02, 0xB0,
	0x88, 0xD0, 0xF5, 0xBD, 0x00, 0x28, 0x85, 0x70, 0x20, 0x08, 0x30, 0xA5,
	0x70, 0x6D, 0x09, 0x28, 0x9D, 0x00, 0x28, 0x18, 0xD0, 0x0C, 0xAD, 0x09,
	0x28, 0xC9, 0xFF, 0xD0, 0x05, 0xA9, 0x01, 0x8D, 0x0A, 0x28, 0xBD, 0x00,
	0x28, 0xC9, 0x1F, 0xD0, 0x0C, 0xAD, 0x09, 0x28, 0xC9, 0x01, 0xD0, 0x05,
	0xA9, 0xFF, 0x8D, 0x0A, 0x28, 0xBD, 0x00, 0x28, 0x85, 0x70, 0x29, 0x01,
	0xF0, 0x06, 0x20, 0xC4, 0x30, 0x4C, 0xE1, 0x36, 0x20, 0x87, 0x31, 0x8A,
	0x48, 0xA2, 0x00, 0xE8, 0xAC, 0x03, 0x28, 0x88, 0x98, 0xD0, 0xFC, 0xE0,
	0xC8, 0xD0, 0xF4, 0x20, 0xA9, 0x33, 0x20, 0x4C, 0x32, 0x20, 0xA9, 0x33,
	0x20, 0x4C, 0x32, 0x68, 0xAA, 0x29, 0x03, 0xD0, 0x0A, 0x8A, 0x48, 0x20,
	0xC0, 0x32, 0x20, 0x75, 0x35, 0x68, 0xAA, 0xE8, 0xE8, 0xE0, 0x9A, 0xF0,
	0x03, 0x4C, 0x80, 0x36, 0x18, 0x60, 0xA2, 0x9A, 0x18, 0xBD, 0x01, 0x28,
	0xD0, 0x03, 0x4C, 0xA7, 0x37, 0x85, 0x71, 0xAD, 0x00, 0x28, 0xF0, 0x0D,
	0xA0, 0x14, 0xAD, 0x02, 0xB0, 0x49, 0x04, 0x8D, 0x02, 0xB0, 0x88, 0xD0,
	0xF5, 0xBD, 0x00, 0x28, 0x85, 0x70, 0x20, 0x08, 0x30, 0xA5, 0x70, 0x6D,
	0x09, 0x28, 0x9D, 0x00, 0x28, 0x18, 0xD0, 0x0C, 0xAD, 0x09, 0x28, 0xC9,
	0xFF, 0xD0, 0x05, 0xA9, 0x01, 0x8D, 0x0A, 0x28, 0xBD, 0x00, 0x28, 0xC9,
	0x1F, 0xD0, 0x0C, 0xAD, 0x09, 0x28, 0xC9, 0x01, 0xD0, 0x05, 0xA9, 0xFF,
	0x8D, 0x0A, 0x28, 0xBD, 0x00, 0x28, 0x85, 0x70, 0x29, 0x01, 0xF0, 0x06,
	0x20, 0xC4, 0x30, 0x4C, 0x7B, 0x37, 0x20, 0x87, 0x31, 0x8A, 0x48, 0xA2,
	0x00, 0xE8, 0xAC, 0x03, 0x28, 0x88, 0x98, 0xD0, 0xFC, 0xE0, 0xC8, 0xD0,
	0xF4, 0x20, 0xA9, 0x33, 0x20, 0x4C, 0x32, 0x20, 0xA9, 0x33, 0x20, 0x4C,
	0x32, 0x68, 0xAA, 0x29, 0x03, 0xD0, 0x0A, 0x8A, 0x48, 0x20, 0xC0, 0x32,
	0x20, 0x75, 0x35, 0x68, 0xAA, 0xE8, 0xE8, 0xE0, 0xAE, 0xF0, 0x03, 0x4C,
	0x1A, 0x37, 0x18, 0x60, 0xA2, 0xAE, 0x18, 0xBD, 0x01, 0x28, 0xD0, 0x03,
	0x4C, 0x41, 0x38, 0x85, 0x71, 0xAD, 0x00, 0x28, 0xF0, 0x0D, 0xA0, 0x14,
	0xAD, 0x02, 0xB0, 0x49, 0x04, 0x8D, 0x02, 0xB0, 0x88, 0xD0, 0xF5, 0xBD,
	0x00, 0x28, 0x85, 0x70, 0x20, 0x08, 0x30, 0xA5, 0x70, 0x6D, 0x09, 0x28,
	0x9D, 0x00, 0x28, 0x18, 0xD0, 0x0C, 0xAD, 0x09, 0x28, 0xC9, 0xFF, 0xD0,
	0x05, 0xA9, 0x01, 0x8D, 0x0A, 0x28, 0xBD, 0x00, 0x28, 0xC9, 0x1F, 0xD0,
	0x0C, 0xAD, 0x09, 0x28, 0xC9, 0x01, 0xD0, 0x05, 0xA9, 0xFF, 0x8D, 0x0A,
	0x28, 0xBD, 0x00, 0x28, 0x85, 0x70, 0x29, 0x01, 0xF0, 0x06, 0x20, 0x05,
	0x31, 0x4C, 0x15, 0x38, 0x20, 0xC8, 0x31, 0x8A, 0x48, 0xA2, 0x00, 0xE8,
	0xAC, 0x03, 0x28, 0x88, 0x98, 0xD0, 0xFC, 0xE0, 0xC8, 0xD0, 0xF4, 0x20,
	0xA9, 0x33, 0x20, 0x4C, 0x32, 0x20, 0xA9, 0x33, 0x20, 0x4C, 0x32, 0x68,
	0xAA, 0x29, 0x03, 0xD0, 0x0A, 0x8A, 0x48, 0x20, 0xC0, 0x32, 0x20, 0x75,
	0x35, 0x68, 0xAA, 0xE8, 0xE8, 0xE0, 0xC2, 0xF0, 0x03, 0x4C, 0xB4, 0x37,
	0x18, 0x60, 0xA2, 0xC2, 0x18, 0xBD, 0x01, 0x28, 0xD0, 0x03, 0x4C, 0xDB,
	0x38, 0x85, 0x71, 0xAD, 0x00, 0x28, 0xF0, 0x0D, 0xA0, 0x14, 0xAD, 0x02,
	0xB0, 0x49, 0x04, 0x8D, 0x02, 0xB0, 0x88, 0xD0, 0xF5, 0xBD, 0x00, 0x28,
	0x85, 0x70, 0x20, 0x08, 0x30, 0xA5, 0x70, 0x6D, 0x09, 0x28, 0x9D, 0x00,
	0x28, 0x18, 0xD0, 0x0C, 0xAD, 0x09, 0x28, 0xC9, 0xFF, 0xD0, 0x05, 0xA9,
	0x01, 0x8D, 0x0A, 0x28, 0xBD, 0x00, 0x28, 0xC9, 0x1F, 0xD0, 0x0C, 0xAD,
	0x09, 0x28, 0xC9, 0x01, 0xD0, 0x05, 0xA9, 0xFF, 0x8D, 0x0A, 0x28, 0xBD,
	0x00, 0x28, 0x85, 0x70, 0x29, 0x01, 0xF0, 0x06, 0x20, 0x05, 0x31, 0x4C,
	0xAF, 0x38, 0x20, 0xC8, 0x31, 0x8A, 0x48, 0xA2, 0x00, 0xE8, 0xAC, 0x03,
	0x28, 0x88, 0x98, 0xD0, 0xFC, 0xE0, 0xC8, 0xD0, 0xF4, 0x20, 0xA9, 0x33,
	0x20, 0x4C, 0x32, 0x20, 0xA9, 0x33, 0x20, 0x4C, 0x32, 0x68, 0xAA, 0x29,
	0x03, 0xD0, 0x0A, 0x8A, 0x48, 0x20, 0xC0, 0x32, 0x20, 0x75, 0x35, 0x68,
	0xAA, 0xE8, 0xE8, 0xE0, 0xD6, 0xF0, 0x03, 0x4C, 0x4E, 0x38, 0x18, 0x60,
	0xA2, 0x72, 0x18, 0xBD, 0x01, 0x28, 0xF0, 0x23, 0x85, 0x71, 0xBD, 0x00,
	0x28, 0x85, 0x70, 0x20, 0x08, 0x30, 0xA5, 0x71, 0x69, 0x01, 0x9D, 0x01,
	0x28, 0x18, 0x85, 0x71, 0xA5, 0x70, 0x29, 0x01, 0xF0, 0x06, 0x20, 0x83,
	0x30, 0x4C, 0x11, 0x39, 0x20, 0x46, 0x31, 0xE8, 0xE8, 0xE0, 0x86, 0xD0,
	0xD1, 0x18, 0x60, 0xA2, 0x86, 0x18, 0xBD, 0x01, 0x28, 0xF0, 0x23, 0x85,
	0x71, 0xBD, 0x00, 0x28, 0x85, 0x70, 0x20, 0x08, 0x30, 0xA5, 0x71, 0x69,
	0x01, 0x9D, 0x01, 0x28, 0x18, 0x85, 0x71, 0xA5, 0x70, 0x29, 0x01, 0xF0,
	0x06, 0x20, 0xC4, 0x30, 0x4C, 0x44, 0x39, 0x20, 0x87, 0x31, 0xE8, 0xE8,
	0xE0, 0xAE, 0xD0, 0xD1, 0x18, 0x60, 0xA2, 0xAE, 0x18, 0xBD, 0x01, 0x28,
	0xF0, 0x23, 0x85, 0x71, 0xBD, 0x00, 0x28, 0x85, 0x70, 0x20, 0x08, 0x30,
	0xA5, 0x71, 0x69, 0x01, 0x9D, 0x01, 0x28, 0x18, 0x85, 0x71, 0xA5, 0x70,
	0x29, 0x01, 0xF0, 0x06, 0x20, 0x05, 0x31, 0x4C, 0x77, 0x39, 0x20, 0xC8,
	0x31, 0xE8, 0xE8, 0xE0, 0xD6, 0xD0, 0xD1, 0x18, 0x60, 0xA0, 0x72, 0xAD,
	0x03, 0x28, 0xC9, 0x0F, 0x10, 0x02, 0x0A, 0x0A, 0x8D, 0x12, 0x28, 0xAD,
	0x04, 0x28, 0x29, 0x48, 0x69, 0x38, 0x0A, 0x0A, 0x2E, 0x13, 0x28, 0x2E,
	0x05, 0x28, 0x2E, 0x04, 0x28, 0xAD, 0x04, 0x28, 0x29, 0x07, 0xD0, 0x2C,
	0xA9, 0x28, 0x85, 0x71, 0xA9, 0x51, 0x85, 0x70, 0xB1, 0x70, 0xD0, 0x27,
	0xA9, 0x3D, 0x85, 0x70, 0xB1, 0x70, 0xD0, 0x1F, 0xA9, 0x29, 0x85, 0x70,
	0xB1, 0x70, 0xD0, 0x17, 0xA9, 0x15, 0x85, 0x70, 0xB1, 0x70, 0xD0, 0x0F,
	0xA9, 0x01, 0x85, 0x70, 0xB1, 0x70, 0xD0, 0x07, 0xC8, 0xC8, 0xC0, 0x86,
	0xD0, 0xB5, 0x60, 0xA2, 0x00, 0xBD, 0xD7, 0x28, 0xD0, 0x18, 0xB1, 0x70,
	0x18, 0x69, 0x01, 0x9D, 0xD7, 0x28, 0xC6, 0x70, 0xAD, 0x04, 0x28, 0x29,
	0x80, 0x18, 0x71, 0x70, 0x9D, 0xD6, 0x28, 0x4C, 0xD2, 0x39, 0xE8, 0xE8,
	0xE0, 0x0A, 0xD0, 0x03, 0x4C, 0xD2, 0x39, 0xEC, 0x12, 0x28, 0x30, 0xD5,
	0x4C, 0xD2, 0x39, 0xA2, 0x72, 0xBD, 0x01, 0x28, 0x85, 0x71, 0xBD, 0x00,
	0x28, 0x85, 0x70, 0x20, 0x83, 0x30, 0xE8, 0xE8, 0xE0, 0x86, 0xD0, 0xED,
	0xBD, 0x01, 0x28, 0x85, 0x71, 0xBD, 0x00, 0x28, 0x85, 0x70, 0x20, 0xC4,
	0x30, 0xE8, 0xE8, 0xE0, 0xAE, 0xD0, 0xED, 0xBD, 0x01, 0x28, 0x85, 0x71,
	0xBD, 0x00, 0x28, 0x85, 0x70, 0x20, 0x05, 0x31, 0xE8, 0xE8, 0xE0, 0xD6,
	0xD0, 0xED, 0x60, 0x20, 0xE4, 0x35, 0x20, 0x7F, 0x39, 0xA9, 0x00, 0x8D,
	0x0E, 0x28, 0xAD, 0x06, 0x28, 0xF0, 0x01, 0x60, 0x20, 0x7E, 0x36, 0x20,
	0x7F, 0x39, 0xA9, 0x01, 0x8D, 0x0E, 0x28, 0xAD, 0x06, 0x28, 0xF0, 0x01,
	0x60, 0x20, 0x18, 0x37, 0x20, 0x7F, 0x39, 0xA9, 0x02, 0x8D, 0x0E, 0x28,
	0xAD, 0x06, 0x28, 0xF0, 0x01, 0x60, 0x20, 0xB2, 0x37, 0x20, 0x7F, 0x39,
	0xA9, 0x03, 0x8D, 0x0E, 0x28, 0xAD, 0x06, 0x28, 0xF0, 0x01, 0x60, 0x20,
	0x4C, 0x38, 0x20, 0x7F, 0x39, 0xA9, 0x04, 0x8D, 0x0E, 0x28, 0xAD, 0x06,
	0x28, 0xF0, 0x01, 0x60, 0x20, 0x75, 0x35, 0x20, 0xC0, 0x32, 0x20, 0x7F,
	0x39, 0x20, 0x4C, 0x32, 0x20, 0xA9, 0x33, 0xA2, 0x00, 0x8A, 0x1D, 0xD7,
	0x28, 0xE8, 0xE8, 0xE0, 0x0A, 0xD0, 0xF7, 0x0D, 0x00, 0x28, 0x0D, 0x03,
	0x28, 0xD0, 0x01, 0x60, 0xAD, 0x03, 0x28, 0xD0, 0x0D, 0xA2, 0x00, 0xA0,
	0xDC, 0xC8, 0xD0, 0xFD, 0xE8, 0xD0, 0xF8, 0x4C, 0xF4, 0x3A, 0xAD, 0x11,
	0x28, 0xA8, 0x49, 0x10, 0x8D, 0x11, 0x28, 0x98, 0xA2, 0x05, 0x88, 0xEA,
	0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xD0, 0xF5, 0xA8, 0xAD, 0x02,
	0xB0, 0x49, 0x04, 0x8D, 0x02, 0xB0, 0x98, 0xCA, 0xD0, 0xE8, 0xAD, 0x00,
	0x28, 0xF0, 0x0D, 0xA0, 0x14, 0xAD, 0x02, 0xB0, 0x49, 0x04, 0x8D, 0x02,
	0xB0, 0x88, 0xD0, 0xF5, 0xAD, 0x0A, 0x28, 0xD0, 0x03, 0x4C, 0x45, 0x3A,
	0x20, 0x4C, 0x32, 0x20, 0xE6, 0x38, 0x20, 0x19, 0x39, 0x20, 0x4C, 0x39,
	0xA5, 0x71, 0xC9, 0x95, 0x30, 0x06, 0xA9, 0x01, 0x8D, 0x0D, 0x28, 0x60,
	0xAD, 0x0A, 0x28, 0x8D, 0x09, 0x28, 0xA9, 0x00, 0x8D, 0x0A, 0x28, 0x4C,
	0x45, 0x3A, 0x00, 0x7B, 0x42, 0x7A, 0x0A, 0x7B, 0x00, 0x00, 0x00, 0xC0,
	0x40, 0x40, 0x40, 0xC0, 0x00, 0x00, 0x00, 0x13, 0x32, 0x12, 0x12, 0x3B,
	0x00, 0x00, 0x00, 0xDE, 0x52, 0x52, 0x52, 0xDE, 0x00, 0x00, 0x00, 0x7B,
	0x0A, 0x7A, 0x42, 0x7B, 0x00, 0x00, 0x00, 0xDE, 0x52, 0x52, 0x52, 0xDE,
	0x00, 0x00, 0xE6, 0x70, 0xBD, 0x34, 0x3B, 0x91, 0x70, 0xE8, 0x20, 0x00,
	0x30, 0x90, 0xF5, 0xA9, 0x00, 0x8D, 0x00, 0x28, 0xA2, 0x00, 0xBD, 0x00,
	0x30, 0x29, 0x04, 0x4D, 0x02, 0xB0, 0x8D, 0x02, 0xB0, 0xA0, 0x00, 0x88,
	0xD0, 0xFD, 0xE8, 0xD0, 0xED, 0x20, 0x08, 0x30, 0xC6, 0x70, 0x4C, 0x08,
	0x30, 0x60, 0xA0, 0x08, 0x20, 0x88, 0xC9, 0xC6, 0x04, 0xA5, 0x08, 0x29,
	0x3F, 0xD0, 0x53, 0x2E, 0x61, 0x3B, 0x50, 0x2E, 0x27, 0x22, 0x41, 0x54,
	0x54, 0x45, 0x4D, 0x50, 0x54, 0x20, 0x54, 0x4F, 0x20, 0x4C, 0x45, 0x41,
	0x56, 0x45, 0x20, 0x47, 0x41, 0x4C, 0x41, 0x58, 0x59, 0x22, 0x0D, 0x27,
	0x4C, 0x6A, 0x46, 0x4F, 0x52, 0x40, 0x3D, 0x30, 0x54, 0x4F, 0x33, 0x30,
	0x30, 0x30, 0x3B, 0x4E, 0x2E, 0x3B, 0x52, 0x2E, 0x0D, 0x00, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x39, 0x38, 0x30, 0x0D, 0xE2, 0x20, 0x90, 0x12, 0x00,
	0x20, 0xC0, 0x30, 0xB0, 0x00, 0x62, 0x00, 0x00, 0x50, 0x50, 0x40, 0x82,
	0x22, 0x00
};


void debugdisassemble();

int nAtom = 1;

uint32_t debugmemaddr = 0;
uint32_t debugdisaddr = 0;
uint8_t debuglastcommand = 0;

enum
{
	IMP,
	IMPA,
	IMM,
	ZP,
	ZPX,
	ZPY,
	INDX,
	INDY,
	IND,
	ABS,
	ABSX,
	ABSY,
	IND16,
	IND1X,
	BRA
};
char dopname[256][6] =
{
	/*00*/ "BRK",
	"ORA",
	"---",
	"---",
	"TSB",
	"ORA",
	"ASL",
	"---",
	"PHP",
	"ORA",
	"ASL",
	"---",
	"TSB",
	"ORA",
	"ASL",
	"---",
	/*10*/ "BPL",
	"ORA",
	"ORA",
	"---",
	"TRB",
	"ORA",
	"ASL",
	"---",
	"CLC",
	"ORA",
	"INC",
	"---",
	"TRB",
	"ORA",
	"ASL",
	"---",
	/*20*/ "JSR",
	"AND",
	"---",
	"---",
	"BIT",
	"AND",
	"ROL",
	"---",
	"PLP",
	"AND",
	"ROL",
	"---",
	"BIT",
	"AND",
	"ROL",
	"---",
	/*30*/ "BMI",
	"AND",
	"AND",
	"---",
	"BIT",
	"AND",
	"ROL",
	"---",
	"SEC",
	"AND",
	"DEC",
	"---",
	"BIT",
	"AND",
	"ROL",
	"---",
	/*40*/ "RTI",
	"EOR",
	"---",
	"---",
	"---",
	"EOR",
	"LSR",
	"---",
	"PHA",
	"EOR",
	"LSR",
	"---",
	"JMP",
	"EOR",
	"LSR",
	"---",
	/*50*/ "BVC",
	"EOR",
	"EOR",
	"---",
	"---",
	"EOR",
	"LSR",
	"---",
	"CLI",
	"EOR",
	"PHY",
	"---",
	"---",
	"EOR",
	"LSR",
	"---",
	/*60*/ "RTS",
	"ADC",
	"---",
	"---",
	"STZ",
	"ADC",
	"ROR",
	"---",
	"PLA",
	"ADC",
	"ROR",
	"---",
	"JMP",
	"ADC",
	"ROR",
	"---",
	/*70*/ "BVS",
	"ADC",
	"ADC",
	"---",
	"STZ",
	"ADC",
	"ROR",
	"---",
	"SEI",
	"ADC",
	"PLY",
	"---",
	"JMP",
	"ADC",
	"ROR",
	"---",
	/*80*/ "BRA",
	"STA",
	"---",
	"---",
	"STY",
	"STA",
	"STX",
	"---",
	"DEY",
	"BIT",
	"TXA",
	"---",
	"STY",
	"STA",
	"STX",
	"---",
	/*90*/ "BCC",
	"STA",
	"STA",
	"---",
	"STY",
	"STA",
	"STX",
	"---",
	"TYA",
	"STA",
	"TXS",
	"---",
	"STZ",
	"STA",
	"STZ",
	"---",
	/*A0*/ "LDY",
	"LDA",
	"LDX",
	"---",
	"LDY",
	"LDA",
	"LDX",
	"---",
	"TAY",
	"LDA",
	"TAX",
	"---",
	"LDY",
	"LDA",
	"LDX",
	"---",
	/*B0*/ "BCS",
	"LDA",
	"LDA",
	"---",
	"LDY",
	"LDA",
	"LDX",
	"---",
	"CLV",
	"LDA",
	"TSX",
	"---",
	"LDY",
	"LDA",
	"LDX",
	"---",
	/*C0*/ "CPY",
	"CMP",
	"---",
	"---",
	"CPY",
	"CMP",
	"DEC",
	"---",
	"INY",
	"CMP",
	"DEX",
	"WAI",
	"CPY",
	"CMP",
	"DEC",
	"---",
	/*D0*/ "BNE",
	"CMP",
	"CMP",
	"---",
	"---",
	"CMP",
	"DEC",
	"---",
	"CLD",
	"CMP",
	"PHX",
	"STP",
	"---",
	"CMP",
	"DEC",
	"---",
	/*E0*/ "CPX",
	"SBC",
	"---",
	"---",
	"CPX",
	"SBC",
	"INC",
	"---",
	"INX",
	"SBC",
	"NOP",
	"---",
	"CPX",
	"SBC",
	"INC",
	"---",
	/*F0*/ "BEQ",
	"SBC",
	"SBC",
	"---",
	"---",
	"SBC",
	"INC",
	"---",
	"SED",
	"SBC",
	"PLX",
	"---",
	"---",
	"SBC",
	"INC",
	"---",
};

const int dopaddr[256] =
{
	/*00*/ IMP,
	INDX,
	IMP,
	IMP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMP,
	IMM,
	IMPA,
	IMP,
	ABS,
	ABS,
	ABS,
	IMP,
	/*10*/ BRA,
	INDY,
	IND,
	IMP,
	ZP,
	ZPX,
	ZPX,
	IMP,
	IMP,
	ABSY,
	IMPA,
	IMP,
	ABS,
	ABSX,
	ABSX,
	IMP,
	/*20*/ ABS,
	INDX,
	IMP,
	IMP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMP,
	IMM,
	IMPA,
	IMP,
	ABS,
	ABS,
	ABS,
	IMP,
	/*30*/ BRA,
	INDY,
	IND,
	IMP,
	ZPX,
	ZPX,
	ZPX,
	IMP,
	IMP,
	ABSY,
	IMPA,
	IMP,
	ABSX,
	ABSX,
	ABSX,
	IMP,
	/*40*/ IMP,
	INDX,
	IMP,
	IMP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMP,
	IMM,
	IMPA,
	IMP,
	ABS,
	ABS,
	ABS,
	IMP,
	/*50*/ BRA,
	INDY,
	IND,
	IMP,
	ZP,
	ZPX,
	ZPX,
	IMP,
	IMP,
	ABSY,
	IMP,
	IMP,
	ABS,
	ABSX,
	ABSX,
	IMP,
	/*60*/ IMP,
	INDX,
	IMP,
	IMP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMP,
	IMM,
	IMPA,
	IMP,
	IND16,
	ABS,
	ABS,
	IMP,
	/*70*/ BRA,
	INDY,
	IND,
	IMP,
	ZPX,
	ZPX,
	ZPX,
	IMP,
	IMP,
	ABSY,
	IMP,
	IMP,
	IND1X,
	ABSX,
	ABSX,
	IMP,
	/*80*/ BRA,
	INDX,
	IMP,
	IMP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMP,
	IMM,
	IMP,
	IMP,
	ABS,
	ABS,
	ABS,
	IMP,
	/*90*/ BRA,
	INDY,
	IND,
	IMP,
	ZPX,
	ZPX,
	ZPY,
	IMP,
	IMP,
	ABSY,
	IMP,
	IMP,
	ABS,
	ABSX,
	ABSX,
	IMP,
	/*A0*/ IMM,
	INDX,
	IMM,
	IMP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMP,
	IMM,
	IMP,
	IMP,
	ABS,
	ABS,
	ABS,
	IMP,
	/*B0*/ BRA,
	INDY,
	IND,
	IMP,
	ZPX,
	ZPX,
	ZPY,
	IMP,
	IMP,
	ABSY,
	IMP,
	IMP,
	ABSX,
	ABSX,
	ABSY,
	IMP,
	/*C0*/ IMM,
	INDX,
	IMP,
	IMP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMP,
	IMM,
	IMP,
	IMP,
	ABS,
	ABS,
	ABS,
	IMP,
	/*D0*/ BRA,
	INDY,
	IND,
	IMP,
	ZP,
	ZPX,
	ZPX,
	IMP,
	IMP,
	ABSY,
	IMP,
	IMP,
	ABS,
	ABSX,
	ABSX,
	IMP,
	/*E0*/ IMM,
	INDX,
	IMP,
	IMP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMP,
	IMM,
	IMP,
	IMP,
	ABS,
	ABS,
	ABS,
	IMP,
	/*F0*/ BRA,
	INDY,
	IND,
	IMP,
	ZP,
	ZPX,
	ZPX,
	IMP,
	IMP,
	ABSY,
	IMP,
	IMP,
	ABS,
	ABSX,
	ABSX,
	IMP,
};

char dopnamenmos[256][6] =
{
	/*00*/ "BRK",
	"ORA",
	"HLT",
	"SLO",
	"NOP",
	"ORA",
	"ASL",
	"SLO",
	"PHP",
	"ORA",
	"ASL",
	"ANC",
	"NOP",
	"ORA",
	"ASL",
	"SLO",
	/*10*/ "BPL",
	"ORA",
	"HLT",
	"SLO",
	"NOP",
	"ORA",
	"ASL",
	"SLO",
	"CLC",
	"ORA",
	"NOP",
	"SLO",
	"NOP",
	"ORA",
	"ASL",
	"SLO",
	/*20*/ "JSR",
	"AND",
	"HLT",
	"RLA",
	"NOP",
	"AND",
	"ROL",
	"RLA",
	"PLP",
	"AND",
	"ROL",
	"ANC",
	"BIT",
	"AND",
	"ROL",
	"RLA",
	/*30*/ "BMI",
	"AND",
	"HLT",
	"RLA",
	"NOP",
	"AND",
	"ROL",
	"RLA",
	"SEC",
	"AND",
	"NOP",
	"RLA",
	"NOP",
	"AND",
	"ROL",
	"RLA",
	/*40*/ "RTI",
	"EOR",
	"HLT",
	"SRE",
	"NOP",
	"EOR",
	"LSR",
	"SRE",
	"PHA",
	"EOR",
	"LSR",
	"ASR",
	"JMP",
	"EOR",
	"LSR",
	"SRE",
	/*50*/ "BVC",
	"EOR",
	"HLT",
	"SRE",
	"NOP",
	"EOR",
	"LSR",
	"SRE",
	"CLI",
	"EOR",
	"NOP",
	"SRE",
	"NOP",
	"EOR",
	"LSR",
	"SRE",
	/*60*/ "RTS",
	"ADC",
	"HLT",
	"RRA",
	"NOP",
	"ADC",
	"ROR",
	"RRA",
	"PLA",
	"ADC",
	"ROR",
	"ARR",
	"JMP",
	"ADC",
	"ROR",
	"RRA",
	/*70*/ "BVS",
	"ADC",
	"HLT",
	"RRA",
	"NOP",
	"ADC",
	"ROR",
	"RRA",
	"SEI",
	"ADC",
	"NOP",
	"RRA",
	"NOP",
	"ADC",
	"ROR",
	"RRA",
	/*80*/ "BRA",
	"STA",
	"NOP",
	"SAX",
	"STY",
	"STA",
	"STX",
	"SAX",
	"DEY",
	"NOP",
	"TXA",
	"ANE",
	"STY",
	"STA",
	"STX",
	"SAX",
	/*90*/ "BCC",
	"STA",
	"HLT",
	"SHA",
	"STY",
	"STA",
	"STX",
	"SAX",
	"TYA",
	"STA",
	"TXS",
	"SHS",
	"SHY",
	"STA",
	"SHX",
	"SHA",
	/*A0*/ "LDY",
	"LDA",
	"LDX",
	"LAX",
	"LDY",
	"LDA",
	"LDX",
	"LAX",
	"TAY",
	"LDA",
	"TAX",
	"LXA",
	"LDY",
	"LDA",
	"LDX",
	"LAX",
	/*B0*/ "BCS",
	"LDA",
	"HLT",
	"LAX",
	"LDY",
	"LDA",
	"LDX",
	"LAX",
	"CLV",
	"LDA",
	"TSX",
	"LAS",
	"LDY",
	"LDA",
	"LDX",
	"LAX",
	/*C0*/ "CPY",
	"CMP",
	"NOP",
	"DCP",
	"CPY",
	"CMP",
	"DEC",
	"DCP",
	"INY",
	"CMP",
	"DEX",
	"SBX",
	"CPY",
	"CMP",
	"DEC",
	"DCP",
	/*D0*/ "BNE",
	"CMP",
	"HLT",
	"DCP",
	"NOP",
	"CMP",
	"DEC",
	"DCP",
	"CLD",
	"CMP",
	"NOP",
	"DCP",
	"NOP",
	"CMP",
	"DEC",
	"DCP",
	/*E0*/ "CPX",
	"SBC",
	"NOP",
	"ISB",
	"CPX",
	"SBC",
	"INC",
	"ISB",
	"INX",
	"SBC",
	"NOP",
	"SBC",
	"CPX",
	"SBC",
	"INC",
	"ISB",
	/*F0*/ "BEQ",
	"SBC",
	"HLT",
	"ISB",
	"NOP",
	"SBC",
	"INC",
	"ISB",
	"SED",
	"SBC",
	"NOP",
	"ISB",
	"NOP",
	"SBC",
	"INC",
	"ISB",
};

int dopaddrnmos[256] =
{
	/*00*/ IMP,
	INDX,
	IMP,
	INDX,
	ZP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMM,
	IMPA,
	IMM,
	ABS,
	ABS,
	ABS,
	ABS,
	/*10*/ BRA,
	INDY,
	IMP,
	INDY,
	ZPX,
	ZPX,
	ZPX,
	ZPX,
	IMP,
	ABSY,
	IMP,
	ABSY,
	ABSX,
	ABSX,
	ABSX,
	ABSX,
	/*20*/ ABS,
	INDX,
	IMP,
	INDX,
	ZP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMM,
	IMPA,
	IMM,
	ABS,
	ABS,
	ABS,
	ABS,
	/*30*/ BRA,
	INDY,
	IMP,
	INDY,
	ZPX,
	ZPX,
	ZPX,
	ZPX,
	IMP,
	ABSY,
	IMP,
	ABSY,
	ABSX,
	ABSX,
	ABSX,
	ABSX,
	/*40*/ IMP,
	INDX,
	IMP,
	INDX,
	ZP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMM,
	IMPA,
	IMM,
	ABS,
	ABS,
	ABS,
	ABS,
	/*50*/ BRA,
	INDY,
	IMP,
	INDY,
	ZPX,
	ZPX,
	ZPX,
	ZPX,
	IMP,
	ABSY,
	IMP,
	ABSY,
	ABSX,
	ABSX,
	ABSX,
	ABSX,
	/*60*/ IMP,
	INDX,
	IMP,
	INDX,
	ZP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMM,
	IMPA,
	IMM,
	IND16,
	ABS,
	ABS,
	ABS,
	/*70*/ BRA,
	INDY,
	IMP,
	INDY,
	ZPX,
	ZPX,
	ZPX,
	ZPX,
	IMP,
	ABSY,
	IMP,
	ABSY,
	ABSX,
	ABSX,
	ABSX,
	ABSX,
	/*80*/ BRA,
	INDX,
	IMM,
	INDX,
	ZP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMM,
	IMP,
	IMM,
	ABS,
	ABS,
	ABS,
	ABS,
	/*90*/ BRA,
	INDY,
	IMP,
	INDY,
	ZPX,
	ZPX,
	ZPY,
	ZPY,
	IMP,
	ABSY,
	IMP,
	ABSY,
	ABSX,
	ABSX,
	ABSX,
	ABSX,
	/*A0*/ IMM,
	INDX,
	IMM,
	INDX,
	ZP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMM,
	IMP,
	IMM,
	ABS,
	ABS,
	ABS,
	ABS,
	/*B0*/ BRA,
	INDY,
	IMP,
	INDY,
	ZPX,
	ZPX,
	ZPY,
	ZPY,
	IMP,
	ABSY,
	IMP,
	ABSY,
	ABSX,
	ABSX,
	ABSY,
	ABSX,
	/*C0*/ IMM,
	INDX,
	IMM,
	INDX,
	ZP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMM,
	IMP,
	IMM,
	ABS,
	ABS,
	ABS,
	ABS,
	/*D0*/ BRA,
	INDY,
	IMP,
	INDY,
	ZPX,
	ZPX,
	ZPX,
	ZPX,
	IMP,
	ABSY,
	IMP,
	ABSY,
	ABSX,
	ABSX,
	ABSX,
	ABSX,
	/*E0*/ IMM,
	INDX,
	IMM,
	INDX,
	ZP,
	ZP,
	ZP,
	ZP,
	IMP,
	IMM,
	IMP,
	IMM,
	ABS,
	ABS,
	ABS,
	ABS,
	/*F0*/ BRA,
	INDY,
	IMP,
	INDY,
	ZPX,
	ZPX,
	ZPX,
	ZPX,
	IMP,
	ABSY,
	IMP,
	ABSY,
	ABSX,
	ABSX,
	ABSX,
	ABSX,
};



// 6522 via
#define TIMER1INT 0x40
#define TIMER2INT 0x20
#define PORTBINT 0x18
#define PORTAINT 0x03

#define ORB 0x00
#define ORA 0x01
#define DDRB 0x02
#define DDRA 0x03
#define T1CL 0x04
#define T1CH 0x05
#define T1LL 0x06
#define T1LH 0x07
#define T2CL 0x08
#define T2CH 0x09
#define SR 0x0a
#define ACR 0x0b
#define PCR 0x0c
#define IFR 0x0d
#define IER 0x0e
#define ORAnh 0x0f

// uint16_t pc;
//uint8_t fetcheddat[32];
int vid_top = 0x9c00;
int main_ramflag = 3; // 25K by default (when RAMROM *DISABLED!*).
void debugdisassemble();

int fullscreen = 0;
int winsizex = 512, winsizey = 384;

//uint8_t* ram;
int cy = 0, sy = 0;
int textcol[4] = { 0, 1, 0, 8 };
int semigrcol[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };
int grcol[4] = { 0, 1, 0, 5 };
//int tapeon;
int frmcount;
int fskipcount = 0;

char exedir[MAXPATH + 1];

char scrshotname[260];
int savescrshot = 0;

uint8_t fetcheddat[32];
/*
const uint8_t fontdata[] =
{
	0x00, 0x00, 0x00, 0x1c, 0x22, 0x02, 0x1a, 0x2a, 0x2a, 0x1c, 0x00, 0x00, // @
	0x00, 0x00, 0x00, 0x08, 0x14, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3c, 0x12, 0x12, 0x1c, 0x12, 0x12, 0x3c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1c, 0x22, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3c, 0x12, 0x12, 0x12, 0x12, 0x12, 0x3c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x3e, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1e, 0x20, 0x20, 0x26, 0x22, 0x22, 0x1e, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x22, 0x22, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x22, 0x24, 0x28, 0x30, 0x28, 0x24, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x22, 0x36, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x22, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3e, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x2a, 0x24, 0x1a, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3c, 0x22, 0x22, 0x3c, 0x28, 0x24, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1c, 0x22, 0x10, 0x08, 0x04, 0x22, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3e, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x20, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x1c, 0x2a, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x3e, 0x10, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x14, 0x14, 0x36, 0x00, 0x36, 0x14, 0x14, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x1e, 0x20, 0x1c, 0x02, 0x3c, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x32, 0x32, 0x04, 0x08, 0x10, 0x26, 0x26, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x10, 0x28, 0x28, 0x10, 0x2a, 0x24, 0x1a, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x1c, 0x3e, 0x1c, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x10, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x18, 0x24, 0x24, 0x24, 0x24, 0x24, 0x18, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x18, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1c, 0x22, 0x02, 0x1c, 0x20, 0x20, 0x3e, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1c, 0x22, 0x02, 0x0c, 0x02, 0x22, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x04, 0x0c, 0x14, 0x3e, 0x04, 0x04, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x20, 0x3c, 0x02, 0x02, 0x22, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1c, 0x20, 0x20, 0x3c, 0x22, 0x22, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3e, 0x02, 0x04, 0x08, 0x10, 0x20, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1c, 0x22, 0x22, 0x1e, 0x02, 0x02, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x18, 0x24, 0x04, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00,
}; */

/* C:\Users\LEENDERTBIJNAGTE\source\repos\Atombasic\Atombasic\roms\abasic.rom (3/28/2018 1:06:42 PM)
   StartOffset(h): 00000000, EndOffset(h): 00000FFF, Length(h): 00001000 */

unsigned char CrawData[4096] = {
   0x3C, 0x3D, 0x3E, 0xFE, 0x2D, 0x2B, 0xC8, 0x23, 0x28, 0x21, 0x3F, 0x52,
   0x54, 0x4C, 0x43, 0x41, 0x50, 0x45, 0x47, 0x42, 0x46, 0xF0, 0x54, 0xFF,
   0x4F, 0xCB, 0x53, 0xCB, 0x54, 0x45, 0x50, 0xCB, 0x54, 0xC3, 0x48, 0x45,
   0x4E, 0xC3, 0x22, 0x24, 0xCE, 0xCE, 0xCC, 0x24, 0x2C, 0xC5, 0x24, 0x26,
   0x3B, 0x0D, 0x2C, 0xC3, 0xC5, 0xC2, 0x3E, 0xC7, 0x3D, 0xC7, 0xC7, 0xC7,
   0x3D, 0xC7, 0xC7, 0xC8, 0x52, 0xC7, 0xC7, 0x4F, 0x41, 0xFE, 0x24, 0xC7,
   0x48, 0xC9, 0x45, 0x4E, 0xC9, 0x4E, 0x44, 0xC7, 0xC9, 0xC9, 0xC9, 0xC9,
   0x4E, 0x44, 0xC9, 0x4F, 0x50, 0xC9, 0x4F, 0x55, 0x4E, 0x54, 0xC9, 0x42,
   0x53, 0xC9, 0x54, 0x52, 0xCF, 0x58, 0x54, 0xCF, 0x45, 0x54, 0xCF, 0x47,
   0x45, 0x54, 0xCF, 0x49, 0x4E, 0xCF, 0x4F, 0x55, 0x54, 0xCF, 0xC3, 0xC3,
   0x52, 0x49, 0x4E, 0x54, 0xC3, 0x4E, 0x4C, 0x55, 0x4E, 0x49, 0x47, 0x52,
   0x46, 0x21, 0x3F, 0x24, 0x50, 0x44, 0x4C, 0x53, 0x42, 0x2A, 0x45, 0xF0,
   0x41, 0x56, 0x45, 0xCF, 0x45, 0x57, 0xC2, 0x4F, 0xCC, 0x45, 0x54, 0xC3,
   0x49, 0x4E, 0x4B, 0xC3, 0x49, 0x53, 0x54, 0xCA, 0x4F, 0x41, 0x44, 0xCE,
   0x4E, 0x54, 0x49, 0x4C, 0xCC, 0x45, 0x58, 0x54, 0xCA, 0x46, 0xC5, 0x4E,
   0x50, 0x55, 0x54, 0xCC, 0x4F, 0x53, 0x55, 0x42, 0xCB, 0x4F, 0x54, 0x4F,
   0xCC, 0x45, 0x54, 0x55, 0x52, 0x4E, 0xCB, 0x45, 0x4D, 0xC5, 0x55, 0x4E,
   0xF1, 0x4F, 0x52, 0xCB, 0x4E, 0x44, 0xCD, 0x47, 0x45, 0x54, 0xCF, 0x50,
   0x55, 0x54, 0xCF, 0x48, 0x55, 0x54, 0xCF, 0x50, 0x55, 0x54, 0xCF, 0x54,
   0x52, 0xCF, 0x55, 0x54, 0xCF, 0xC3, 0xC4, 0xCD, 0xC4, 0x2C, 0xFE, 0x36,
   0x3B, 0x3C, 0xC0, 0x3F, 0x06, 0xDC, 0x50, 0x51, 0x52, 0x53, 0x54, 0x57,
   0x4A, 0x5A, 0x5F, 0x62, 0x65, 0x68, 0x6B, 0x6F, 0x2E, 0x18, 0xAC, 0x17,
   0x81, 0x1C, 0xBE, 0x17, 0x17, 0x17, 0xA2, 0x22, 0x1B, 0x17, 0x17, 0x17,
   0x1B, 0x29, 0x28, 0xB6, 0xBF, 0xB6, 0x2A, 0xB7, 0x58, 0x76, 0x77, 0x34,
   0x34, 0x7C, 0x3F, 0x4A, 0x78, 0x38, 0x6D, 0x3A, 0x64, 0x74, 0x5B, 0x3E,
   0x7B, 0x82, 0xC1, 0x45, 0x22, 0x31, 0x40, 0x4D, 0x4D, 0x42, 0x53, 0x15,
   0xD2, 0x15, 0x15, 0xBD, 0x45, 0x45, 0x14, 0x0A, 0x44, 0x5F, 0x4C, 0x15,
   0x15, 0x86, 0x15, 0x15, 0x73, 0x48, 0x15, 0x15, 0x15, 0x7A, 0x15, 0x15,
   0x02, 0x15, 0x15, 0x29, 0x15, 0x15, 0x28, 0x15, 0x15, 0x66, 0x15, 0x15,
   0x15, 0x5B, 0x72, 0x15, 0xA6, 0x15, 0x15, 0x15, 0xA7, 0x90, 0x35, 0xE3,
   0x8F, 0x8F, 0x8F, 0x34, 0x94, 0xA0, 0xA8, 0xAD, 0xB1, 0xBD, 0xC1, 0xCD,
   0xE9, 0xEA, 0xEB, 0x78, 0x97, 0x99, 0xD3, 0xDF, 0xEC, 0xD0, 0x4B, 0x8F,
   0x8F, 0x8F, 0x0A, 0x8F, 0xAD, 0xAD, 0x8F, 0xF0, 0x9C, 0x8F, 0x25, 0x8F,
   0x8F, 0x8F, 0xB2, 0xA4, 0x9C, 0x8F, 0x51, 0x99, 0x8F, 0x8F, 0xED, 0x8F,
   0x8F, 0x8F, 0x8F, 0xD2, 0x8F, 0x8F, 0x8F, 0xCD, 0xB3, 0x66, 0x8F, 0x8F,
   0x8F, 0x8F, 0x81, 0x8F, 0x8F, 0x8F, 0x8F, 0xD2, 0x8F, 0xB8, 0x8F, 0x05,
   0xCA, 0xC7, 0x8F, 0x8F, 0x8F, 0xEC, 0x8F, 0x8F, 0x75, 0x8F, 0x8F, 0x41,
   0x8F, 0x8F, 0x57, 0x8F, 0x8F, 0x98, 0xD7, 0x8F, 0x8F, 0xE3, 0xDB, 0x8F,
   0x8F, 0xC5, 0x90, 0x8F, 0x8F, 0xB6, 0x8F, 0x8F, 0x8F, 0x8F, 0xE6, 0x8F,
   0x47, 0x8F, 0x8F, 0x95, 0xEE, 0x06, 0x5C, 0x0F, 0x35, 0x2D, 0x2B, 0x7C,
   0x3A, 0xFE, 0x2A, 0x2F, 0x25, 0x21, 0x3F, 0x26, 0xFE, 0x29, 0xFF, 0x3D,
   0xFF, 0x21, 0x3F, 0x24, 0xFF, 0x3D, 0x21, 0x3F, 0xFF, 0x27, 0x22, 0xFE,
   0xB7, 0x9A, 0xD3, 0xEF, 0xEF, 0x13, 0x5E, 0x70, 0xB3, 0x9C, 0x7B, 0x7B,
   0x78, 0x78, 0x78, 0x78, 0xEE, 0x06, 0x5C, 0x5C, 0xE5, 0x75, 0x7B, 0x7B,
   0x6F, 0x7A, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
   0xC8, 0xC8, 0xC2, 0xC2, 0xC2, 0xC2, 0xC3, 0xC4, 0xCD, 0xCD, 0xC3, 0xCD,
   0xCD, 0xCD, 0xC3, 0xC3, 0x20, 0x3E, 0xCF, 0x84, 0x0F, 0xA2, 0xED, 0xA4,
   0x03, 0x88, 0xC8, 0xB1, 0x05, 0xC9, 0x20, 0xF0, 0xF9, 0x84, 0x5E, 0x85,
   0x52, 0xE8, 0xBD, 0xFF, 0xBF, 0x30, 0x24, 0xC5, 0x52, 0xD0, 0xF6, 0xBD,
   0xEE, 0xC0, 0xAA, 0xE8, 0xC8, 0xBD, 0xFF, 0xBF, 0x30, 0x15, 0xD1, 0x05,
   0xF0, 0xF5, 0xB1, 0x05, 0xC9, 0x2E, 0xF0, 0x04, 0xA4, 0x5E, 0x10, 0xE7,
   0xE8, 0xBD, 0xFF, 0xBF, 0x10, 0xFA, 0xC8, 0xC9, 0xFE, 0xB0, 0x3B, 0x85,
   0x53, 0xBD, 0xEE, 0xC0, 0x90, 0x29, 0xA6, 0x04, 0x60, 0xA2, 0x0E, 0xA4,
   0x03, 0x88, 0xC8, 0xB1, 0x05, 0xC9, 0x20, 0xF0, 0xF9, 0xDD, 0xDD, 0xC1,
   0xF0, 0x0C, 0x85, 0x52, 0xE8, 0xBD, 0xDD, 0xC1, 0x30, 0x16, 0xC5, 0x52,
   0xD0, 0xF6, 0xBD, 0x12, 0xC2, 0x85, 0x53, 0xBD, 0xF8, 0xC1, 0xC8, 0x85,
   0x52, 0x84, 0x03, 0xA6, 0x04, 0x6C, 0x52, 0x00, 0xC9, 0xFE, 0xF0, 0xCA,
   0x00, 0x20, 0xE4, 0xC4, 0xD0, 0x04, 0xA9, 0x29, 0x85, 0x12, 0xA9, 0x0D,
   0xA4, 0x12, 0x84, 0x0E, 0xA0, 0x00, 0x84, 0x0D, 0x91, 0x0D, 0xA9, 0xFF,
   0xC8, 0x91, 0x0D, 0xC8, 0x84, 0x0D, 0xA9, 0x08, 0x8D, 0x21, 0x03, 0xA9,
   0x3E, 0xD8, 0x20, 0x0F, 0xCD, 0xA2, 0x01, 0x86, 0x06, 0xCA, 0x86, 0x05,
   0x86, 0x01, 0x86, 0x02, 0xA9, 0xD8, 0x8D, 0x02, 0x02, 0xA9, 0xC9, 0x8D,
   0x03, 0x02, 0xA9, 0xE7, 0x85, 0x10, 0xA9, 0xC9, 0x85, 0x11, 0xA2, 0xFF,
   0x9A, 0xA9, 0x00, 0x85, 0x04, 0x85, 0x03, 0x85, 0x15, 0x85, 0x13, 0x85,
   0x14, 0xA2, 0x34, 0x9D, 0x8C, 0x03, 0xCA, 0xD0, 0xFA, 0x20, 0x34, 0xC4,
   0xB0, 0x21, 0x20, 0x6A, 0xC4, 0x90, 0x03, 0x4C, 0xC9, 0xCD, 0xA2, 0x7D,
   0x4C, 0x33, 0xC2, 0x20, 0x34, 0xC4, 0xB0, 0x0F, 0xA2, 0x7F, 0x4C, 0x33,
   0xC2, 0x20, 0x34, 0xC4, 0xB0, 0x05, 0xA2, 0x10, 0x4C, 0x7B, 0xC2, 0xA2,
   0x14, 0x4C, 0x7B, 0xC2, 0x38, 0x66, 0x0F, 0x20, 0x72, 0xC3, 0xA2, 0x2E,
   0x4C, 0x33, 0xC2, 0x20, 0x8B, 0xC7, 0x20, 0xCB, 0xC3, 0xA5, 0x0F, 0x30,
   0x21, 0xA2, 0x00, 0x86, 0x27, 0xA0, 0x00, 0xB9, 0x52, 0x00, 0x48, 0x29,
   0x0F, 0x95, 0x45, 0x68, 0x4A, 0x4A, 0x4A, 0x4A, 0xE8, 0x95, 0x45, 0xE8,
   0xC8, 0xC0, 0x04, 0x90, 0xEA, 0x20, 0xC8, 0xC5, 0x30, 0xCD, 0x20, 0x89,
   0xC5, 0x30, 0xC8, 0x20, 0x54, 0xCD, 0xA2, 0x18, 0x4C, 0x7B, 0xC2, 0x20,
   0x4C, 0xCA, 0xB1, 0x05, 0xC8, 0xC9, 0x0D, 0xF0, 0x1C, 0x84, 0x03, 0xC9,
   0x22, 0xD0, 0xF0, 0xB1, 0x05, 0xC9, 0x22, 0xD0, 0xE5, 0xC8, 0xB0, 0xE7,
   0x20, 0x8B, 0xC7, 0x20, 0xCB, 0xC3, 0x05, 0x54, 0x05, 0x53, 0xF0, 0x0E,
   0xA0, 0x00, 0xB1, 0x52, 0xC9, 0x0D, 0xF0, 0x93, 0x20, 0x4C, 0xCA, 0xC8,
   0xD0, 0xF4, 0xA5, 0x52, 0x20, 0x4C, 0xCA, 0x4C, 0x37, 0xC3, 0x20, 0xC8,
   0xC3, 0x20, 0xE4, 0xC4, 0xAD, 0x22, 0x03, 0xAE, 0x39, 0x03, 0xAC, 0x3A,
   0x03, 0x20, 0xA5, 0xC2, 0xD8, 0x4C, 0x5B, 0xC5, 0x20, 0xBC, 0xC8, 0xA0,
   0x52, 0xCA, 0x86, 0x04, 0xB5, 0x16, 0x99, 0x00, 0x00, 0xB5, 0x25, 0x99,
   0x01, 0x00, 0xB5, 0x34, 0x99, 0x02, 0x00, 0xB5, 0x43, 0x99, 0x03, 0x00,
   0x60, 0x20, 0xE1, 0xC4, 0x20, 0x2F, 0xCA, 0x4C, 0x5B, 0xC5, 0x20, 0xBC,
   0xC8, 0x20, 0x93, 0xCE, 0xB5, 0x26, 0xC8, 0x91, 0x52, 0xC8, 0xB5, 0x35,
   0x91, 0x52, 0xC8, 0xB5, 0x44, 0x91, 0x52, 0x4C, 0x5B, 0xC5, 0x20, 0xBC,
   0xC8, 0x20, 0x93, 0xCE, 0x4C, 0x5B, 0xC5, 0xA2, 0x00, 0xB1, 0x05, 0x9D,
   0x00, 0x01, 0x84, 0x03, 0xC8, 0xE8, 0xC9, 0x0D, 0xD0, 0xF3, 0x20, 0xF7,
   0xFF, 0x4C, 0x58, 0xC5, 0xAD, 0x00, 0xD0, 0xC9, 0xAA, 0xD0, 0x38, 0x4A,
   0xCD, 0x01, 0xD0, 0xD0, 0x32, 0xA4, 0x5E, 0x60, 0xA4, 0x03, 0x10, 0x03,
   0xC8, 0x84, 0x03, 0xB1, 0x05, 0xC9, 0x20, 0xF0, 0xF7, 0xC9, 0x5B, 0xB0,
   0x1E, 0xE9, 0x3F, 0x90, 0x1B, 0xA6, 0x04, 0x95, 0x16, 0xC8, 0xB1, 0x05,
   0xC9, 0x2E, 0xF0, 0x0F, 0xC9, 0x5B, 0xB0, 0x04, 0xC9, 0x40, 0xB0, 0x07,
   0xE8, 0x86, 0x04, 0x38, 0x84, 0x03, 0x60, 0x18, 0x60, 0x20, 0x34, 0xC4,
   0xB0, 0xBB, 0xA2, 0x00, 0xA4, 0x03, 0x86, 0x52, 0x86, 0x53, 0x86, 0x54,
   0x86, 0x55, 0x88, 0xC8, 0xB1, 0x05, 0x38, 0xE9, 0x30, 0x30, 0x54, 0xC9,
   0x0A, 0xB0, 0x50, 0xA6, 0x53, 0x48, 0xA5, 0x55, 0x48, 0xA5, 0x54, 0x48,
   0xA5, 0x52, 0x0A, 0x26, 0x53, 0x26, 0x54, 0x26, 0x55, 0x30, 0xD4, 0x0A,
   0x26, 0x53, 0x26, 0x54, 0x26, 0x55, 0x30, 0xCB, 0x65, 0x52, 0x85, 0x52,
   0x8A, 0x65, 0x53, 0x85, 0x53, 0x68, 0x65, 0x54, 0x85, 0x54, 0x68, 0x65,
   0x55, 0x06, 0x52, 0x26, 0x53, 0x26, 0x54, 0x2A, 0x30, 0xB1, 0x85, 0x55,
   0x68, 0x65, 0x52, 0x85, 0x52, 0x90, 0x0C, 0xE6, 0x53, 0xD0, 0x08, 0xE6,
   0x54, 0xD0, 0x04, 0xE6, 0x55, 0x30, 0x9C, 0xA2, 0xFF, 0xD0, 0xA4, 0x8A,
   0xF0, 0x8D, 0x38, 0x84, 0x03, 0xA0, 0x52, 0x4C, 0x9F, 0xC9, 0x20, 0x79,
   0xC2, 0x20, 0x8B, 0xC7, 0xA4, 0x03, 0x88, 0xC8, 0xB1, 0x05, 0xC9, 0x20,
   0xF0, 0xF9, 0xC9, 0x3B, 0xF0, 0x04, 0xC9, 0x0D, 0xD0, 0x66, 0x18, 0x98,
   0x65, 0x05, 0x85, 0x05, 0x90, 0x02, 0xE6, 0x06, 0xA0, 0x01, 0x84, 0x03,
   0xAD, 0x01, 0xB0, 0x29, 0x20, 0xF0, 0x3C, 0x60, 0x20, 0xE4, 0xC4, 0x88,
   0xB1, 0x05, 0xC9, 0x3B, 0xF0, 0xF5, 0xA5, 0x06, 0xC9, 0x01, 0xF0, 0x7A,
   0xC8, 0xB1, 0x05, 0x30, 0x3B, 0x85, 0x02, 0xC8, 0xB1, 0x05, 0x85, 0x01,
   0xC8, 0xB1, 0x05, 0x88, 0xC9, 0x61, 0x90, 0xC7, 0xE9, 0x61, 0xC9, 0x1B,
   0xB0, 0xC0, 0xC8, 0x0A, 0xAA, 0x20, 0xF6, 0xC4, 0xA5, 0x05, 0x9D, 0x8D,
   0x03, 0xA5, 0x06, 0x9D, 0x8E, 0x03, 0x60, 0x4C, 0xCF, 0xC2, 0x88, 0x20,
   0xF6, 0xC4, 0xD0, 0x0B, 0x20, 0x24, 0xC4, 0x90, 0x03, 0x6C, 0x02, 0xD0,
   0x20, 0xE4, 0xC4, 0xA0, 0x00, 0xB1, 0x05, 0xC9, 0x3B, 0xD0, 0x1A, 0x4C,
   0x1B, 0xC3, 0x20, 0x0C, 0xC7, 0xCA, 0x86, 0x04, 0xB5, 0x16, 0xF0, 0x05,
   0xA2, 0x20, 0x4C, 0x33, 0xC2, 0xA9, 0x0D, 0x88, 0xC8, 0xD1, 0x05, 0xD0,
   0xFB, 0xA5, 0x06, 0xC9, 0x01, 0xF0, 0xC4, 0x20, 0x1C, 0xC5, 0x4C, 0x1B,
   0xC3, 0xA5, 0x43, 0x85, 0x27, 0x10, 0x04, 0xE8, 0x20, 0xC4, 0xC8, 0xA2,
   0x09, 0xA9, 0x00, 0x95, 0x45, 0x38, 0xA5, 0x16, 0xFD, 0x08, 0xC6, 0x48,
   0xA5, 0x25, 0xFD, 0x10, 0xC6, 0x48, 0xA5, 0x34, 0xFD, 0x1A, 0xC6, 0xA8,
   0xA5, 0x43, 0xFD, 0x24, 0xC6, 0x90, 0x0E, 0x85, 0x43, 0x84, 0x34, 0x68,
   0x85, 0x25, 0x68, 0x85, 0x16, 0xF6, 0x45, 0xD0, 0xD8, 0x68, 0x68, 0xCA,
   0x10, 0xCF, 0xA2, 0x0A, 0xCA, 0xF0, 0x04, 0xB5, 0x45, 0xF0, 0xF9, 0x86,
   0x52, 0x24, 0x27, 0x10, 0x02, 0xE6, 0x52, 0x38, 0xAD, 0x21, 0x03, 0xF0,
   0x02, 0xE9, 0x01, 0xE5, 0x52, 0xF0, 0x0B, 0x90, 0x09, 0xA8, 0xA9, 0x20,
   0x20, 0x4C, 0xCA, 0x88, 0xD0, 0xF8, 0x24, 0x27, 0x10, 0x05, 0xA9, 0x2D,
   0x20, 0x4C, 0xCA, 0xB5, 0x45, 0xC9, 0x0A, 0x90, 0x02, 0x69, 0x06, 0x69,
   0x30, 0x20, 0x4C, 0xCA, 0xCA, 0x10, 0xF0, 0x60, 0x01, 0x0A, 0x64, 0xE8,
   0x10, 0xA0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x03, 0x27, 0x86, 0x42, 0x96,
   0xE1, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x98, 0xF5, 0x9A,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x3B, 0xC6, 0x04,
   0xA6, 0x04, 0xA0, 0x00, 0x84, 0x58, 0xA5, 0x12, 0x85, 0x59, 0x88, 0xA9,
   0x0D, 0xC8, 0xD1, 0x58, 0xD0, 0xFB, 0x20, 0xA1, 0xCE, 0xB1, 0x58, 0xC8,
   0xD5, 0x25, 0x90, 0xEF, 0xD0, 0x12, 0xB1, 0x58, 0xD5, 0x16, 0x90, 0xE7,
   0xD0, 0x0A, 0x85, 0x01, 0xB5, 0x25, 0x85, 0x02, 0x20, 0xA1, 0xCE, 0x18,
   0x60, 0x20, 0xBC, 0xC8, 0xB5, 0x42, 0x55, 0x41, 0x85, 0x52, 0x20, 0x05,
   0xC9, 0xA0, 0x53, 0x20, 0xCD, 0xC3, 0xB5, 0x42, 0x95, 0x43, 0x20, 0x07,
   0xC9, 0xA0, 0x57, 0x20, 0xCD, 0xC3, 0xA0, 0x00, 0x84, 0x5B, 0x84, 0x5C,
   0x84, 0x5D, 0x84, 0x5E, 0x60, 0x20, 0x61, 0xC6, 0xA5, 0x54, 0x20, 0x05,
   0xC7, 0xF0, 0xEC, 0xA0, 0x20, 0x88, 0xF0, 0x41, 0x06, 0x57, 0x26, 0x58,
   0x26, 0x59, 0x26, 0x5A, 0x10, 0xF3, 0x26, 0x57, 0x26, 0x58, 0x26, 0x59,
   0x26, 0x5A, 0x26, 0x5B, 0x26, 0x5C, 0x26, 0x5D, 0x26, 0x5E, 0x38, 0xA5,
   0x5B, 0xE5, 0x53, 0x48, 0xA5, 0x5C, 0xE5, 0x54, 0x48, 0xA5, 0x5D, 0xE5,
   0x55, 0xAA, 0xA5, 0x5E, 0xE5, 0x56, 0x90, 0x0C, 0x85, 0x5E, 0x86, 0x5D,
   0x68, 0x85, 0x5C, 0x68, 0x85, 0x5B, 0xB0, 0x02, 0x68, 0x68, 0x88, 0xD0,
   0xC9, 0x60, 0x20, 0x8B, 0xC7, 0xCA, 0x86, 0x04, 0xB5, 0x42, 0x49, 0x80,
   0x85, 0x52, 0xB5, 0x43, 0x49, 0x80, 0x85, 0x54, 0xA0, 0x00, 0x38, 0xB5,
   0x15, 0xF5, 0x16, 0x85, 0x53, 0xB5, 0x24, 0xF5, 0x25, 0x85, 0x55, 0xB5,
   0x33, 0xF5, 0x34, 0x85, 0x56, 0xA5, 0x52, 0xE5, 0x54, 0x05, 0x53, 0x05,
   0x55, 0x05, 0x56, 0x60, 0x20, 0x2C, 0xC7, 0xA2, 0x43, 0x4C, 0x33, 0xC2,
   0x20, 0x2C, 0xC7, 0xB5, 0x14, 0x35, 0x15, 0x95, 0x14, 0xC6, 0x04, 0x4C,
   0x0F, 0xC7, 0x20, 0x2C, 0xC7, 0xB5, 0x14, 0x15, 0x15, 0x4C, 0x1B, 0xC7,
   0xA2, 0x46, 0x4C, 0x33, 0xC2, 0x20, 0x8B, 0xC7, 0x20, 0xAE, 0xCE, 0xB5,
   0x15, 0x85, 0x54, 0xB5, 0x24, 0x85, 0x55, 0xA0, 0xFF, 0xC8, 0xB1, 0x54,
   0xD1, 0x52, 0xD0, 0x07, 0x49, 0x0D, 0xD0, 0xF5, 0xA8, 0xF0, 0x11, 0xA0,
   0x00, 0xF0, 0x0E, 0x20, 0x8B, 0xC7, 0xA2, 0x00, 0x4C, 0x33, 0xC2, 0x20,
   0xDA, 0xC6, 0xD0, 0x01, 0xC8, 0x94, 0x15, 0x60, 0x20, 0xDA, 0xC6, 0xF0,
   0xF7, 0x90, 0xF5, 0xB0, 0xF4, 0x20, 0xDA, 0xC6, 0xD0, 0xEE, 0xF0, 0xED,
   0x20, 0xDA, 0xC6, 0x90, 0xE7, 0xB0, 0xE6, 0x20, 0xDA, 0xC6, 0xB0, 0xE0,
   0x90, 0xDF, 0x20, 0xDA, 0xC6, 0xF0, 0xDA, 0xB0, 0xD7, 0x90, 0xD6, 0x20,
   0x0B, 0xC8, 0x4C, 0x95, 0xC7, 0x95, 0x41, 0xC6, 0x04, 0xA2, 0x00, 0x4C,
   0x7B, 0xC2, 0x20, 0x0B, 0xC8, 0x18, 0xB5, 0x14, 0x75, 0x15, 0x95, 0x14,
   0xB5, 0x23, 0x75, 0x24, 0x95, 0x23, 0xB5, 0x32, 0x75, 0x33, 0x95, 0x32,
   0xB5, 0x41, 0x75, 0x42, 0x4C, 0x91, 0xC7, 0x20, 0x0B, 0xC8, 0xB5, 0x14,
   0xF5, 0x15, 0x95, 0x14, 0xB5, 0x23, 0xF5, 0x24, 0x95, 0x23, 0xB5, 0x32,
   0xF5, 0x33, 0x95, 0x32, 0xB5, 0x41, 0xF5, 0x42, 0x4C, 0x91, 0xC7, 0x20,
   0x0B, 0xC8, 0xB5, 0x14, 0x15, 0x15, 0x95, 0x14, 0xB5, 0x23, 0x15, 0x24,
   0x95, 0x23, 0xB5, 0x32, 0x15, 0x33, 0x95, 0x32, 0xB5, 0x41, 0x15, 0x42,
   0x4C, 0x91, 0xC7, 0x20, 0x0B, 0xC8, 0xB5, 0x14, 0x55, 0x15, 0x95, 0x14,
   0xB5, 0x23, 0x55, 0x24, 0x95, 0x23, 0xB5, 0x32, 0x55, 0x33, 0x95, 0x32,
   0xB5, 0x41, 0x55, 0x42, 0x4C, 0x91, 0xC7, 0x20, 0xBC, 0xC8, 0xA2, 0x05,
   0x4C, 0x7B, 0xC2, 0x20, 0x61, 0xC6, 0x46, 0x5A, 0x66, 0x59, 0x66, 0x58,
   0x66, 0x57, 0x90, 0x19, 0x18, 0x98, 0x65, 0x53, 0xA8, 0xA5, 0x5C, 0x65,
   0x54, 0x85, 0x5C, 0xA5, 0x5D, 0x65, 0x55, 0x85, 0x5D, 0xA5, 0x5E, 0x65,
   0x56, 0x29, 0x7F, 0x85, 0x5E, 0x06, 0x53, 0x26, 0x54, 0x26, 0x55, 0x26,
   0x56, 0xA5, 0x57, 0x05, 0x58, 0x05, 0x59, 0x05, 0x5A, 0xD0, 0xCB, 0x84,
   0x5B, 0xA5, 0x52, 0x08, 0xA0, 0x5B, 0x20, 0x9F, 0xC9, 0x28, 0x10, 0x03,
   0x20, 0xC4, 0xC8, 0x4C, 0x0E, 0xC8, 0x20, 0x89, 0xC6, 0x26, 0x57, 0x26,
   0x58, 0x26, 0x59, 0x26, 0x5A, 0x24, 0x52, 0x08, 0xA0, 0x57, 0xD0, 0xE2,
   0x20, 0x89, 0xC6, 0xA6, 0x04, 0xB5, 0x44, 0x08, 0x4C, 0x50, 0xC8, 0x20,
   0xBC, 0xC8, 0xCA, 0x86, 0x04, 0xB5, 0x15, 0x35, 0x16, 0x95, 0x15, 0xB5,
   0x24, 0x35, 0x25, 0x95, 0x24, 0xB5, 0x33, 0x35, 0x34, 0x95, 0x33, 0xB5,
   0x42, 0x35, 0x43, 0x95, 0x42, 0x4C, 0x0E, 0xC8, 0x20, 0xA2, 0xC8, 0x4C,
   0x0E, 0xC8, 0x20, 0xBC, 0xC8, 0x18, 0xB5, 0x15, 0x75, 0x14, 0xA8, 0xB5,
   0x24, 0x75, 0x23, 0xCA, 0x4C, 0x53, 0xC9, 0x20, 0xA2, 0xC8, 0x20, 0x62,
   0xC9, 0x4C, 0x0E, 0xC8, 0xA2, 0x04, 0x4C, 0x33, 0xC2, 0x20, 0xDC, 0xC8,
   0x38, 0xA9, 0x00, 0xA8, 0xF5, 0x15, 0x95, 0x15, 0x98, 0xF5, 0x24, 0x95,
   0x24, 0x98, 0xF5, 0x33, 0x95, 0x33, 0x98, 0xF5, 0x42, 0x95, 0x42, 0x60,
   0x20, 0x34, 0xC4, 0x90, 0x17, 0xB4, 0x15, 0xB9, 0x21, 0x03, 0x95, 0x15,
   0xB9, 0x57, 0x03, 0x95, 0x33, 0xB9, 0x3C, 0x03, 0x95, 0x24, 0xB9, 0x72,
   0x03, 0x95, 0x42, 0x60, 0x20, 0x6A, 0xC4, 0xB0, 0xFA, 0xA2, 0x07, 0x4C,
   0x33, 0xC2, 0x20, 0xBC, 0xC8, 0xB5, 0x42, 0x30, 0xBB, 0x60, 0xA2, 0x00,
   0x86, 0x52, 0x86, 0x53, 0x86, 0x54, 0x86, 0x55, 0x88, 0xC8, 0xB1, 0x05,
   0xC9, 0x30, 0x90, 0x22, 0xC9, 0x3A, 0x90, 0x0A, 0xE9, 0x37, 0xC9, 0x0A,
   0x90, 0x18, 0xC9, 0x10, 0xB0, 0x14, 0x0A, 0x0A, 0x0A, 0x0A, 0xA2, 0x03,
   0x0A, 0x26, 0x52, 0x26, 0x53, 0x26, 0x54, 0x26, 0x55, 0xCA, 0x10, 0xF4,
   0x30, 0xD7, 0x8A, 0x10, 0x18, 0x4C, 0xD6, 0xC4, 0x20, 0x0C, 0xC7, 0xA2,
   0x0C, 0x4C, 0x7B, 0xC2, 0x20, 0xBC, 0xC8, 0xB4, 0x15, 0xB5, 0x24, 0x85,
   0x53, 0x84, 0x52, 0xCA, 0xA0, 0x00, 0xB1, 0x52, 0x4C, 0x7C, 0xC9, 0x20,
   0x4C, 0xC9, 0xA0, 0x01, 0xB1, 0x52, 0x95, 0x24, 0xC8, 0xB1, 0x52, 0x95,
   0x33, 0xC8, 0xB1, 0x52, 0x95, 0x42, 0x60, 0xA0, 0x0D, 0x20, 0xA1, 0xC9,
   0xF0, 0x07, 0xA5, 0x07, 0x20, 0xB3, 0xC9, 0x95, 0x24, 0x95, 0x33, 0x95,
   0x42, 0x60, 0xA0, 0x20, 0xA5, 0x0A, 0x4A, 0x4A, 0x4A, 0x45, 0x0C, 0x6A,
   0x26, 0x08, 0x26, 0x09, 0x26, 0x0A, 0x26, 0x0B, 0x26, 0x0C, 0x88, 0xD0,
   0xEB, 0xA0, 0x08, 0xA6, 0x04, 0xB9, 0x01, 0x00, 0x95, 0x25, 0xB9, 0x02,
   0x00, 0x95, 0x34, 0xB9, 0x03, 0x00, 0x95, 0x43, 0xB9, 0x00, 0x00, 0x95,
   0x16, 0xE8, 0x86, 0x04, 0xA4, 0x03, 0xA9, 0x00, 0x60, 0x20, 0xBC, 0xC8,
   0x20, 0xCB, 0xC3, 0xA0, 0x00, 0xA9, 0x0D, 0xD1, 0x52, 0xF0, 0x03, 0xC8,
   0xD0, 0xF9, 0x98, 0x4C, 0x7C, 0xC9, 0x20, 0xB1, 0xCE, 0x4C, 0x58, 0xC9,
   0x68, 0x68, 0x85, 0x00, 0xA5, 0x10, 0x85, 0x05, 0xA5, 0x11, 0x85, 0x06,
   0x4C, 0xF2, 0xC2, 0x40, 0x3D, 0x31, 0x3B, 0x50, 0x2E, 0x24, 0x36, 0x24,
   0x37, 0x27, 0x22, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x20, 0x22, 0x3F, 0x30,
   0x3B, 0x40, 0x3D, 0x38, 0x3B, 0x49, 0x46, 0x3F, 0x31, 0x7C, 0x3F, 0x32,
   0x50, 0x2E, 0x22, 0x20, 0x4C, 0x49, 0x4E, 0x45, 0x22, 0x21, 0x31, 0x26,
   0x20, 0x23, 0x46, 0x46, 0x46, 0x46, 0x0D, 0x00, 0x00, 0x50, 0x2E, 0x27,
   0x3B, 0x45, 0x2E, 0x0D, 0x20, 0x24, 0xC4, 0x90, 0xF2, 0x6C, 0x04, 0xD0,
   0x20, 0x8B, 0xC7, 0xA6, 0x04, 0xCA, 0xCA, 0x86, 0x04, 0xB4, 0x16, 0xB5,
   0x17, 0x99, 0x21, 0x03, 0xB5, 0x26, 0x99, 0x3C, 0x03, 0xB5, 0x35, 0x99,
   0x57, 0x03, 0xB5, 0x44, 0x99, 0x72, 0x03, 0x60, 0xE6, 0x07, 0x6C, 0x08,
   0x02, 0xA9, 0x00, 0x20, 0x7C, 0xC9, 0xA9, 0xFF, 0x20, 0x7C, 0xC9, 0x85,
   0x04, 0xA0, 0x7F, 0x84, 0x26, 0x20, 0x65, 0xC4, 0x90, 0x52, 0x20, 0x31,
   0xC2, 0xB0, 0x58, 0x20, 0x65, 0xC4, 0xA2, 0x01, 0x86, 0x04, 0x20, 0xE4,
   0xC4, 0x20, 0x2E, 0xC6, 0x90, 0x30, 0x88, 0xB0, 0x21, 0xA9, 0x05, 0x8D,
   0x21, 0x03, 0x20, 0x89, 0xC5, 0xA9, 0x08, 0x8D, 0x21, 0x03, 0xA4, 0x03,
   0xB1, 0x58, 0xC9, 0x0D, 0xF0, 0x06, 0x20, 0x4C, 0xCA, 0xC8, 0xD0, 0xF4,
   0x20, 0x54, 0xCD, 0x20, 0xA1, 0xCE, 0xB1, 0x58, 0x85, 0x25, 0xC8, 0xB1,
   0x58, 0x85, 0x16, 0xC8, 0x84, 0x03, 0xA5, 0x16, 0x18, 0xE5, 0x17, 0xA5,
   0x25, 0xE5, 0x26, 0x90, 0xC8, 0x4C, 0xCF, 0xC2, 0x20, 0x31, 0xC2, 0xE6,
   0x04, 0x20, 0x65, 0xC4, 0x4C, 0x6E, 0xCA, 0xA5, 0x16, 0xA4, 0x25, 0x85,
   0x17, 0x84, 0x26, 0xB0, 0xA1, 0x20, 0x34, 0xC4, 0xA4, 0x15, 0xF0, 0x10,
   0x90, 0x0F, 0xC6, 0x04, 0xB5, 0x15, 0xD9, 0x3F, 0x02, 0xF0, 0x06, 0x88,
   0x84, 0x15, 0xD0, 0xF6, 0x00, 0xBE, 0x3F, 0x02, 0x18, 0xBD, 0x21, 0x03,
   0x79, 0x4A, 0x02, 0x9D, 0x21, 0x03, 0x85, 0x52, 0xBD, 0x3C, 0x03, 0x79,
   0x55, 0x02, 0x9D, 0x3C, 0x03, 0x85, 0x53, 0xBD, 0x57, 0x03, 0x79, 0x60,
   0x02, 0x9D, 0x57, 0x03, 0x85, 0x54, 0xBD, 0x72, 0x03, 0x79, 0x6B, 0x02,
   0x9D, 0x72, 0x03, 0xAA, 0xA5, 0x52, 0x38, 0xF9, 0x76, 0x02, 0x85, 0x52,
   0xA5, 0x53, 0xF9, 0x81, 0x02, 0x85, 0x53, 0xA5, 0x54, 0xF9, 0x8C, 0x02,
   0x85, 0x54, 0x8A, 0xF9, 0x97, 0x02, 0x05, 0x52, 0x05, 0x53, 0x05, 0x54,
   0xF0, 0x0F, 0x8A, 0x59, 0x6B, 0x02, 0x59, 0x97, 0x02, 0x10, 0x04, 0xB0,
   0x04, 0x90, 0x0F, 0xB0, 0x0D, 0xB9, 0xA2, 0x02, 0x85, 0x05, 0xB9, 0xAD,
   0x02, 0x85, 0x06, 0x4C, 0xFF, 0xCB, 0xC6, 0x15, 0x4C, 0x58, 0xC5, 0x20,
   0x34, 0xC4, 0x90, 0x11, 0x20, 0x79, 0xC2, 0x20, 0x2C, 0xCA, 0x98, 0xA4,
   0x15, 0xC0, 0x0B, 0xB0, 0x04, 0x99, 0x40, 0x02, 0xA9, 0x00, 0x99, 0x6C,
   0x02, 0x99, 0x61, 0x02, 0x99, 0x56, 0x02, 0xA9, 0x01, 0x99, 0x4B, 0x02,
   0xA2, 0x16, 0x4C, 0x33, 0xC2, 0x20, 0x8B, 0xC7, 0xA4, 0x15, 0xCA, 0x86,
   0x04, 0xB5, 0x16, 0x99, 0x77, 0x02, 0xB5, 0x25, 0x99, 0x82, 0x02, 0xB5,
   0x34, 0x99, 0x8D, 0x02, 0xB5, 0x43, 0x99, 0x98, 0x02, 0xA2, 0x1A, 0x4C,
   0x33, 0xC2, 0x20, 0x8B, 0xC7, 0xA4, 0x15, 0xCA, 0x86, 0x04, 0xB5, 0x16,
   0x99, 0x4B, 0x02, 0xB5, 0x25, 0x99, 0x56, 0x02, 0xB5, 0x34, 0x99, 0x61,
   0x02, 0xB5, 0x43, 0x99, 0x6C, 0x02, 0x20, 0x0C, 0xC5, 0xA4, 0x15, 0xA5,
   0x05, 0x99, 0xA3, 0x02, 0xA5, 0x06, 0x99, 0xAE, 0x02, 0xE6, 0x15, 0x4C,
   0x1B, 0xC3, 0x20, 0x1F, 0xCC, 0x20, 0x0C, 0xC5, 0xA4, 0x14, 0xC0, 0x0E,
   0xB0, 0x22, 0xA5, 0x05, 0x99, 0xCF, 0x02, 0xA5, 0x06, 0x99, 0xDD, 0x02,
   0xE6, 0x14, 0x90, 0x1F, 0x20, 0xE4, 0xC4, 0xA4, 0x14, 0xF0, 0x2A, 0xC6,
   0x14, 0xB9, 0xCE, 0x02, 0x85, 0x05, 0xB9, 0xDC, 0x02, 0x85, 0x06, 0x20,
   0x00, 0xC5, 0x4C, 0x1B, 0xC3, 0x20, 0x1F, 0xCC, 0x20, 0xE4, 0xC4, 0xA5,
   0x57, 0xD0, 0x05, 0x20, 0x2E, 0xC6, 0xB0, 0x69, 0xA4, 0x58, 0xA5, 0x59,
   0x84, 0x05, 0x4C, 0xFD, 0xCB, 0x00, 0xC8, 0xB1, 0x05, 0xC9, 0x20, 0xF0,
   0xF9, 0xC9, 0x61, 0x90, 0x50, 0x85, 0x57, 0xE9, 0x61, 0xC9, 0x1B, 0xB0,
   0x48, 0x0A, 0xAA, 0xBD, 0x8D, 0x03, 0x85, 0x58, 0x20, 0xF6, 0xC4, 0xBD,
   0x8E, 0x03, 0x85, 0x59, 0x05, 0x58, 0xD0, 0x34, 0xA8, 0xA5, 0x12, 0x85,
   0x59, 0x88, 0xA9, 0x0D, 0xC8, 0xD1, 0x58, 0xD0, 0xFB, 0xC8, 0xB1, 0x58,
   0x30, 0x45, 0x85, 0x02, 0xC8, 0xB1, 0x58, 0x85, 0x01, 0xC8, 0xB1, 0x58,
   0x88, 0xC5, 0x57, 0xF0, 0x06, 0x20, 0xA1, 0xCE, 0x4C, 0x4A, 0xCC, 0x20,
   0xA2, 0xCE, 0xA5, 0x58, 0x9D, 0x8D, 0x03, 0xA5, 0x59, 0x9D, 0x8E, 0x03,
   0x60, 0x20, 0xBC, 0xC8, 0xA9, 0x00, 0x85, 0x57, 0x60, 0x20, 0x72, 0xC3,
   0x20, 0x34, 0xC4, 0xB0, 0x05, 0xA2, 0x2B, 0x4C, 0x33, 0xC2, 0x20, 0x09,
   0xCD, 0xA5, 0x05, 0x48, 0xA5, 0x06, 0x48, 0xA5, 0x03, 0x48, 0xA0, 0x00,
   0x84, 0x03, 0xC8, 0x84, 0x06, 0xA0, 0x40, 0x84, 0x05, 0x20, 0x2C, 0xCA,
   0x68, 0x85, 0x03, 0x68, 0x85, 0x06, 0x68, 0x85, 0x05, 0xA2, 0x2C, 0x4C,
   0x33, 0xC2, 0x20, 0x8B, 0xC7, 0xA0, 0x54, 0x20, 0xCD, 0xC3, 0x20, 0x09,
   0xCD, 0xA2, 0x40, 0xA0, 0x00, 0xBD, 0x00, 0x01, 0x91, 0x54, 0xC9, 0x0D,
   0xF0, 0xB3, 0xE8, 0xC8, 0xD0, 0xF3, 0x20, 0x0C, 0xC7, 0xA4, 0x13, 0xF0,
   0xEB, 0xCA, 0x86, 0x04, 0xB5, 0x16, 0xF0, 0x05, 0xC6, 0x13, 0x4C, 0x58,
   0xC5, 0xB9, 0xB8, 0x02, 0x85, 0x05, 0xB9, 0xC3, 0x02, 0x4C, 0xFD, 0xCB,
   0xA6, 0x13, 0xE0, 0x0B, 0xB0, 0x1A, 0x88, 0x20, 0xF6, 0xC4, 0xA5, 0x05,
   0x9D, 0xB9, 0x02, 0xA5, 0x06, 0x9D, 0xC4, 0x02, 0xE6, 0x13, 0x4C, 0x1B,
   0xC3, 0xA9, 0x3F, 0xA0, 0x40, 0xD0, 0x02, 0xA0, 0x00, 0x20, 0x4C, 0xCA,
   0x84, 0x52, 0xA4, 0x52, 0x20, 0xE6, 0xFF, 0xC9, 0x7F, 0xD0, 0x07, 0x88,
   0xC4, 0x52, 0x10, 0xF4, 0x30, 0xF0, 0xC9, 0x18, 0xD0, 0x06, 0x20, 0x54,
   0xCD, 0x4C, 0x16, 0xCD, 0xC9, 0x1B, 0xD0, 0x03, 0x4C, 0xCF, 0xC2, 0x99,
   0x00, 0x01, 0xC9, 0x0D, 0xF0, 0x19, 0xC8, 0x98, 0x38, 0xE5, 0x52, 0xC9,
   0x40, 0x90, 0xD1, 0x20, 0xE3, 0xFF, 0xC9, 0x7F, 0xD0, 0xF9, 0x20, 0xF4,
   0xFF, 0x4C, 0x1F, 0xCD, 0x20, 0xED, 0xFF, 0xA9, 0x00, 0x85, 0x07, 0x60,
   0x20, 0x8B, 0xC7, 0x20, 0xAE, 0xCE, 0xA0, 0x54, 0x20, 0xCD, 0xC3, 0xA0,
   0xFF, 0xC8, 0xB1, 0x52, 0x91, 0x54, 0xC9, 0x0D, 0xD0, 0xF7, 0x4C, 0x58,
   0xC5, 0x20, 0x81, 0xCD, 0x4C, 0xF1, 0xC3, 0x20, 0x81, 0xCD, 0x4C, 0x09,
   0xC4, 0x20, 0xE1, 0xC8, 0x20, 0xBC, 0xC8, 0xCA, 0x18, 0xB5, 0x16, 0x75,
   0x15, 0x95, 0x15, 0xB5, 0x25, 0x75, 0x24, 0x95, 0x24, 0x86, 0x04, 0x60,
   0x20, 0xE4, 0xC4, 0xA5, 0x12, 0x85, 0x0E, 0xA0, 0x00, 0x84, 0x0D, 0x88,
   0xC8, 0xB1, 0x0D, 0xC9, 0x0D, 0xD0, 0xF9, 0x20, 0xBC, 0xCD, 0xB1, 0x0D,
   0x30, 0x03, 0xC8, 0xD0, 0xEF, 0xC8, 0x20, 0xBC, 0xCD, 0x4C, 0xCF, 0xC2,
   0x18, 0x98, 0x65, 0x0D, 0x85, 0x0D, 0x90, 0x02, 0xE6, 0x0E, 0xA0, 0x01,
   0x60, 0x84, 0x56, 0x20, 0x2E, 0xC6, 0xB0, 0x48, 0xA5, 0x58, 0x85, 0x52,
   0xE9, 0x01, 0x85, 0x58, 0x85, 0x0D, 0xA5, 0x59, 0x85, 0x53, 0xE9, 0x00,
   0x85, 0x0E, 0x85, 0x59, 0xA9, 0x0D, 0xC8, 0xD1, 0x52, 0xD0, 0xFB, 0x18,
   0x98, 0x65, 0x52, 0x85, 0x52, 0x90, 0x02, 0xE6, 0x53, 0xA0, 0x00, 0xB1,
   0x52, 0x91, 0x0D, 0xC9, 0x0D, 0xF0, 0x09, 0xC8, 0xD0, 0xF5, 0xE6, 0x53,
   0xE6, 0x0E, 0xD0, 0xEF, 0xC8, 0xD0, 0x04, 0xE6, 0x53, 0xE6, 0x0E, 0xB1,
   0x52, 0x91, 0x0D, 0x10, 0xEA, 0x20, 0xBD, 0xCD, 0xA0, 0x01, 0x84, 0x57,
   0x88, 0xA9, 0x0D, 0xD1, 0x56, 0xF0, 0x5D, 0xC8, 0xD1, 0x56, 0xD0, 0xFB,
   0xC8, 0xC8, 0xA5, 0x0D, 0x85, 0x54, 0xA5, 0x0E, 0x85, 0x55, 0x20, 0xBD,
   0xCD, 0x85, 0x52, 0xA5, 0x0E, 0x85, 0x53, 0x88, 0xA9, 0x55, 0x91, 0x0D,
   0xD1, 0x0D, 0xD0, 0xB2, 0x0A, 0x91, 0x0D, 0xD1, 0x0D, 0xD0, 0xAB, 0xB1,
   0x54, 0x91, 0x52, 0x98, 0xD0, 0x04, 0xC6, 0x55, 0xC6, 0x53, 0x88, 0x98,
   0x65, 0x54, 0xA6, 0x55, 0x90, 0x01, 0xE8, 0xC5, 0x58, 0x8A, 0xE5, 0x59,
   0xB0, 0xE5, 0xA0, 0x01, 0xA5, 0x25, 0x91, 0x58, 0xC8, 0xA5, 0x16, 0x91,
   0x58, 0x38, 0x20, 0xA2, 0xCE, 0xA0, 0xFF, 0xC8, 0xB1, 0x56, 0x91, 0x58,
   0xC9, 0x0D, 0xD0, 0xF7, 0x4C, 0xCF, 0xC2, 0x20, 0xE4, 0xC4, 0xA0, 0x00,
   0x84, 0x05, 0x84, 0x03, 0xA5, 0x12, 0x85, 0x06, 0x4C, 0x5B, 0xC5, 0x20,
   0xDE, 0xC4, 0xCA, 0x20, 0xCB, 0xC3, 0xA0, 0x00, 0xB5, 0x17, 0x91, 0x52,
   0x60, 0x18, 0x98, 0x65, 0x58, 0x85, 0x58, 0x90, 0x02, 0xE6, 0x59, 0x4C,
   0x00, 0xC5, 0x20, 0x79, 0xC2, 0xA2, 0x26, 0x4C, 0x33, 0xC2, 0x20, 0x8B,
   0xC7, 0x20, 0xCB, 0xC3, 0xA4, 0x03, 0x60, 0x20, 0xF6, 0xC4, 0x84, 0x53,
   0x88, 0xA2, 0x00, 0xB1, 0x05, 0xC9, 0x0D, 0xF0, 0xF9, 0x9D, 0x40, 0x01,
   0xE8, 0xC8, 0xC9, 0x22, 0xD0, 0xF1, 0xB1, 0x05, 0xC9, 0x22, 0xF0, 0x0E,
   0xA9, 0x0D, 0x9D, 0x3F, 0x01, 0x84, 0x03, 0xA9, 0x40, 0x85, 0x52, 0xA6,
   0x04, 0x60, 0xC8, 0xB0, 0xDA, 0x20, 0xFA, 0xCE, 0x88, 0x84, 0x56, 0x38,
   0x20, 0xE0, 0xFF, 0x4C, 0x9B, 0xCD, 0x20, 0xB1, 0xCE, 0x20, 0xE4, 0xC4,
   0x88, 0x84, 0x54, 0xA5, 0x12, 0x85, 0x55, 0xA2, 0x52, 0x60, 0x20, 0xFA,
   0xCE, 0x84, 0x58, 0x85, 0x59, 0xA5, 0x0D, 0x85, 0x5A, 0xA5, 0x0E, 0x85,
   0x5B, 0xA9, 0xB2, 0x85, 0x56, 0xA9, 0xC2, 0x85, 0x57, 0x18, 0x20, 0xDD,
   0xFF, 0x4C, 0x5B, 0xC5, 0x38, 0xA9, 0x00, 0x2A, 0x48, 0x20, 0x3E, 0xCF,
   0xA2, 0x52, 0x68, 0x20, 0xDA, 0xFF, 0xA0, 0x52, 0x20, 0x9F, 0xC9, 0x95,
   0x42, 0x60, 0x20, 0xBC, 0xC8, 0xB4, 0x15, 0xCA, 0x86, 0x04, 0x60, 0x20,
   0xBC, 0xC8, 0x20, 0xDE, 0xC4, 0x20, 0xCB, 0xC3, 0x20, 0x41, 0xCF, 0xA2,
   0x52, 0x20, 0xD7, 0xFF, 0x4C, 0x5B, 0xC5, 0x20, 0x3E, 0xCF, 0x84, 0x52,
   0x20, 0xD4, 0xFF, 0x4C, 0x7C, 0xC9, 0x20, 0x5B, 0xCF, 0xA4, 0x52, 0x20,
   0xD4, 0xFF, 0x95, 0x24, 0x20, 0xD4, 0xFF, 0x95, 0x33, 0x20, 0xD4, 0xFF,
   0x95, 0x42, 0x60, 0x20, 0xBC, 0xC8, 0x20, 0x31, 0xC2, 0x20, 0xE1, 0xC4,
   0x20, 0xCB, 0xC3, 0x20, 0x41, 0xCF, 0xA5, 0x52, 0x6C, 0x16, 0x02, 0x20,
   0x7B, 0xCF, 0x4C, 0x5B, 0xC5, 0x20, 0x7B, 0xCF, 0xA2, 0x01, 0xB5, 0x52,
   0x20, 0xD1, 0xFF, 0xE8, 0xE0, 0x04, 0x90, 0xF6, 0xB0, 0xEC, 0x38, 0x08,
   0x20, 0xB1, 0xCE, 0xA2, 0x52, 0x28, 0x20, 0xCE, 0xFF, 0xA6, 0x04, 0x4C,
   0x7C, 0xC9, 0x20, 0xBC, 0xC8, 0x20, 0xE4, 0xC4, 0x20, 0x41, 0xCF, 0x20,
   0xCB, 0xFF, 0x4C, 0x5B, 0xC5, 0x20, 0x2C, 0xC2, 0x20, 0xB1, 0xCE, 0x20,
   0xE4, 0xC4, 0x88, 0xB1, 0x52, 0x84, 0x55, 0xA4, 0x0F, 0x48, 0x20, 0xD1,
   0xFF, 0x68, 0xC9, 0x0D, 0xF0, 0xE4, 0xA4, 0x55, 0xC8, 0xD0, 0xEC, 0x20,
   0x2C, 0xC2, 0x20, 0xE1, 0xC4, 0x20, 0xCB, 0xC3, 0xA0, 0x00, 0x84, 0x55,
   0xA4, 0x0F, 0x20, 0xD4, 0xFF, 0xA4, 0x55, 0x91, 0x52, 0xC8, 0xC9, 0x0D,
   0xD0, 0xF0, 0xF0, 0xC2 }; 

/* C:\Users\LEENDERTBIJNAGTE\source\repos\Atombasic\Atombasic\roms\afloat.rom (3/28/2018 1:06:42 PM)
   StartOffset(h): 00000000, EndOffset(h): 00000FFF, Length(h): 00001000 

const unsigned char DrawData[4096] = {
	0xAA, 0x55, 0x0E, 0xD1, 0x5E, 0xD1, 0x28, 0xD0, 0xE4, 0x41, 0x43, 0x53,
	0xD2, 0x1E, 0x41, 0x53, 0x4E, 0xD2, 0x24, 0x41, 0x54, 0x4E, 0xDC, 0x64,
	0x41, 0x42, 0x53, 0xD2, 0x15, 0x43, 0x4F, 0x53, 0xDC, 0xE3, 0x45, 0x58,
	0x50, 0xDD, 0xD4, 0x48, 0x54, 0x4E, 0xDE, 0x72, 0x4C, 0x4F, 0x47, 0xDB,
	0xB3, 0x50, 0x49, 0xD2, 0xC3, 0x53, 0x49, 0x4E, 0xDC, 0xEE, 0x53, 0x51,
	0x52, 0xDB, 0x6F, 0x54, 0x41, 0x4E, 0xDA, 0xC4, 0x44, 0x45, 0x47, 0xD2,
	0x73, 0x52, 0x41, 0x44, 0xD2, 0x65, 0x53, 0x47, 0x4E, 0xD2, 0x86, 0x56,
	0x41, 0x4C, 0xD2, 0xE0, 0x46, 0x4C, 0x54, 0xD2, 0x9A, 0x46, 0x47, 0x45,
	0x54, 0xD2, 0xCC, 0xD2, 0x96, 0x25, 0xD3, 0x0B, 0x46, 0x49, 0x46, 0xD3,
	0xA8, 0x46, 0x55, 0x4E, 0x54, 0x49, 0x4C, 0xD3, 0xAE, 0x43, 0x4F, 0x4C,
	0x4F, 0x55, 0x52, 0xDF, 0x02, 0x46, 0x44, 0x49, 0x4D, 0xD3, 0xD3, 0x53,
	0x54, 0x52, 0xD3, 0x1F, 0x46, 0x50, 0x52, 0x49, 0x4E, 0x54, 0xD3, 0x31,
	0x46, 0x49, 0x4E, 0x50, 0x55, 0x54, 0xD3, 0x6A, 0x46, 0x50, 0x55, 0x54,
	0xD3, 0xB4, 0xD4, 0xAF, 0x2B, 0xD1, 0x77, 0x2D, 0xD1, 0x83, 0xFE, 0x2A,
	0xD1, 0x8F, 0x2F, 0xD1, 0x9B, 0xFE, 0x5E, 0xD1, 0xA7, 0xFE, 0x2B, 0xD1,
	0xCB, 0x2D, 0xD1, 0xBC, 0xD1, 0xCB, 0x29, 0xC2, 0x78, 0xFF, 0x3B, 0xC5,
	0x4A, 0x0D, 0xC5, 0x4A, 0x2C, 0xD3, 0x31, 0xD3, 0x39, 0x2C, 0xD3, 0x6A,
	0xC5, 0x58, 0x3D, 0xD9, 0xF6, 0x3C, 0x3E, 0xD9, 0xFE, 0x3C, 0x3D, 0xD9,
	0xFA, 0x3C, 0xDA, 0x02, 0x3E, 0x3D, 0xDA, 0x06, 0x3E, 0xDA, 0x0A, 0xFF,
	0x20, 0xFC, 0xD0, 0xA2, 0xB4, 0xD0, 0x20, 0x18, 0x66, 0x73, 0xA2, 0xAC,
	0xD0, 0x19, 0x20, 0x5D, 0xD8, 0x20, 0x06, 0xD1, 0xA2, 0xA1, 0xD0, 0x0F,
	0x20, 0xF5, 0xD0, 0xA2, 0x9A, 0xD0, 0x08, 0x20, 0x5D, 0xD8, 0x20, 0xEB,
	0xD0, 0xA2, 0xA8, 0x18, 0x90, 0x05, 0xA2, 0x5F, 0x84, 0x03, 0x38, 0x66,
	0x53, 0xA4, 0x03, 0x88, 0xC8, 0xB1, 0x05, 0xC9, 0x20, 0xF0, 0xF9, 0x88,
	0x84, 0x52, 0xCA, 0xA4, 0x52, 0xE8, 0xC8, 0xBD, 0x06, 0xD0, 0x30, 0x1A,
	0xD1, 0x05, 0xF0, 0xF5, 0xCA, 0xE8, 0xBD, 0x06, 0xD0, 0x10, 0xFA, 0xE8,
	0x24, 0x53, 0x10, 0xE7, 0xB1, 0x05, 0xC9, 0x2E, 0xD0, 0xE1, 0xC8, 0xCA,
	0xB0, 0xE1, 0xC9, 0xFE, 0xB0, 0x11, 0x85, 0x53, 0xBD, 0x07, 0xD0, 0x85,
	0x52, 0x84, 0x03, 0xA6, 0x04, 0x6C, 0x52, 0x00, 0xA6, 0x04, 0x60, 0xF0,
	0xFB, 0x00, 0x84, 0x03, 0x20, 0xEC, 0xD0, 0x20, 0x9A, 0xD8, 0xA5, 0x5A,
	0x85, 0x60, 0xA5, 0x5B, 0x85, 0x5F, 0xA5, 0x5C, 0x85, 0x5E, 0xA0, 0x5D,
	0x4C, 0x9F, 0xC9, 0x20, 0xF2, 0xD0, 0x20, 0x70, 0xD8, 0x20, 0x3C, 0xD9,
	0x4C, 0xFF, 0xD0, 0x20, 0xF2, 0xD0, 0x20, 0x70, 0xD8, 0x20, 0x39, 0xD9,
	0x4C, 0xFF, 0xD0, 0x20, 0x03, 0xD1, 0x20, 0x70, 0xD8, 0x20, 0x45, 0xDA,
	0x4C, 0xF8, 0xD0, 0x20, 0x03, 0xD1, 0x20, 0x70, 0xD8, 0x20, 0xB6, 0xDA,
	0x4C, 0xF8, 0xD0, 0x20, 0xB6, 0xDB, 0x20, 0x5D, 0xD8, 0x20, 0xEB, 0xD0,
	0x20, 0x70, 0xD8, 0x20, 0x45, 0xDA, 0x20, 0xD7, 0xDD, 0x4C, 0x09, 0xD1,
	0x20, 0xCB, 0xD1, 0x20, 0x86, 0xD6, 0xF0, 0x06, 0xA5, 0x57, 0x49, 0x80,
	0x85, 0x57, 0x60, 0xA4, 0x03, 0x88, 0xC8, 0xB1, 0x05, 0xC9, 0x20, 0xF0,
	0xF9, 0xC9, 0x25, 0xD0, 0x32, 0xE6, 0x03, 0x20, 0x44, 0xD4, 0x90, 0x2B,
	0xA0, 0x6F, 0x20, 0xCD, 0xC3, 0xA0, 0x04, 0xA9, 0x00, 0x85, 0x5E, 0x85,
	0x58, 0x85, 0x57, 0xB1, 0x6F, 0x99, 0x59, 0x00, 0x05, 0x57, 0x85, 0x57,
	0x88, 0x10, 0xF4, 0xAA, 0xF0, 0x09, 0xA5, 0x5A, 0x85, 0x57, 0x09, 0x80,
	0x85, 0x5A, 0x8A, 0x60, 0x84, 0x03, 0x60, 0x20, 0xA5, 0xD5, 0xB0, 0xF8,
	0xA2, 0x00, 0x4C, 0x12, 0xD1, 0x20, 0xEB, 0xD0, 0x20, 0x86, 0xD6, 0x30,
	0xA7, 0x60, 0x20, 0x24, 0xD2, 0x4C, 0x86, 0xDC, 0x20, 0xEB, 0xD0, 0x20,
	0x86, 0xD6, 0x10, 0x0A, 0xA9, 0x00, 0x85, 0x57, 0x20, 0x36, 0xD2, 0x4C,
	0x75, 0xDC, 0x20, 0x2C, 0xD8, 0x20, 0x45, 0xDA, 0x20, 0x31, 0xD8, 0x20,
	0x8D, 0xDE, 0x20, 0x33, 0xD9, 0x20, 0x72, 0xDB, 0x20, 0x86, 0xD6, 0xF0,
	0x12, 0x20, 0x31, 0xD8, 0x20, 0xA6, 0xDB, 0x20, 0xE5, 0xD1, 0x20, 0xAA,
	0xDB, 0x20, 0xDC, 0xDA, 0x4C, 0x67, 0xDC, 0x20, 0x93, 0xDD, 0x4C, 0xE5,
	0xD1, 0x20, 0xEB, 0xD0, 0xA0, 0x7C, 0xA9, 0xD2, 0x84, 0x6F, 0x85, 0x70,
	0x4C, 0x45, 0xDA, 0x20, 0xEB, 0xD0, 0xA0, 0x81, 0xA9, 0xD2, 0xD0, 0xF0,
	0x7B, 0x0E, 0xFA, 0x35, 0x12, 0x86, 0x65, 0x2E, 0xE0, 0xD3, 0x20, 0xEB,
	0xD0, 0x20, 0x86, 0xD6, 0xF0, 0x07, 0x48, 0x20, 0x8D, 0xDE, 0x68, 0x85,
	0x57, 0x60, 0x24, 0x73, 0x30, 0x26, 0x20, 0xBC, 0xC8, 0xA0, 0x5D, 0x20,
	0xCD, 0xC3, 0x85, 0x5A, 0xA5, 0x5F, 0x85, 0x5B, 0xA5, 0x5E, 0x85, 0x5C,
	0xA9, 0xA0, 0x85, 0x59, 0xA0, 0x00, 0x84, 0x5E, 0xA5, 0x5A, 0x85, 0x57,
	0x10, 0x03, 0x20, 0xD5, 0xD8, 0x4C, 0xC8, 0xD7, 0x4C, 0x1B, 0xCA, 0x20,
	0x93, 0xDD, 0x20, 0xE5, 0xD1, 0xE6, 0x59, 0x60, 0x20, 0x3E, 0xCF, 0xA2,
	0x04, 0x20, 0xD4, 0xFF, 0x9D, 0xC5, 0x03, 0xCA, 0x10, 0xF7, 0x20, 0xAA,
	0xDB, 0x4C, 0xE5, 0xD1, 0x20, 0xB1, 0xCE, 0xA0, 0x00, 0x20, 0x04, 0xD3,
	0xC9, 0x2B, 0xF0, 0x0F, 0xC9, 0x2D, 0xD0, 0x0E, 0x20, 0x03, 0xD3, 0x84,
	0x54, 0x20, 0xB1, 0xD5, 0x4C, 0xBF, 0xD1, 0x20, 0x03, 0xD3, 0x84, 0x54,
	0x4C, 0xB1, 0xD5, 0xC8, 0xB1, 0x52, 0xC9, 0x20, 0xF0, 0xF9, 0x60, 0x20,
	0x44, 0xD4, 0x90, 0xD4, 0x20, 0x79, 0xC2, 0x20, 0xFC, 0xD0, 0x20, 0xE4,
	0xC4, 0x20, 0x36, 0xD8, 0x4C, 0x5B, 0xC5, 0x20, 0xFC, 0xD0, 0x20, 0x31,
	0xC2, 0x20, 0xE1, 0xC4, 0x20, 0xCB, 0xC3, 0x20, 0xD0, 0xD4, 0x4C, 0x5B,
	0xC5, 0x20, 0x72, 0xC3, 0xA2, 0xB8, 0x4C, 0x0B, 0xD1, 0x20, 0xFC, 0xD0,
	0xA9, 0xC5, 0x85, 0x52, 0xA9, 0x03, 0x85, 0x53, 0x20, 0xD0, 0xD4, 0xC6,
	0x6F, 0xAD, 0x21, 0x03, 0x38, 0xE5, 0x6F, 0x90, 0x0B, 0xF0, 0x09, 0xA8,
	0xA9, 0x20, 0x20, 0x4C, 0xCA, 0x88, 0xD0, 0xFA, 0xA0, 0x00, 0xB1, 0x52,
	0xC9, 0x0D, 0xF0, 0xCD, 0x20, 0x4C, 0xCA, 0xC8, 0xD0, 0xF4, 0x20, 0x72,
	0xC3, 0xB1, 0x05, 0xC9, 0x25, 0xD0, 0x08, 0xC8, 0x84, 0x03, 0x20, 0x44,
	0xD4, 0xB0, 0x05, 0xA2, 0xC3, 0x4C, 0x0B, 0xD1, 0x20, 0x09, 0xCD, 0xA8,
	0xA5, 0x05, 0x48, 0xA5, 0x06, 0x48, 0xA5, 0x03, 0x48, 0x84, 0x03, 0xC8,
	0x84, 0x06, 0xA9, 0x40, 0x85, 0x05, 0x20, 0xFC, 0xD0, 0x68, 0x85, 0x03,
	0x68, 0x85, 0x06, 0x68, 0x85, 0x05, 0x20, 0x36, 0xD8, 0x4C, 0x7B, 0xD3,
	0x20, 0xEB, 0xD9, 0x4C, 0x69, 0xC5, 0x20, 0xEB, 0xD9, 0x4C, 0xD5, 0xCC,
	0x20, 0x94, 0xD4, 0x20, 0xFC, 0xD0, 0x20, 0xE4, 0xC4, 0x20, 0x31, 0xD8,
	0xA6, 0x04, 0x20, 0x41, 0xCF, 0xA2, 0x04, 0xBD, 0xC5, 0x03, 0x20, 0xD1,
	0xFF, 0xCA, 0x10, 0xF7, 0x4C, 0x5B, 0xC5, 0xA5, 0x01, 0x05, 0x02, 0xF0,
	0x6A, 0x20, 0x34, 0xC4, 0xB0, 0x65, 0xA4, 0x03, 0xB1, 0x05, 0xC9, 0x25,
	0xD0, 0x5D, 0xC8, 0xB1, 0x05, 0xC8, 0xD1, 0x05, 0xD0, 0x55, 0xC9, 0x5B,
	0xB0, 0x51, 0xE9, 0x3F, 0x90, 0x4D, 0xC8, 0x84, 0x03, 0x48, 0x20, 0x8B,
	0xC7, 0xF6, 0x15, 0xD0, 0x02, 0xF6, 0x24, 0x20, 0x9A, 0xD4, 0x68, 0xA8,
	0x18, 0xA5, 0x23, 0x99, 0x87, 0x28, 0x65, 0x16, 0x85, 0x23, 0xA5, 0x24,
	0x99, 0xA2, 0x28, 0x65, 0x25, 0x85, 0x24, 0xA0, 0x00, 0x84, 0x04, 0xA9,
	0xAA, 0x91, 0x23, 0xD1, 0x23, 0xD0, 0x1C, 0x4A, 0x91, 0x23, 0xD1, 0x23,
	0xD0, 0x15, 0x20, 0x34, 0xC4, 0xB0, 0x10, 0xA4, 0x03, 0xB1, 0x05, 0xC9,
	0x2C, 0xD0, 0x05, 0xE6, 0x03, 0x4C, 0xD3, 0xD3, 0x4C, 0x58, 0xC5, 0x00,
	0x20, 0x34, 0xC4, 0x90, 0x0E, 0xB5, 0x15, 0x0A, 0x0A, 0x75, 0x15, 0x95,
	0x15, 0xA9, 0x28, 0x95, 0x24, 0x38, 0x60, 0xA4, 0x03, 0xB1, 0x05, 0xC9,
	0x21, 0xD0, 0x07, 0xE6, 0x03, 0x20, 0xBC, 0xC8, 0x38, 0x60, 0xC8, 0xD1,
	0x05, 0xD0, 0x08, 0xC9, 0x5B, 0xB0, 0x04, 0xE9, 0x3F, 0xB0, 0x02, 0x18,
	0x60, 0xC8, 0x84, 0x03, 0x48, 0x20, 0xBC, 0xC8, 0x20, 0x9A, 0xD4, 0x68,
	0xA8, 0xB0, 0x10, 0xB9, 0x87, 0x28, 0x75, 0x15, 0x95, 0x15, 0xB9, 0xA2,
	0x28, 0x75, 0x24, 0x95, 0x24, 0x90, 0xD1, 0x00, 0x20, 0xBC, 0xC8, 0x4C,
	0x31, 0xC2, 0xB4, 0x24, 0xB5, 0x15, 0x0A, 0x36, 0x24, 0x0A, 0x36, 0x24,
	0x18, 0x75, 0x15, 0x95, 0x15, 0x98, 0x75, 0x24, 0x95, 0x24, 0x60, 0xAD,
	0x04, 0xE0, 0xC9, 0xBF, 0xF0, 0x0A, 0xAD, 0x00, 0xA0, 0xC9, 0x40, 0xD0,
	0x83, 0x4C, 0x02, 0xA0, 0x4C, 0x05, 0xE0, 0xC9, 0x3A, 0xB0, 0x07, 0xC9,
	0x30, 0x90, 0x02, 0xE9, 0x30, 0x60, 0x18, 0x60, 0xA9, 0x00, 0x85, 0x6F,
	0x20, 0x86, 0xD6, 0xD0, 0x12, 0xA9, 0x30, 0x20, 0x8D, 0xD5, 0xA9, 0x2E,
	0x20, 0x8D, 0xD5, 0xA9, 0x30, 0x20, 0x8D, 0xD5, 0x4C, 0x71, 0xD5, 0x10,
	0x05, 0xA9, 0x2D, 0x20, 0x8D, 0xD5, 0xA9, 0x00, 0x85, 0x6D, 0xA5, 0x59,
	0xC9, 0x81, 0xB0, 0x08, 0x20, 0xA0, 0xD6, 0xC6, 0x6D, 0x4C, 0xF6, 0xD4,
	0xC9, 0x84, 0x90, 0x10, 0xD0, 0x06, 0xA5, 0x5A, 0xC9, 0xA0, 0x90, 0x08,
	0x20, 0x1B, 0xD7, 0xE6, 0x6D, 0x4C, 0xF6, 0xD4, 0xA5, 0x59, 0xC9, 0x84,
	0xB0, 0x07, 0x20, 0xD8, 0xD6, 0xE6, 0x59, 0xD0, 0xF3, 0x38, 0xA9, 0xFF,
	0x20, 0x36, 0xD6, 0xA5, 0x5A, 0xC9, 0xA0, 0xB0, 0xDF, 0xA9, 0x01, 0xA4,
	0x6D, 0x30, 0x0A, 0xC0, 0x08, 0xB0, 0x06, 0xC8, 0xA9, 0x00, 0x85, 0x6D,
	0x98, 0x85, 0x70, 0xA2, 0x09, 0x86, 0x54, 0x20, 0x75, 0xD5, 0xC6, 0x70,
	0xD0, 0x05, 0xA9, 0x2E, 0x20, 0x8D, 0xD5, 0xC6, 0x54, 0xD0, 0xF0, 0xA5,
	0x6D, 0xF0, 0x16, 0xA9, 0x45, 0x20, 0x8D, 0xD5, 0xA5, 0x6D, 0x10, 0x0A,
	0xA9, 0x2D, 0x20, 0x8D, 0xD5, 0x38, 0xA9, 0x00, 0xE5, 0x6D, 0x20, 0x87,
	0xD5, 0xA9, 0x0D, 0xD0, 0x18, 0xA5, 0x5A, 0x4A, 0x4A, 0x4A, 0x4A, 0x20,
	0x8B, 0xD5, 0xA5, 0x5A, 0x29, 0x0F, 0x85, 0x5A, 0x4C, 0x4E, 0xD6, 0xC9,
	0x0A, 0xB0, 0x09, 0x09, 0x30, 0xA4, 0x6F, 0x91, 0x52, 0xE6, 0x6F, 0x60,
	0xA2, 0xFF, 0xE8, 0xE9, 0x0A, 0xB0, 0xFB, 0x69, 0x0A, 0x48, 0x8A, 0x20,
	0x87, 0xD5, 0x68, 0x10, 0xE6, 0xA5, 0x03, 0x85, 0x54, 0xA5, 0x05, 0x85,
	0x52, 0xA5, 0x06, 0x85, 0x53, 0x20, 0xA4, 0xDA, 0x85, 0x6C, 0x85, 0x6D,
	0x20, 0x7B, 0xD6, 0xC9, 0x2E, 0xF0, 0x0E, 0x20, 0xC3, 0xD4, 0x90, 0x71,
	0x85, 0x5E, 0x20, 0x7B, 0xD6, 0xC9, 0x2E, 0xD0, 0x09, 0xA5, 0x6C, 0x18,
	0xD0, 0x3A, 0xE6, 0x6C, 0xD0, 0xF0, 0xC9, 0x45, 0xF0, 0x27, 0x20, 0xC3,
	0xD4, 0x90, 0x2D, 0x85, 0x6E, 0xA5, 0x5A, 0xC9, 0x18, 0x90, 0x08, 0xA5,
	0x6C, 0xD0, 0xDB, 0xE6, 0x6D, 0xB0, 0xD7, 0xA5, 0x6C, 0xF0, 0x02, 0xC6,
	0x6D, 0x20, 0x4E, 0xD6, 0x18, 0xA5, 0x6E, 0x20, 0x36, 0xD6, 0x4C, 0xC6,
	0xD5, 0x20, 0x7B, 0xD6, 0x20, 0x78, 0xD7, 0x18, 0x65, 0x6D, 0x85, 0x6D,
	0xA9, 0xA8, 0x85, 0x59, 0x20, 0x86, 0xD6, 0xF0, 0x1C, 0x20, 0xC8, 0xD7,
	0xA5, 0x6D, 0x30, 0x0B, 0xF0, 0x10, 0x20, 0xA0, 0xD6, 0xC6, 0x6D, 0xD0,
	0xF9, 0xF0, 0x07, 0x20, 0x1B, 0xD7, 0xE6, 0x6D, 0xD0, 0xF9, 0x20, 0x9B,
	0xDA, 0x38, 0xA4, 0x54, 0x88, 0x60, 0xA2, 0x05, 0x75, 0x59, 0x95, 0x59,
	0xA9, 0x00, 0xCA, 0xD0, 0xF7, 0x60, 0xA2, 0x05, 0xB5, 0x59, 0x75, 0x61,
	0x95, 0x59, 0xCA, 0xD0, 0xF7, 0x60, 0xA2, 0x05, 0xA9, 0x00, 0x85, 0x67,
	0xA9, 0x00, 0x85, 0x68, 0xB5, 0x59, 0x0A, 0x26, 0x68, 0x0A, 0x26, 0x68,
	0x18, 0x75, 0x59, 0x90, 0x02, 0xE6, 0x68, 0x0A, 0x26, 0x68, 0x18, 0x65,
	0x67, 0x90, 0x02, 0xE6, 0x68, 0x95, 0x59, 0xA5, 0x68, 0x85, 0x67, 0xCA,
	0xD0, 0xDA, 0x60, 0x84, 0x55, 0xA4, 0x54, 0xB1, 0x52, 0xA4, 0x55, 0xE6,
	0x54, 0x60, 0xA5, 0x5A, 0x05, 0x5B, 0x05, 0x5C, 0x05, 0x5D, 0x05, 0x5E,
	0xF0, 0x07, 0xA5, 0x57, 0xD0, 0x09, 0xA9, 0x01, 0x60, 0x85, 0x57, 0x85,
	0x59, 0x85, 0x58, 0x60, 0x18, 0xA5, 0x59, 0x69, 0x03, 0x85, 0x59, 0x90,
	0x02, 0xE6, 0x58, 0x20, 0xC3, 0xD6, 0x20, 0xFB, 0xD6, 0x20, 0xFB, 0xD6,
	0x20, 0x42, 0xD6, 0x90, 0x09, 0x20, 0xD8, 0xD6, 0xE6, 0x59, 0xD0, 0x02,
	0xE6, 0x58, 0x60, 0xA2, 0x08, 0xB5, 0x56, 0x95, 0x5E, 0xCA, 0xD0, 0xF9,
	0x60, 0x06, 0x5E, 0x26, 0x5D, 0x26, 0x5C, 0x26, 0x5B, 0x26, 0x5A, 0x60,
	0x66, 0x5A, 0x66, 0x5B, 0x66, 0x5C, 0x66, 0x5D, 0x66, 0x5E, 0x60, 0xA5,
	0x5D, 0x85, 0x5E, 0xA5, 0x5C, 0x85, 0x5D, 0xA5, 0x5B, 0x85, 0x5C, 0xA5,
	0x5A, 0x85, 0x5B, 0xA9, 0x00, 0x85, 0x5A, 0x60, 0x20, 0xC3, 0xD6, 0x46,
	0x62, 0x66, 0x63, 0x66, 0x64, 0x66, 0x65, 0x66, 0x66, 0x60, 0xA5, 0x65,
	0x85, 0x66, 0xA5, 0x64, 0x85, 0x65, 0xA5, 0x63, 0x85, 0x64, 0xA5, 0x62,
	0x85, 0x63, 0xA9, 0x00, 0x85, 0x62, 0x60, 0x38, 0xA5, 0x59, 0xE9, 0x04,
	0x85, 0x59, 0xB0, 0x02, 0xC6, 0x58, 0x20, 0xF8, 0xD6, 0x20, 0xB4, 0xD6,
	0x20, 0xF8, 0xD6, 0x20, 0xFB, 0xD6, 0x20, 0xFB, 0xD6, 0x20, 0xFB, 0xD6,
	0x20, 0xB4, 0xD6, 0xA9, 0x00, 0x85, 0x62, 0xA5, 0x5A, 0x85, 0x63, 0xA5,
	0x5B, 0x85, 0x64, 0xA5, 0x5C, 0x85, 0x65, 0xA5, 0x5D, 0x85, 0x66, 0xA5,
	0x5E, 0x2A, 0x20, 0xB4, 0xD6, 0xA9, 0x00, 0x85, 0x62, 0x85, 0x63, 0xA5,
	0x5A, 0x85, 0x64, 0xA5, 0x5B, 0x85, 0x65, 0xA5, 0x5C, 0x85, 0x66, 0xA5,
	0x5D, 0x2A, 0x20, 0xB4, 0xD6, 0xA5, 0x5B, 0x2A, 0xA5, 0x5A, 0x20, 0x36,
	0xD6, 0x4C, 0xB7, 0xD6, 0xA0, 0xFF, 0xC9, 0x2B, 0xF0, 0x05, 0xC9, 0x2D,
	0xD0, 0x04, 0xC8, 0x20, 0x7B, 0xD6, 0x20, 0xC3, 0xD4, 0x90, 0x24, 0xAA,
	0x20, 0x7B, 0xD6, 0x20, 0xC3, 0xD4, 0x90, 0x10, 0x85, 0x6E, 0x20, 0x7B,
	0xD6, 0x8A, 0x85, 0x67, 0x0A, 0x0A, 0x65, 0x67, 0x0A, 0x65, 0x6E, 0xAA,
	0x98, 0xD0, 0x06, 0x86, 0x6E, 0x38, 0xE5, 0x6E, 0x60, 0x8A, 0x60, 0xA9,
	0x00, 0x60, 0x48, 0x20, 0xA4, 0xDA, 0x68, 0xF0, 0xF8, 0x10, 0x07, 0x85,
	0x57, 0xA9, 0x00, 0x38, 0xE5, 0x57, 0x85, 0x5A, 0xA9, 0x88, 0x85, 0x59,
	0x20, 0x86, 0xD6, 0xF0, 0xE4, 0xA5, 0x5A, 0xD0, 0x21, 0xA5, 0x5B, 0x85,
	0x5A, 0xA5, 0x5C, 0x85, 0x5B, 0xA5, 0x5D, 0x85, 0x5C, 0xA5, 0x5E, 0x85,
	0x5D, 0xA9, 0x00, 0x85, 0x5E, 0x38, 0xA5, 0x59, 0xE9, 0x08, 0x85, 0x59,
	0xB0, 0xDF, 0xC6, 0x58, 0x90, 0xDB, 0xA5, 0x5A, 0x30, 0xBB, 0x20, 0xCD,
	0xD6, 0xA5, 0x59, 0xD0, 0x02, 0xC6, 0x58, 0xC6, 0x59, 0x4C, 0xF2, 0xD7,
	0xA0, 0x04, 0xA9, 0x00, 0x85, 0x66, 0x85, 0x60, 0x85, 0x5F, 0xB1, 0x6F,
	0x99, 0x61, 0x00, 0x05, 0x5F, 0x85, 0x5F, 0x88, 0x10, 0xF4, 0xAA, 0xF0,
	0x09, 0xA5, 0x62, 0x85, 0x5F, 0x09, 0x80, 0x85, 0x62, 0x8A, 0x60, 0x20,
	0xA2, 0xDB, 0xD0, 0x11, 0x20, 0xA6, 0xDB, 0xD0, 0x0C, 0x20, 0xAA, 0xDB,
	0xD0, 0x07, 0xA6, 0x04, 0xA0, 0x6F, 0x20, 0xCD, 0xC3, 0xA0, 0x00, 0xA5,
	0x59, 0x91, 0x6F, 0xC8, 0xA5, 0x57, 0x29, 0x80, 0x85, 0x57, 0xA5, 0x5A,
	0x29, 0x7F, 0x05, 0x57, 0x91, 0x6F, 0xC8, 0xB9, 0x59, 0x00, 0x91, 0x6F,
	0xC0, 0x04, 0xD0, 0xF6, 0x60, 0xA0, 0x52, 0x84, 0x6F, 0xA9, 0x00, 0x85,
	0x70, 0x20, 0x3D, 0xD8, 0x20, 0xD9, 0xC4, 0xA5, 0x56, 0x95, 0x73, 0x60,
	0xA6, 0x04, 0x20, 0xCB, 0xC3, 0xB5, 0x74, 0x85, 0x56, 0x84, 0x6F, 0xA9,
	0x00, 0x85, 0x70, 0x60, 0xA5, 0x5E, 0xC9, 0x80, 0x90, 0x07, 0xF0, 0x0A,
	0xA9, 0xFF, 0x20, 0x72, 0xD7, 0xA9, 0x00, 0x85, 0x5E, 0x60, 0xA5, 0x5D,
	0x09, 0x01, 0x85, 0x5D, 0xD0, 0xF3, 0x20, 0xC7, 0xD8, 0xF0, 0x06, 0xA5,
	0x59, 0xC9, 0xA0, 0xB0, 0x14, 0x46, 0x5A, 0x66, 0x5B, 0x66, 0x5C, 0x66,
	0x5D, 0x66, 0x62, 0x66, 0x63, 0x66, 0x64, 0x66, 0x65, 0xE6, 0x59, 0xD0,
	0xE6, 0xF0, 0x16, 0xA9, 0x7F, 0x85, 0x5A, 0xA9, 0xFF, 0x85, 0x5B, 0x85,
	0x5C, 0x85, 0x5D, 0xA2, 0x08, 0xA9, 0x00, 0x95, 0x5F, 0xCA, 0xD0, 0xFB,
	0x60, 0xA5, 0x57, 0x10, 0x0C, 0x38, 0xA2, 0x04, 0xA9, 0x00, 0xF5, 0x59,
	0x95, 0x59, 0xCA, 0xD0, 0xF7, 0x60, 0xA5, 0x62, 0x10, 0x23, 0xA2, 0x04,
	0xA9, 0x00, 0xF5, 0x61, 0x95, 0x61, 0xCA, 0xD0, 0xF7, 0xA5, 0x57, 0x49,
	0x80, 0x85, 0x57, 0x10, 0x11, 0xE6, 0x5D, 0xD0, 0x0C, 0xE6, 0x5C, 0xD0,
	0x08, 0xE6, 0x5B, 0xD0, 0x04, 0xE6, 0x5A, 0xF0, 0xB2, 0x60, 0x20, 0xD5,
	0xD8, 0x20, 0xF9, 0xD8, 0x4C, 0xD5, 0xD8, 0xA2, 0x05, 0xB5, 0x61, 0x95,
	0x59, 0xCA, 0xD0, 0xF9, 0xA9, 0x80, 0x85, 0x59, 0x4C, 0xC8, 0xD7, 0x20,
	0x04, 0xD8, 0x20, 0x3D, 0xD8, 0xA2, 0x08, 0xB5, 0x5E, 0x95, 0x56, 0xCA,
	0xD0, 0xF9, 0x60, 0x20, 0x39, 0xD9, 0x4C, 0xBF, 0xD1, 0x20, 0xBF, 0xD1,
	0x20, 0x04, 0xD8, 0xF0, 0xF1, 0x20, 0x86, 0xD6, 0xF0, 0xE3, 0xA5, 0x59,
	0xC5, 0x61, 0xF0, 0x26, 0x90, 0x0F, 0xE5, 0x61, 0xC9, 0x21, 0xB0, 0xDE,
	0xAA, 0x20, 0xFB, 0xD6, 0xCA, 0xD0, 0xFA, 0xF0, 0x15, 0x38, 0xA5, 0x61,
	0xE5, 0x59, 0xC9, 0x21, 0xB0, 0xC3, 0xAA, 0x18, 0x20, 0xD8, 0xD6, 0xCA,
	0xD0, 0xF9, 0xA5, 0x61, 0x85, 0x59, 0xA5, 0x57, 0x45, 0x5F, 0x10, 0x49,
	0xA5, 0x5A, 0xC5, 0x62, 0xD0, 0x1B, 0xA5, 0x5B, 0xC5, 0x63, 0xD0, 0x15,
	0xA5, 0x5C, 0xC5, 0x64, 0xD0, 0x0F, 0xA5, 0x5D, 0xC5, 0x65, 0xD0, 0x09,
	0xA5, 0x5E, 0xC5, 0x66, 0xD0, 0x03, 0x4C, 0xA4, 0xDA, 0xB0, 0x2D, 0x38,
	0xA5, 0x66, 0xE5, 0x5E, 0x85, 0x5E, 0xA5, 0x65, 0xE5, 0x5D, 0x85, 0x5D,
	0xA5, 0x64, 0xE5, 0x5C, 0x85, 0x5C, 0xA5, 0x63, 0xE5, 0x5B, 0x85, 0x5B,
	0xA5, 0x62, 0xE5, 0x5A, 0x85, 0x5A, 0xA5, 0x5F, 0x85, 0x57, 0x4C, 0x98,
	0xDA, 0x18, 0x20, 0xB4, 0xD6, 0x4C, 0x9B, 0xDA, 0x38, 0xA5, 0x5E, 0xE5,
	0x66, 0x85, 0x5E, 0xA5, 0x5D, 0xE5, 0x65, 0x85, 0x5D, 0xA5, 0x5C, 0xE5,
	0x64, 0x85, 0x5C, 0xA5, 0x5B, 0xE5, 0x63, 0x85, 0x5B, 0xA5, 0x5A, 0xE5,
	0x62, 0x85, 0x5A, 0x4C, 0x98, 0xDA, 0x00, 0x20, 0xFC, 0xD0, 0xA9, 0xC7,
	0x48, 0xA2, 0xC8, 0x4C, 0x0B, 0xD1, 0xA9, 0x5D, 0xD0, 0x12, 0xA9, 0x66,
	0xD0, 0x0E, 0xA9, 0x6F, 0xD0, 0x0A, 0xA9, 0x76, 0xD0, 0x06, 0xA9, 0x7D,
	0xD0, 0x02, 0xA9, 0x84, 0x48, 0x20, 0x5D, 0xD8, 0x20, 0xFC, 0xD0, 0x20,
	0x70, 0xD8, 0xE6, 0x04, 0x20, 0x04, 0xD8, 0xA5, 0x5F, 0x29, 0x80, 0x85,
	0x5F, 0xA0, 0x00, 0xA5, 0x57, 0x29, 0x80, 0xC5, 0x5F, 0xD0, 0x0D, 0xA2,
	0x00, 0xB5, 0x61, 0xD5, 0x59, 0xD0, 0x0A, 0xE8, 0xE0, 0x05, 0xD0, 0xF5,
	0x08, 0xA6, 0x04, 0x28, 0x60, 0x6A, 0x45, 0x5F, 0x2A, 0xA9, 0x01, 0xD0,
	0xF3, 0x20, 0x86, 0xD6, 0xF0, 0xF2, 0x20, 0x04, 0xD8, 0xD0, 0x03, 0x4C,
	0xA4, 0xDA, 0x18, 0xA5, 0x59, 0x65, 0x61, 0x85, 0x59, 0x90, 0x02, 0xE6,
	0x58, 0x38, 0xA5, 0x59, 0xE9, 0x80, 0x85, 0x59, 0xB0, 0x02, 0xC6, 0x58,
	0xA2, 0x05, 0xA0, 0x00, 0xB5, 0x59, 0x95, 0x66, 0x94, 0x59, 0xCA, 0xD0,
	0xF7, 0xA5, 0x57, 0x45, 0x5F, 0x85, 0x57, 0xA0, 0x20, 0x20, 0xFB, 0xD6,
	0xA5, 0x67, 0x10, 0x04, 0x18, 0x20, 0x42, 0xD6, 0x20, 0xFB, 0xD6, 0x06,
	0x6B, 0x26, 0x6A, 0x26, 0x69, 0x26, 0x68, 0x26, 0x67, 0x88, 0xD0, 0xE8,
	0x20, 0xC8, 0xD7, 0x20, 0x80, 0xD8, 0xA5, 0x58, 0xF0, 0x0B, 0x10, 0x03,
	0xA2, 0x08, 0xA9, 0x00, 0x95, 0x56, 0xCA, 0xD0, 0xFB, 0x60, 0x20, 0x31,
	0xD8, 0x20, 0x8D, 0xDE, 0xD0, 0x26, 0x20, 0x86, 0xD6, 0xF0, 0xEC, 0x20,
	0xC3, 0xD6, 0x20, 0xE5, 0xD1, 0xD0, 0x23, 0x60, 0x20, 0xEB, 0xD0, 0x20,
	0x9E, 0xDB, 0x20, 0x3D, 0xD8, 0x20, 0xE6, 0xDC, 0x20, 0x9E, 0xDB, 0x20,
	0x23, 0xD9, 0x20, 0xF1, 0xDC, 0x20, 0x9E, 0xDB, 0x20, 0x86, 0xD6, 0xF0,
	0xCC, 0x20, 0x04, 0xD8, 0xF0, 0xC1, 0xA5, 0x57, 0x45, 0x5F, 0x85, 0x57,
	0x38, 0xA5, 0x59, 0xE5, 0x61, 0x85, 0x59, 0xB0, 0x02, 0xC6, 0x58, 0x18,
	0xA5, 0x59, 0x69, 0x81, 0x85, 0x59, 0x90, 0x02, 0xE6, 0x58, 0xA2, 0x05,
	0xB5, 0x59, 0x95, 0x66, 0xCA, 0xD0, 0xF9, 0x46, 0x67, 0x66, 0x68, 0x66,
	0x69, 0x66, 0x6A, 0x66, 0x6B, 0x20, 0xFB, 0xD6, 0xA2, 0x27, 0xA5, 0x67,
	0xC5, 0x62, 0xD0, 0x16, 0xA5, 0x68, 0xC5, 0x63, 0xD0, 0x10, 0xA5, 0x69,
	0xC5, 0x64, 0xD0, 0x0A, 0xA5, 0x6A, 0xC5, 0x65, 0xD0, 0x04, 0xA5, 0x6B,
	0xC5, 0x66, 0x90, 0x24, 0xA5, 0x6B, 0xE5, 0x66, 0x85, 0x6B, 0xA5, 0x6A,
	0xE5, 0x65, 0x85, 0x6A, 0xA5, 0x69, 0xE5, 0x64, 0x85, 0x69, 0xA5, 0x68,
	0xE5, 0x63, 0x85, 0x68, 0xA5, 0x67, 0xE5, 0x62, 0x85, 0x67, 0xA5, 0x5E,
	0x09, 0x01, 0x85, 0x5E, 0x20, 0xCD, 0xD6, 0x06, 0x6B, 0x26, 0x6A, 0x26,
	0x69, 0x26, 0x68, 0x26, 0x67, 0xCA, 0xD0, 0xAE, 0x4C, 0x98, 0xDA, 0x20,
	0xEB, 0xD0, 0x20, 0x86, 0xD6, 0xF0, 0x26, 0x10, 0x01, 0x00, 0x20, 0x31,
	0xD8, 0xA5, 0x59, 0x4A, 0x69, 0x40, 0x85, 0x59, 0xA9, 0x05, 0x85, 0x6E,
	0x20, 0x27, 0xD8, 0x20, 0xAA, 0xDB, 0x20, 0xB6, 0xDA, 0x20, 0xA2, 0xDB,
	0x20, 0x3C, 0xD9, 0xC6, 0x59, 0xC6, 0x6E, 0xD0, 0xEB, 0x60, 0xA9, 0xD4,
	0xD0, 0x0A, 0xA9, 0xCA, 0xD0, 0x06, 0xA9, 0xCF, 0xD0, 0x02, 0xA9, 0xC5,
	0x85, 0x6F, 0xA9, 0x03, 0x85, 0x70, 0x60, 0x20, 0xEB, 0xD0, 0x20, 0x86,
	0xD6, 0xF0, 0x02, 0x10, 0x01, 0x00, 0xA5, 0x59, 0x48, 0xA9, 0x81, 0x85,
	0x59, 0x20, 0xC7, 0xD8, 0xA9, 0xC0, 0x85, 0x62, 0xA9, 0x81, 0x85, 0x61,
	0x85, 0x5F, 0x20, 0x41, 0xD9, 0xE6, 0x59, 0xA9, 0xFE, 0xA0, 0xDB, 0x20,
	0x27, 0xDC, 0x20, 0x31, 0xD8, 0x68, 0x38, 0xE9, 0x81, 0x20, 0xB2, 0xD7,
	0xA9, 0xF9, 0x85, 0x6F, 0xA9, 0xDB, 0x85, 0x70, 0x20, 0x45, 0xDA, 0x20,
	0xAA, 0xDB, 0x4C, 0x3C, 0xD9, 0x80, 0x31, 0x72, 0x17, 0xF8, 0x07, 0x85,
	0x17, 0x6E, 0xD4, 0x85, 0x80, 0x28, 0xC7, 0x12, 0xA0, 0x84, 0x70, 0x4E,
	0x5F, 0xF2, 0x81, 0x00, 0x00, 0xFE, 0xEF, 0x84, 0x0F, 0xFF, 0xDA, 0xE1,
	0x81, 0x7F, 0xFF, 0xFF, 0x93, 0x82, 0x40, 0x00, 0x00, 0x0C, 0x7F, 0x4F,
	0x99, 0x1F, 0x65, 0x85, 0x71, 0x84, 0x72, 0x20, 0x31, 0xD8, 0xA0, 0x00,
	0xB1, 0x71, 0x85, 0x6C, 0xE6, 0x71, 0xD0, 0x02, 0xE6, 0x72, 0xA5, 0x71,
	0x85, 0x6F, 0xA5, 0x72, 0x85, 0x70, 0x20, 0xE5, 0xD1, 0x20, 0xAA, 0xDB,
	0x20, 0xB6, 0xDA, 0x18, 0xA5, 0x71, 0x69, 0x05, 0x85, 0x71, 0x85, 0x6F,
	0xA5, 0x72, 0x69, 0x00, 0x85, 0x72, 0x85, 0x70, 0x20, 0x3C, 0xD9, 0xC6,
	0x6C, 0xD0, 0xE2, 0x60, 0x20, 0xEB, 0xD0, 0x20, 0x86, 0xD6, 0xF0, 0x0D,
	0x10, 0x0C, 0xA9, 0x00, 0x85, 0x57, 0x20, 0x7A, 0xDC, 0xA9, 0x80, 0x85,
	0x57, 0x60, 0xA5, 0x59, 0xC9, 0x81, 0x90, 0x0C, 0x20, 0xAE, 0xDA, 0x20,
	0x8C, 0xDC, 0x20, 0x93, 0xDD, 0x4C, 0x39, 0xD9, 0xA5, 0x59, 0xC9, 0x73,
	0x90, 0xE7, 0x20, 0x2C, 0xD8, 0x20, 0xC7, 0xD8, 0xA9, 0x80, 0x85, 0x61,
	0x85, 0x62, 0x85, 0x5F, 0x20, 0x41, 0xD9, 0xA9, 0xB0, 0xA0, 0xDC, 0x20,
	0x27, 0xDC, 0x20, 0xA6, 0xDB, 0x4C, 0x45, 0xDA, 0x09, 0x85, 0xA3, 0x59,
	0xE8, 0x67, 0x80, 0x1C, 0x9D, 0x07, 0x36, 0x80, 0x57, 0xBB, 0x78, 0xDF,
	0x80, 0xCA, 0x9A, 0x0E, 0x83, 0x84, 0x8C, 0xBB, 0xCA, 0x6E, 0x81, 0x95,
	0x96, 0x06, 0xDE, 0x81, 0x0A, 0xC7, 0x6C, 0x52, 0x7F, 0x7D, 0xAD, 0x90,
	0xA1, 0x82, 0xFB, 0x62, 0x57, 0x2F, 0x80, 0x6D, 0x63, 0x38, 0x2C, 0x20,
	0xEB, 0xD0, 0x20, 0x24, 0xDD, 0xE6, 0x6E, 0x4C, 0xF4, 0xDC, 0x20, 0xEB,
	0xD0, 0x20, 0x24, 0xDD, 0x46, 0x6E, 0x90, 0x03, 0x20, 0x86, 0xDC, 0x46,
	0x6E, 0x90, 0x06, 0x20, 0x05, 0xDD, 0x4C, 0xBF, 0xD1, 0x20, 0x2C, 0xD8,
	0x20, 0x93, 0xDD, 0x20, 0x04, 0xD8, 0xC6, 0x61, 0xA9, 0x80, 0x85, 0x5F,
	0x20, 0x41, 0xD9, 0xA9, 0xA6, 0xA0, 0xDD, 0x20, 0x27, 0xDC, 0x20, 0xA6,
	0xDB, 0x4C, 0x45, 0xDA, 0xA5, 0x59, 0xC9, 0x98, 0xB0, 0x54, 0x20, 0x31,
	0xD8, 0x20, 0x93, 0xDD, 0x20, 0xDC, 0xDA, 0x20, 0x9A, 0xD8, 0xA5, 0x5D,
	0x85, 0x6E, 0x05, 0x5C, 0x05, 0x5B, 0x05, 0x5A, 0xF0, 0x3E, 0x20, 0xAC,
	0xD2, 0x20, 0x27, 0xD8, 0x20, 0x86, 0xDD, 0x20, 0x45, 0xDA, 0x20, 0xAA,
	0xDB, 0x20, 0x3C, 0xD9, 0x20, 0x3D, 0xD8, 0x20, 0xA2, 0xDB, 0x20, 0xE5,
	0xD1, 0x20, 0x8A, 0xDD, 0x20, 0x45, 0xDA, 0x20, 0xAA, 0xDB, 0x20, 0x3C,
	0xD9, 0xA5, 0x57, 0x10, 0x12, 0x20, 0x8A, 0xDD, 0x20, 0x33, 0xD9, 0x20,
	0x86, 0xDD, 0x20, 0x33, 0xD9, 0xC6, 0x6E, 0x4C, 0x69, 0xDD, 0x00, 0x60,
	0x20, 0xDA, 0xD2, 0x4C, 0x69, 0xDD, 0xA9, 0x97, 0xD0, 0x02, 0xA9, 0x9C,
	0x85, 0x6F, 0xA9, 0xDD, 0x85, 0x70, 0x60, 0xA9, 0xA1, 0xD0, 0xF5, 0x81,
	0xC9, 0x00, 0x00, 0x00, 0x75, 0xFD, 0xAA, 0x22, 0x17, 0x81, 0x49, 0x0F,
	0xDA, 0xA2, 0x08, 0x84, 0x04, 0xC7, 0x3C, 0xFB, 0x81, 0xE0, 0x4F, 0x5D,
	0xAD, 0x82, 0x80, 0x00, 0x69, 0xB8, 0x82, 0x5B, 0xCF, 0x1D, 0xB5, 0x82,
	0xBF, 0xCE, 0x82, 0x1E, 0x82, 0x45, 0x44, 0x7F, 0x32, 0x7F, 0x62, 0x44,
	0x5A, 0xD2, 0x83, 0x82, 0x14, 0x8A, 0x27, 0x80, 0x66, 0x7B, 0x21, 0x4D,
	0x20, 0xEB, 0xD0, 0xA5, 0x59, 0xC9, 0x87, 0x90, 0x10, 0xD0, 0x06, 0xA5,
	0x5A, 0xC9, 0xB3, 0x90, 0x08, 0xA5, 0x57, 0x10, 0x03, 0x4C, 0xA4, 0xDA,
	0x00, 0xA5, 0x59, 0xC9, 0x80, 0x90, 0x29, 0x20, 0x9A, 0xD8, 0x20, 0xE2,
	0xD8, 0xA5, 0x5D, 0x85, 0x6E, 0x20, 0x13, 0xD9, 0x20, 0x1C, 0xDE, 0x20,
	0x2C, 0xD8, 0xA9, 0x23, 0x85, 0x6F, 0xA9, 0xDE, 0x85, 0x70, 0x20, 0xE5,
	0xD1, 0xA5, 0x6E, 0x20, 0x51, 0xDE, 0x20, 0xA6, 0xDB, 0x4C, 0x45, 0xDA,
	0xA9, 0x28, 0xA0, 0xDE, 0x4C, 0x27, 0xDC, 0x82, 0x2D, 0xF8, 0x54, 0x58,
	0x07, 0x83, 0xE0, 0x20, 0x86, 0x5B, 0x82, 0x80, 0x53, 0x93, 0xB8, 0x83,
	0x20, 0x00, 0x06, 0xA1, 0x82, 0x00, 0x00, 0x21, 0x63, 0x82, 0xC0, 0x00,
	0x00, 0x02, 0x82, 0x80, 0x00, 0x00, 0x0C, 0x81, 0x00, 0x00, 0x00, 0x00,
	0x81, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x10, 0x09, 0xCA, 0x8A, 0x49, 0xFF,
	0x48, 0x20, 0xAE, 0xDA, 0x68, 0x48, 0x20, 0x31, 0xD8, 0x20, 0x8D, 0xDE,
	0x68, 0xF0, 0x0A, 0x38, 0xE9, 0x01, 0x48, 0x20, 0x45, 0xDA, 0x4C, 0x64,
	0xDE, 0x60, 0x20, 0xEB, 0xD0, 0xA5, 0x57, 0x10, 0x0A, 0xA9, 0x00, 0x85,
	0x57, 0x20, 0x83, 0xDE, 0x4C, 0xBF, 0xD1, 0xA5, 0x59, 0xC9, 0x81, 0x90,
	0x33, 0xC9, 0x85, 0x90, 0x0B, 0x20, 0xA4, 0xDA, 0xA0, 0x80, 0x84, 0x5A,
	0xC8, 0x84, 0x59, 0x60, 0xE6, 0x59, 0xA9, 0x80, 0x85, 0x57, 0x20, 0xD7,
	0xDD, 0x20, 0x31, 0xD8, 0x20, 0x8D, 0xDE, 0x20, 0x3C, 0xD9, 0x20, 0x27,
	0xD8, 0x20, 0x8D, 0xDE, 0x20, 0xAA, 0xDB, 0x20, 0x33, 0xD9, 0x20, 0xA2,
	0xDB, 0x4C, 0xDC, 0xDA, 0x20, 0x2C, 0xD8, 0x20, 0x8D, 0xDE, 0xC6, 0x59,
	0x20, 0x33, 0xD9, 0xA9, 0xD4, 0xA0, 0xDE, 0x20, 0x27, 0xDC, 0x20, 0xA6,
	0xDB, 0x4C, 0x45, 0xDA, 0x08, 0x7E, 0x85, 0x51, 0xB3, 0x0C, 0x86, 0xDE,
	0xB0, 0x7D, 0x73, 0x7C, 0x23, 0xD8, 0xE9, 0x9A, 0x87, 0x34, 0x82, 0x1D,
	0x80, 0x81, 0x9A, 0x20, 0x6C, 0xED, 0x81, 0xBD, 0x32, 0x34, 0x2E, 0x7F,
	0x5D, 0x46, 0x87, 0xB4, 0x82, 0x68, 0x3E, 0x43, 0xF7, 0x80, 0x6C, 0x9A,
	0x9E, 0xBB, 0x20, 0xC8, 0xC3, 0xA5, 0x52, 0x29, 0x03, 0xA8, 0xB9, 0x4E,
	0xDF, 0x8D, 0xFD, 0x03, 0xAD, 0x00, 0xB0, 0x29, 0xF0, 0xC9, 0x70, 0xD0,
	0x0C, 0xA9, 0x00, 0xA8, 0x99, 0x00, 0x86, 0x99, 0x00, 0x87, 0x88, 0xD0,
	0xF7, 0xAD, 0x00, 0xB0, 0x29, 0xDF, 0x8D, 0x00, 0xB0, 0x2A, 0x2A, 0x2A,
	0x29, 0x03, 0xA8, 0xB9, 0x42, 0xDF, 0x8D, 0xFE, 0x03, 0xB9, 0x46, 0xDF,
	0x8D, 0xFF, 0x03, 0x4C, 0x58, 0xC5, 0x52, 0x70, 0x88, 0xA0, 0xDF, 0xDF,
	0xDF, 0xDF, 0x3F, 0xCF, 0xF3, 0xFC, 0x00, 0x55, 0xAA, 0xFF, 0xA5, 0x5B,
	0x05, 0x5D, 0xD0, 0x47, 0xA5, 0x5A, 0xC9, 0x40, 0xB0, 0x41, 0x4A, 0x4A,
	0x85, 0x5F, 0xA0, 0x00, 0x84, 0x60, 0xA9, 0x3F, 0x38, 0xE5, 0x5C, 0xC9,
	0x40, 0x90, 0x4F, 0x60, 0xA5, 0x5B, 0x05, 0x5D, 0xD0, 0x29, 0xA5, 0x5A,
	0x30, 0x25, 0x4A, 0x4A, 0x85, 0x5F, 0xA9, 0x3F, 0x38, 0xE5, 0x5C, 0xC9,
	0x40, 0x90, 0x30, 0x60, 0xA5, 0x5B, 0x05, 0x5D, 0xD0, 0x11, 0xA5, 0x5A,
	0x30, 0x0D, 0x4A, 0x4A, 0x85, 0x5F, 0xA9, 0x5F, 0x38, 0xE5, 0x5C, 0xC9,
	0x60, 0x90, 0x18, 0x60, 0xA5, 0x5B, 0x05, 0x5D, 0xD0, 0xF9, 0xA5, 0x5A,
	0x30, 0xF5, 0x4A, 0x4A, 0x85, 0x5F, 0xA9, 0xBF, 0x38, 0xE5, 0x5C, 0xC9,
	0xC0, 0xB0, 0xE8, 0xA0, 0x00, 0x84, 0x60, 0x0A, 0x26, 0x60, 0x0A, 0x26,
	0x60, 0x0A, 0x26, 0x60, 0x0A, 0x26, 0x60, 0x0A, 0x26, 0x60, 0x65, 0x5F,
	0x85, 0x5F, 0xA5, 0x60, 0x69, 0x80, 0x85, 0x60, 0xA5, 0x5A, 0x29, 0x03,
	0xAA, 0xBD, 0x4A, 0xDF, 0xA6, 0x5E, 0xCA, 0xF0, 0x0F, 0xCA, 0xF0, 0x05,
	0x31, 0x5F, 0x91, 0x5F, 0x60, 0x49, 0xFF, 0x51, 0x5F, 0x91, 0x5F, 0x60,
	0xAA, 0x31, 0x5F, 0x91, 0x5F, 0x8A, 0x49, 0xFF, 0x2D, 0xFD, 0x03, 0x11,
	0x5F, 0x91, 0x5F, 0x60 }; */

/* C:\Users\LEENDERTBIJNAGTE\source\repos\Atombasic\Atombasic\roms\akernel.rom (8/28/2019 7:45:01 AM)
   StartOffset(h): 00000000, EndOffset(h): 00000FFF, Length(h): 00001000 

const unsigned char FrawData[4096] = {
	0x50, 0x4C, 0x4F, 0x54, 0xF5, 0x4E, 0x44, 0x52, 0x41, 0x57, 0xF5, 0x42,
	0x4D, 0x4F, 0x56, 0x45, 0xF5, 0x46, 0x43, 0x4C, 0x45, 0x41, 0x52, 0xF6,
	0x7B, 0x44, 0x49, 0x4D, 0xF0, 0xAE, 0x5B, 0xF2, 0xA1, 0x4F, 0x4C, 0x44,
	0xF5, 0x31, 0x57, 0x41, 0x49, 0x54, 0xF1, 0x4C, 0xC5, 0x50, 0xA4, 0x5E,
	0xB1, 0x05, 0xC9, 0x40, 0x90, 0x12, 0xC9, 0x5B, 0xB0, 0x0E, 0xC8, 0xD1,
	0x05, 0xD0, 0x09, 0x20, 0x8B, 0xF0, 0x20, 0x4F, 0xC9, 0x4C, 0x62, 0xC9,
	0x4C, 0x24, 0xCA, 0xA2, 0xFF, 0xA4, 0x5E, 0xC6, 0x5E, 0xB1, 0x05, 0xC9,
	0x40, 0x90, 0x09, 0xC9, 0x5B, 0xB0, 0x05, 0xC8, 0xD1, 0x05, 0xF0, 0x25,
	0xA4, 0x5E, 0xE8, 0xC8, 0xBD, 0x00, 0xF0, 0x30, 0x0C, 0xD1, 0x05, 0xF0,
	0xF5, 0xE8, 0xBD, 0xFF, 0xEF, 0x10, 0xFA, 0xD0, 0xEB, 0x85, 0x53, 0xBD,
	0x01, 0xF0, 0x85, 0x52, 0x84, 0x03, 0xA6, 0x04, 0xE6, 0x5E, 0x6C, 0x52,
	0x00, 0x20, 0x8B, 0xF0, 0x4C, 0xF1, 0xC3, 0xC8, 0x84, 0x03, 0xE9, 0x40,
	0x48, 0x20, 0xBC, 0xC8, 0x68, 0xA8, 0xB5, 0x15, 0x0A, 0x36, 0x24, 0x0A,
	0x36, 0x24, 0x18, 0x79, 0xEB, 0x02, 0x95, 0x15, 0xB5, 0x24, 0x79, 0x06,
	0x03, 0x95, 0x24, 0xB0, 0xD7, 0x60, 0xA5, 0x01, 0x05, 0x02, 0xF0, 0x22,
	0x20, 0x34, 0xC4, 0x90, 0x1E, 0x20, 0xBC, 0xC8, 0xCA, 0xCA, 0x86, 0x04,
	0xB4, 0x16, 0x38, 0xA5, 0x23, 0x99, 0x21, 0x03, 0x75, 0x17, 0x85, 0x23,
	0xA5, 0x24, 0x99, 0x3C, 0x03, 0x75, 0x26, 0x4C, 0x19, 0xF1, 0x00, 0xA4,
	0x03, 0xB1, 0x05, 0xC9, 0x40, 0x90, 0xF7, 0xC9, 0x5B, 0xB0, 0xF3, 0xC8,
	0xD1, 0x05, 0xD0, 0xEE, 0xE9, 0x40, 0x48, 0xC8, 0x84, 0x03, 0x20, 0xBC,
	0xC8, 0x68, 0xA8, 0xA5, 0x23, 0x99, 0xEB, 0x02, 0xA5, 0x24, 0x99, 0x06,
	0x03, 0xCA, 0x86, 0x04, 0xB4, 0x16, 0xC8, 0xD0, 0x02, 0xF6, 0x25, 0x98,
	0x0A, 0x36, 0x25, 0x0A, 0x36, 0x25, 0x18, 0x65, 0x23, 0x85, 0x23, 0xB5,
	0x25, 0x65, 0x24, 0xB0, 0xBD, 0x85, 0x24, 0xA0, 0x00, 0xA9, 0xAA, 0x91,
	0x23, 0xD1, 0x23, 0xD0, 0xF7, 0x4A, 0x91, 0x23, 0xD1, 0x23, 0xD0, 0xF0,
	0x20, 0x34, 0xC4, 0xB0, 0xA5, 0xA4, 0x03, 0xB1, 0x05, 0xC9, 0x2C, 0xD0,
	0x05, 0xE6, 0x03, 0x4C, 0xAE, 0xF0, 0x4C, 0x58, 0xC5, 0xA5, 0x0D, 0x85,
	0x23, 0xA5, 0x0E, 0x85, 0x24, 0x4C, 0x83, 0xCE, 0x20, 0xE4, 0xC4, 0x20,
	0x66, 0xFE, 0x4C, 0x5B, 0xC5, 0x1C, 0x8A, 0x1C, 0x23, 0x5D, 0x8B, 0x1B,
	0xA1, 0x9D, 0x8A, 0x1D, 0x23, 0x9D, 0x8B, 0x1D, 0xA1, 0x00, 0x29, 0x19,
	0xAE, 0x69, 0xA8, 0x19, 0x23, 0x24, 0x53, 0x1B, 0x23, 0x24, 0x53, 0x19,
	0xA1, 0x00, 0x1A, 0x5B, 0x5B, 0xA5, 0x69, 0x24, 0x24, 0xAE, 0xAE, 0xA8,
	0xAD, 0x29, 0x00, 0x7C, 0x00, 0x15, 0x9C, 0x6D, 0x9C, 0xA5, 0x69, 0x29,
	0x53, 0x84, 0x13, 0x34, 0x11, 0xA5, 0x69, 0x23, 0xA0, 0xD8, 0x62, 0x5A,
	0x48, 0x26, 0x62, 0x94, 0x88, 0x54, 0x44, 0xC8, 0x54, 0x68, 0x44, 0xE8,
	0x94, 0x00, 0xB4, 0x08, 0x84, 0x74, 0xB4, 0x28, 0x6E, 0x74, 0xF4, 0xCC,
	0x4A, 0x72, 0xF2, 0xA4, 0x8A, 0x00, 0xAA, 0xA2, 0xA2, 0x74, 0x74, 0x74,
	0x72, 0x44, 0x68, 0xB2, 0x32, 0xB2, 0x00, 0x22, 0x00, 0x1A, 0x1A, 0x26,
	0x26, 0x72, 0x72, 0x88, 0xC8, 0xC4, 0xCA, 0x26, 0x48, 0x44, 0x44, 0xA2,
	0xC8, 0x00, 0x02, 0x00, 0x08, 0xF2, 0xFF, 0x80, 0x01, 0xC0, 0xE2, 0xC0,
	0xC0, 0xFF, 0x00, 0x00, 0x08, 0x00, 0x10, 0x80, 0x40, 0xC0, 0x00, 0xC0,
	0x00, 0x40, 0x00, 0x00, 0xE4, 0x20, 0x80, 0x00, 0xFC, 0x00, 0x08, 0x08,
	0xF8, 0xFC, 0xF4, 0x0C, 0x10, 0x04, 0xF4, 0x00, 0x20, 0x10, 0x00, 0x00,
	0x0F, 0x01, 0x01, 0x01, 0x11, 0x11, 0x02, 0x02, 0x11, 0x11, 0x02, 0x12,
	0x02, 0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50,
	0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0,
	0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x0C, 0x2C, 0x4C,
	0x4C, 0x8C, 0xAC, 0xCC, 0xEC, 0x8A, 0x9A, 0xAA, 0xBA, 0xCA, 0xDA, 0xEA,
	0xFA, 0x0E, 0x2E, 0x4E, 0x6E, 0x8E, 0xAE, 0xCE, 0xEE, 0x0D, 0x2D, 0x4D,
	0x6D, 0x8D, 0xAD, 0xCD, 0xED, 0x0D, 0x0D, 0x0C, 0x0D, 0x0E, 0x0D, 0x0C,
	0x0D, 0x0D, 0x0D, 0x0C, 0x0D, 0x0D, 0x0D, 0x0C, 0x0D, 0x0F, 0x0D, 0x0C,
	0x0D, 0x09, 0x0D, 0x0C, 0x0D, 0x08, 0x0D, 0x0C, 0x0D, 0x08, 0x0D, 0x0C,
	0x0D, 0x0F, 0x06, 0x0B, 0x0B, 0x04, 0x0A, 0x08, 0x08, 0x0D, 0x0D, 0x0D,
	0x0D, 0x0D, 0x0F, 0x0D, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x05, 0x09, 0x03,
	0x03, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0xA4, 0x03, 0xB1,
	0x05, 0xE6, 0x03, 0xC9, 0x20, 0xF0, 0xF6, 0x60, 0xE6, 0x03, 0x4C, 0x1B,
	0xC3, 0xB1, 0x05, 0xC9, 0x5D, 0xF0, 0xF5, 0x20, 0xF6, 0xC4, 0xC6, 0x03,
	0x20, 0x8E, 0xF3, 0xC6, 0x03, 0xA5, 0x52, 0x48, 0xA5, 0x53, 0x48, 0xAD,
	0x21, 0x03, 0x48, 0xA9, 0x00, 0x85, 0x34, 0x85, 0x43, 0xA9, 0x05, 0x8D,
	0x21, 0x03, 0xA5, 0x01, 0x85, 0x16, 0xA5, 0x02, 0x85, 0x25, 0x20, 0x89,
	0xC5, 0x20, 0x79, 0xF3, 0x68, 0x8D, 0x21, 0x03, 0x68, 0x20, 0x7E, 0xF3,
	0x68, 0x20, 0x76, 0xF3, 0xA0, 0x00, 0xC4, 0x00, 0xF0, 0x09, 0xB9, 0x66,
	0x00, 0x20, 0x76, 0xF3, 0xC8, 0xD0, 0xF3, 0xC0, 0x03, 0xF0, 0x0C, 0x20,
	0x79, 0xF3, 0x20, 0x4C, 0xCA, 0x20, 0x4C, 0xCA, 0xC8, 0xD0, 0xF0, 0xA0,
	0x00, 0xB1, 0x05, 0xC9, 0x3B, 0xF0, 0x0A, 0xC9, 0x0D, 0xF0, 0x06, 0x20,
	0x4C, 0xCA, 0xC8, 0xD0, 0xF0, 0x20, 0x54, 0xCD, 0x20, 0xE4, 0xC4, 0x88,
	0xB1, 0x05, 0xC8, 0xC9, 0x3B, 0xF0, 0x0C, 0xA5, 0x06, 0xC9, 0x01, 0xD0,
	0x03, 0x4C, 0xCF, 0xC2, 0x20, 0x1D, 0xC5, 0x4C, 0xA1, 0xF2, 0x20, 0x91,
	0xF2, 0x85, 0x66, 0x20, 0x91, 0xF2, 0xC5, 0x66, 0xD0, 0x10, 0xC9, 0x40,
	0x90, 0x0C, 0xC9, 0x5B, 0xB0, 0x08, 0x38, 0x20, 0x8E, 0xF0, 0x20, 0xCB,
	0xC3, 0xA0, 0x00, 0xAD, 0x31, 0x03, 0x91, 0x52, 0xAD, 0x4C, 0x03, 0xC8,
	0x91, 0x52, 0xA9, 0x00, 0xC8, 0x91, 0x52, 0xC8, 0x91, 0x52, 0xD0, 0x36,
	0x20, 0x91, 0xF2, 0xC9, 0x3B, 0xF0, 0x04, 0xC9, 0x0D, 0xD0, 0xF5, 0xAD,
	0x31, 0x03, 0x85, 0x52, 0xAD, 0x4C, 0x03, 0x85, 0x53, 0x60, 0x20, 0x7E,
	0xF3, 0xA9, 0x20, 0x4C, 0x4C, 0xCA, 0xA2, 0xFF, 0x48, 0x4A, 0x4A, 0x4A,
	0x4A, 0x20, 0xF9, 0xC5, 0x68, 0x29, 0x0F, 0x4C, 0xF9, 0xC5, 0xA2, 0x00,
	0x86, 0x00, 0x86, 0x64, 0x86, 0x65, 0x20, 0x91, 0xF2, 0xC9, 0x3A, 0xF0,
	0x91, 0xC9, 0x3B, 0xF0, 0xCA, 0xC9, 0x0D, 0xF0, 0xC6, 0xC9, 0x5C, 0xF0,
	0xB7, 0xA0, 0x05, 0x38, 0x69, 0x00, 0x0A, 0x0A, 0x0A, 0x0A, 0x26, 0x6A,
	0x26, 0x69, 0x88, 0xD0, 0xF8, 0xE8, 0xE0, 0x03, 0xD0, 0xD8, 0x06, 0x6A,
	0x26, 0x69, 0xA2, 0x40, 0xA5, 0x69, 0xDD, 0x54, 0xF1, 0xF0, 0x04, 0xCA,
	0xD0, 0xF8, 0x00, 0xBC, 0x94, 0xF1, 0xC4, 0x6A, 0xD0, 0xF5, 0xBD, 0x10,
	0xF2, 0x85, 0x66, 0xBC, 0x50, 0xF2, 0x84, 0x0F, 0x66, 0x64, 0x66, 0x65,
	0x88, 0xD0, 0xF9, 0xA4, 0x0F, 0xC0, 0x0D, 0xD0, 0x05, 0xA2, 0x00, 0x4C,
	0x9B, 0xF4, 0x20, 0x91, 0xF2, 0xC9, 0x40, 0xF0, 0x5B, 0xC9, 0x28, 0xF0,
	0x65, 0xA2, 0x01, 0xC9, 0x41, 0xF0, 0xEC, 0xC6, 0x03, 0x20, 0x8B, 0xC7,
	0x20, 0x91, 0xF2, 0xC9, 0x2C, 0xD0, 0x31, 0x20, 0x91, 0xF2, 0xA4, 0x25,
	0xF0, 0x15, 0xA2, 0x09, 0xC9, 0x58, 0xF0, 0x7F, 0xCA, 0xC9, 0x59, 0xD0,
	0x79, 0xA5, 0x0F, 0xC9, 0x09, 0xD0, 0x74, 0xA2, 0x0E, 0xD0, 0x70, 0xA2,
	0x04, 0xC9, 0x58, 0xF0, 0x6A, 0xC9, 0x59, 0xD0, 0x65, 0xCA, 0xA4, 0x0F,
	0xC0, 0x03, 0xB0, 0x5F, 0xA2, 0x08, 0xD0, 0x5B, 0xC6, 0x03, 0xA2, 0x02,
	0xA4, 0x0F, 0xC0, 0x0C, 0xF0, 0x51, 0xA2, 0x05, 0xA5, 0x25, 0xF0, 0x4B,
	0xA2, 0x0C, 0xD0, 0x47, 0x20, 0x8B, 0xC7, 0xA5, 0x0F, 0xA2, 0x06, 0xC9,
	0x01, 0xF0, 0x3C, 0xE8, 0xD0, 0x39, 0x20, 0x8B, 0xC7, 0x20, 0x91, 0xF2,
	0xC9, 0x29, 0xF0, 0x16, 0xC9, 0x2C, 0xD0, 0x2A, 0x20, 0x91, 0xF2, 0xC9,
	0x58, 0xD0, 0x23, 0x20, 0x91, 0xF2, 0xC9, 0x29, 0xD0, 0x1C, 0xA2, 0x0B,
	0xD0, 0x19, 0xA2, 0x0D, 0xA5, 0x0F, 0xC9, 0x0B, 0xF0, 0x11, 0xA2, 0x0A,
	0x20, 0x91, 0xF2, 0xC9, 0x2C, 0xD0, 0x07, 0x20, 0x91, 0xF2, 0xC9, 0x59,
	0xF0, 0x01, 0x00, 0x20, 0x60, 0xF3, 0xBD, 0xD5, 0xF1, 0xF0, 0x04, 0x25,
	0x64, 0xD0, 0x07, 0xBD, 0xE4, 0xF1, 0x25, 0x65, 0xF0, 0xEC, 0x18, 0xBD,
	0xF3, 0xF1, 0x65, 0x66, 0x85, 0x66, 0xBD, 0x02, 0xF2, 0xA2, 0x00, 0x86,
	0x04, 0xA4, 0x16, 0x84, 0x67, 0xA4, 0x25, 0x84, 0x68, 0xC9, 0x0F, 0xF0,
	0x23, 0x29, 0x0F, 0xA8, 0xC8, 0x84, 0x00, 0xC0, 0x02, 0xD0, 0x04, 0xA4,
	0x68, 0xD0, 0xC3, 0xA0, 0x00, 0xB9, 0x66, 0x00, 0x91, 0x52, 0xC8, 0xEE,
	0x31, 0x03, 0xD0, 0x03, 0xEE, 0x4C, 0x03, 0xC4, 0x00, 0xD0, 0xEE, 0x60,
	0xA9, 0x02, 0x85, 0x00, 0x38, 0xA5, 0x67, 0xED, 0x31, 0x03, 0x85, 0x67,
	0xA5, 0x68, 0xED, 0x4C, 0x03, 0x85, 0x68, 0x38, 0xA5, 0x67, 0xE9, 0x02,
	0x85, 0x67, 0xA8, 0xA5, 0x68, 0xE9, 0x00, 0xF0, 0x1F, 0xC9, 0xFF, 0xF0,
	0x16, 0x20, 0xD1, 0xF7, 0x4F, 0x55, 0x54, 0x20, 0x4F, 0x46, 0x20, 0x52,
	0x41, 0x4E, 0x47, 0x45, 0x3A, 0x0A, 0x0D, 0x84, 0x67, 0x30, 0xB0, 0x98,
	0x30, 0xAD, 0x10, 0xE5, 0x98, 0x10, 0xA8, 0x30, 0xE0, 0x20, 0xE4, 0xC4,
	0x88, 0x84, 0x52, 0xA5, 0x12, 0x85, 0x53, 0x98, 0xC8, 0x91, 0x52, 0x4C,
	0x9B, 0xCD, 0xA2, 0x05, 0xD0, 0x02, 0xA2, 0x0C, 0x86, 0x16, 0xE6, 0x04,
	0xD0, 0x06, 0x20, 0xBC, 0xC8, 0x20, 0x31, 0xC2, 0x20, 0xBC, 0xC8, 0x20,
	0x31, 0xC2, 0x20, 0xBC, 0xC8, 0x20, 0xE4, 0xC4, 0xB5, 0x15, 0x85, 0x5C,
	0xB5, 0x24, 0x85, 0x5D, 0xB5, 0x14, 0x85, 0x5A, 0xB5, 0x23, 0x85, 0x5B,
	0xA2, 0x00, 0x86, 0x04, 0xA2, 0x03, 0xBD, 0xC1, 0x03, 0x95, 0x52, 0xCA,
	0x10, 0xF8, 0xA5, 0x16, 0x29, 0x04, 0xD0, 0x13, 0xA2, 0x02, 0x18, 0xB5,
	0x5A, 0x75, 0x52, 0x95, 0x5A, 0xB5, 0x5B, 0x75, 0x53, 0x95, 0x5B, 0xCA,
	0xCA, 0x10, 0xEF, 0xA2, 0x03, 0xB5, 0x5A, 0x9D, 0xC1, 0x03, 0xCA, 0x10,
	0xF8, 0xA5, 0x16, 0x29, 0x03, 0xF0, 0x0B, 0x85, 0x5E, 0xA5, 0x16, 0x29,
	0x08, 0xF0, 0x06, 0x20, 0x78, 0xF6, 0x4C, 0x5B, 0xC5, 0xA2, 0x02, 0x38,
	0xB5, 0x5A, 0xF5, 0x52, 0xB4, 0x52, 0x94, 0x5A, 0x95, 0x52, 0xB4, 0x53,
	0xB5, 0x5B, 0xF5, 0x53, 0x94, 0x5B, 0x95, 0x53, 0x95, 0x56, 0x10, 0x0D,
	0xA9, 0x00, 0x38, 0xF5, 0x52, 0x95, 0x52, 0xA9, 0x00, 0xF5, 0x53, 0x95,
	0x53, 0xCA, 0xCA, 0x10, 0xD6, 0xA5, 0x54, 0xC5, 0x52, 0xA5, 0x55, 0xE5,
	0x53, 0x90, 0x31, 0xA9, 0x00, 0xE5, 0x54, 0x85, 0x57, 0xA9, 0x00, 0xE5,
	0x55, 0x38, 0x6A, 0x85, 0x59, 0x66, 0x57, 0x20, 0x78, 0xF6, 0xA5, 0x5C,
	0xCD, 0xC3, 0x03, 0xD0, 0x0A, 0xA5, 0x5D, 0xCD, 0xC4, 0x03, 0xD0, 0x03,
	0x4C, 0x5B, 0xC5, 0x20, 0x55, 0xF6, 0xA5, 0x59, 0x30, 0xE5, 0x20, 0x44,
	0xF6, 0x4C, 0xFB, 0xF5, 0xA5, 0x53, 0x4A, 0x85, 0x59, 0xA5, 0x52, 0x6A,
	0x85, 0x57, 0x20, 0x78, 0xF6, 0xA5, 0x5A, 0xCD, 0xC1, 0x03, 0xD0, 0x07,
	0xA5, 0x5B, 0xCD, 0xC2, 0x03, 0xF0, 0xD5, 0x20, 0x44, 0xF6, 0xA5, 0x59,
	0x10, 0xE8, 0x20, 0x55, 0xF6, 0x4C, 0x26, 0xF6, 0x38, 0xA5, 0x57, 0xE5,
	0x54, 0x85, 0x57, 0xA5, 0x59, 0xE5, 0x55, 0x85, 0x59, 0xA2, 0x00, 0xF0,
	0x0F, 0x18, 0xA5, 0x57, 0x65, 0x52, 0x85, 0x57, 0xA5, 0x59, 0x65, 0x53,
	0x85, 0x59, 0xA2, 0x02, 0xB5, 0x56, 0x10, 0x09, 0xB5, 0x5A, 0xD0, 0x02,
	0xD6, 0x5B, 0xD6, 0x5A, 0x60, 0xF6, 0x5A, 0xD0, 0xFB, 0xF6, 0x5B, 0x60,
	0x6C, 0xFE, 0x03, 0x20, 0xC8, 0xC3, 0xA0, 0x00, 0xA5, 0x52, 0xF0, 0x3E,
	0xC9, 0x05, 0x90, 0x02, 0xA9, 0x04, 0xA2, 0x80, 0x86, 0x54, 0x84, 0x53,
	0x85, 0x52, 0xAA, 0xBD, 0xCE, 0xF6, 0xA6, 0x12, 0x10, 0x04, 0xC5, 0x12,
	0xB0, 0xE1, 0xAA, 0x98, 0x91, 0x53, 0x88, 0xD0, 0xFB, 0xE6, 0x54, 0xE4,
	0x54, 0xD0, 0xF5, 0xA4, 0x52, 0xB9, 0xD8, 0xF6, 0x8D, 0xFF, 0x03, 0xB9,
	0xD3, 0xF6, 0x8D, 0xFE, 0x03, 0xB9, 0xDD, 0xF6, 0x8D, 0x00, 0xB0, 0x4C,
	0x58, 0xC5, 0xA9, 0x40, 0x99, 0x00, 0x80, 0x99, 0x00, 0x81, 0x88, 0xD0,
	0xF7, 0xF0, 0xDC, 0x84, 0x86, 0x8C, 0x98, 0xE2, 0x3B, 0x54, 0x6D, 0xAA,
	0xF6, 0xF7, 0xF7, 0xF7, 0xF7, 0x00, 0x30, 0x70, 0xB0, 0xF0, 0xA5, 0x5B,
	0x05, 0x5D, 0xD0, 0x52, 0xA5, 0x5A, 0xC9, 0x40, 0xB0, 0x4C, 0x4A, 0x85,
	0x5F, 0xA9, 0x2F, 0x38, 0xE5, 0x5C, 0xC9, 0x30, 0xB0, 0x40, 0xA2, 0xFF,
	0x38, 0xE8, 0xE9, 0x03, 0xB0, 0xFB, 0x69, 0x03, 0x85, 0x61, 0x8A, 0x0A,
	0x0A, 0x0A, 0x0A, 0x0A, 0x05, 0x5F, 0x85, 0x5F, 0xA9, 0x80, 0x69, 0x00,
	0x85, 0x60, 0xA5, 0x5A, 0x4A, 0xA5, 0x61, 0x2A, 0xA8, 0xB9, 0xCB, 0xF7,
	0xA0, 0x00, 0xA6, 0x5E, 0xCA, 0xF0, 0x0F, 0xCA, 0xF0, 0x07, 0x49, 0xFF,
	0x31, 0x5F, 0x91, 0x5F, 0x60, 0x51, 0x5F, 0x91, 0x5F, 0x60, 0x11, 0x5F,
	0x91, 0x5F, 0x60, 0xA5, 0x5B, 0x05, 0x5D, 0xD0, 0xF9, 0xA5, 0x5A, 0x30,
	0xF5, 0x4A, 0x4A, 0x4A, 0x85, 0x5F, 0xA9, 0x3F, 0x38, 0xE5, 0x5C, 0xC9,
	0x40, 0x90, 0x32, 0x60, 0xA5, 0x5B, 0x05, 0x5D, 0xD0, 0xE0, 0xA5, 0x5A,
	0x30, 0xDC, 0x4A, 0x4A, 0x4A, 0x85, 0x5F, 0xA9, 0x5F, 0x38, 0xE5, 0x5C,
	0xC9, 0x60, 0x90, 0x19, 0x60, 0xA5, 0x5B, 0x05, 0x5D, 0xD0, 0xC7, 0xA5,
	0x5A, 0x30, 0xC3, 0x4A, 0x4A, 0x4A, 0x85, 0x5F, 0xA9, 0xBF, 0x38, 0xE5,
	0x5C, 0xC9, 0xC0, 0xB0, 0xB5, 0xA0, 0x00, 0x84, 0x60, 0x0A, 0x26, 0x60,
	0x0A, 0x26, 0x60, 0x0A, 0x26, 0x60, 0x0A, 0x26, 0x60, 0x65, 0x5F, 0x85,
	0x5F, 0xA5, 0x60, 0x69, 0x80, 0x85, 0x60, 0xA5, 0x5A, 0x29, 0x07, 0xA8,
	0xB9, 0xC9, 0xF7, 0x4C, 0x20, 0xF7, 0xA5, 0x5B, 0x05, 0x5D, 0xD0, 0xBC,
	0xA5, 0x5A, 0x4A, 0x4A, 0x4A, 0x85, 0x5F, 0xA9, 0xBF, 0x38, 0xE5, 0x5C,
	0xC9, 0xC0, 0xB0, 0xAC, 0xA0, 0x00, 0x84, 0x60, 0x0A, 0x26, 0x60, 0x10,
	0xC0, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x68, 0x85, 0xE8,
	0x68, 0x85, 0xE9, 0xA0, 0x00, 0xE6, 0xE8, 0xD0, 0x02, 0xE6, 0xE9, 0xB1,
	0xE8, 0x30, 0x06, 0x20, 0xF4, 0xFF, 0x4C, 0xD7, 0xF7, 0x6C, 0xE8, 0x00,
	0xA2, 0xD4, 0x20, 0xF1, 0xF7, 0xB5, 0x01, 0x20, 0x02, 0xF8, 0xE8, 0xE8,
	0xB5, 0xFE, 0x20, 0x02, 0xF8, 0xA9, 0x20, 0x4C, 0xF4, 0xFF, 0x48, 0x4A,
	0x4A, 0x4A, 0x4A, 0x20, 0x0B, 0xF8, 0x68, 0x29, 0x0F, 0xC9, 0x0A, 0x90,
	0x02, 0x69, 0x06, 0x69, 0x30, 0x4C, 0xF4, 0xFF, 0x20, 0x76, 0xF8, 0xA2,
	0x00, 0xC9, 0x22, 0xF0, 0x06, 0xE8, 0xD0, 0x1B, 0x4C, 0x7D, 0xFA, 0xC8,
	0xB9, 0x00, 0x01, 0xC9, 0x0D, 0xF0, 0xF5, 0x9D, 0x40, 0x01, 0xE8, 0xC9,
	0x22, 0xD0, 0xF0, 0xC8, 0xB9, 0x00, 0x01, 0xC9, 0x22, 0xF0, 0xE8, 0xA9,
	0x0D, 0x9D, 0x3F, 0x01, 0xA9, 0x40, 0x85, 0xC9, 0xA9, 0x01, 0x85, 0xCA,
	0xA2, 0xC9, 0x60, 0xA0, 0x00, 0xB5, 0x00, 0x99, 0xC9, 0x00, 0xE8, 0xC8,
	0xC0, 0x0A, 0x90, 0xF5, 0xA0, 0xFF, 0xA9, 0x0D, 0xC8, 0xC0, 0x0E, 0xB0,
	0x07, 0xD1, 0xC9, 0xD0, 0xF7, 0xC0, 0x00, 0x60, 0x20, 0xD1, 0xF7, 0x4E,
	0x41, 0x4D, 0x45, 0xEA, 0x00, 0xC8, 0xB9, 0x00, 0x01, 0xC9, 0x20, 0xF0,
	0xF8, 0x60, 0xC9, 0x30, 0x90, 0x0F, 0xC9, 0x3A, 0x90, 0x08, 0xE9, 0x07,
	0x90, 0x07, 0xC9, 0x40, 0xB0, 0x02, 0x29, 0x0F, 0x60, 0x38, 0x60, 0xA9,
	0x00, 0x95, 0x00, 0x95, 0x01, 0x95, 0x02, 0x20, 0x76, 0xF8, 0xB9, 0x00,
	0x01, 0x20, 0x7E, 0xF8, 0xB0, 0x15, 0x0A, 0x0A, 0x0A, 0x0A, 0x94, 0x02,
	0xA0, 0x04, 0x0A, 0x36, 0x00, 0x36, 0x01, 0x88, 0xD0, 0xF8, 0xB4, 0x02,
	0xC8, 0xD0, 0xE3, 0xB5, 0x02, 0x60, 0x43, 0x41, 0x54, 0xFA, 0x2A, 0x4C,
	0x4F, 0x41, 0x44, 0xF9, 0x58, 0x53, 0x41, 0x56, 0x45, 0xFA, 0xBB, 0x52,
	0x55, 0x4E, 0xFA, 0x20, 0x4D, 0x4F, 0x4E, 0xFA, 0x1A, 0x4E, 0x4F, 0x4D,
	0x4F, 0x4E, 0xFA, 0x19, 0x46, 0x4C, 0x4F, 0x41, 0x44, 0xF9, 0x55, 0x44,
	0x4F, 0x53, 0x0D, 0xE0, 0x00, 0xF9, 0x26, 0xA2, 0xFF, 0xD8, 0xA0, 0x00,
	0x84, 0xDD, 0x20, 0x76, 0xF8, 0x88, 0xC8, 0xE8, 0xBD, 0xBE, 0xF8, 0x30,
	0x18, 0xD9, 0x00, 0x01, 0xF0, 0xF4, 0xCA, 0xE8, 0xBD, 0xBE, 0xF8, 0x10,
	0xFA, 0xE8, 0xB9, 0x00, 0x01, 0xC9, 0x2E, 0xD0, 0xDD, 0xC8, 0xCA, 0xB0,
	0xE3, 0x85, 0xCA, 0xBD, 0xBF, 0xF8, 0x85, 0xC9, 0x18, 0xA2, 0x00, 0x6C,
	0xC9, 0x00, 0x20, 0xD1, 0xF7, 0x43, 0x4F, 0x4D, 0x3F, 0xEA, 0x00, 0x20,
	0x8E, 0xFB, 0x50, 0xFA, 0xF0, 0xF9, 0x20, 0x2B, 0xFC, 0xA0, 0x00, 0x20,
	0xD4, 0xFF, 0x91, 0xCB, 0xE6, 0xCB, 0xD0, 0x02, 0xE6, 0xCC, 0xA2, 0xD4,
	0x20, 0x08, 0xFA, 0xD0, 0xEE, 0x38, 0x66, 0xDD, 0x18, 0x66, 0xDD, 0x28,
	0x60, 0x38, 0x66, 0xDD, 0x20, 0x18, 0xF8, 0xA2, 0xCB, 0x20, 0x93, 0xF8,
	0xF0, 0x04, 0xA9, 0xFF, 0x85, 0xCD, 0x20, 0x76, 0xFA, 0xA2, 0xC9, 0x6C,
	0x0C, 0x02, 0x08, 0x78, 0x20, 0x4F, 0xF8, 0x08, 0x20, 0x3E, 0xFC, 0x28,
	0xF0, 0xB5, 0xA9, 0x00, 0x85, 0xD0, 0x85, 0xD1, 0x20, 0xA2, 0xF9, 0x90,
	0xC9, 0xE6, 0xD0, 0xE6, 0xCC, 0xD0, 0xF5, 0x18, 0x90, 0xC0, 0x20, 0xF4,
	0xFF, 0xC8, 0xB9, 0xED, 0x00, 0xC9, 0x0D, 0xD0, 0xF5, 0xC8, 0x20, 0xFD,
	0xF7, 0xC0, 0x0E, 0x90, 0xF8, 0x60, 0xA9, 0x00, 0x85, 0xDC, 0x20, 0x8E,
	0xFB, 0x50, 0xF8, 0xD0, 0xF5, 0x20, 0xC9, 0xFB, 0x08, 0x20, 0xE2, 0xFB,
	0x28, 0xF0, 0x10, 0xA5, 0xDB, 0x29, 0x20, 0x05, 0xEA, 0xD0, 0xE3, 0x20,
	0x92, 0xF9, 0x20, 0xED, 0xFF, 0xD0, 0xDB, 0xA2, 0x02, 0xA5, 0xDD, 0x30,
	0x13, 0xB5, 0xCF, 0xD5, 0xD8, 0xB0, 0x08, 0xA9, 0x05, 0x20, 0x40, 0xFC,
	0x20, 0x3E, 0xFC, 0xD0, 0xC5, 0xCA, 0xD0, 0xED, 0x20, 0x2B, 0xFC, 0x24,
	0xDB, 0x50, 0x0B, 0x88, 0xC8, 0x20, 0xD4, 0xFF, 0x91, 0xCB, 0xC4, 0xD8,
	0xD0, 0xF6, 0xA5, 0xDC, 0x85, 0xCE, 0x20, 0xD4, 0xFF, 0xC5, 0xCE, 0xF0,
	0x08, 0x20, 0xD1, 0xF7, 0x53, 0x55, 0x4D, 0xEA, 0x00, 0x26, 0xDB, 0x60,
	0xF6, 0x00, 0xD0, 0x02, 0xF6, 0x01, 0xB5, 0x00, 0xD5, 0x02, 0xD0, 0x04,
	0xB5, 0x01, 0xD5, 0x03, 0x60, 0xCA, 0x20, 0x76, 0xFA, 0x86, 0xEA, 0x60,
	0x20, 0x58, 0xF9, 0x24, 0xDD, 0x70, 0x4C, 0x6C, 0xD6, 0x00, 0x08, 0x20,
	0x76, 0xFA, 0x20, 0x3E, 0xFC, 0x20, 0x8E, 0xFB, 0x70, 0x02, 0x28, 0x60,
	0xF0, 0x0A, 0xA0, 0x00, 0x20, 0x99, 0xF9, 0x20, 0xEC, 0xF7, 0xD0, 0x19,
	0x20, 0xC9, 0xFB, 0x20, 0xE2, 0xFB, 0x20, 0x92, 0xF9, 0x20, 0xEC, 0xF7,
	0x26, 0xDB, 0x10, 0x09, 0xE8, 0x20, 0xF1, 0xF7, 0xB5, 0xFD, 0x20, 0x02,
	0xF8, 0x20, 0xED, 0xFF, 0xD0, 0xCF, 0x4C, 0xED, 0xFF, 0x20, 0x93, 0xF8,
	0xF0, 0x13, 0x60, 0xA2, 0xCB, 0x20, 0x65, 0xFA, 0x20, 0x76, 0xFA, 0x6C,
	0xCB, 0x00, 0x20, 0x76, 0xF8, 0xC9, 0x0D, 0xF0, 0xA2, 0x20, 0xD1, 0xF7,
	0x53, 0x59, 0x4E, 0x3F, 0xEA, 0x00, 0x38, 0xA5, 0xD1, 0xE5, 0xCF, 0x48,
	0xA5, 0xD2, 0xE5, 0xD0, 0xA8, 0x68, 0x18, 0x65, 0xCB, 0x85, 0xCD, 0x98,
	0x65, 0xCC, 0x85, 0xCE, 0xA0, 0x04, 0xB9, 0xCA, 0x00, 0x20, 0xD1, 0xFF,
	0x88, 0xD0, 0xF7, 0xB1, 0xCF, 0x20, 0xD1, 0xFF, 0xE6, 0xCF, 0xD0, 0x02,
	0xE6, 0xD0, 0xA2, 0xCB, 0x20, 0x08, 0xFA, 0xD0, 0xEE, 0x28, 0x60, 0x20,
	0x18, 0xF8, 0xA2, 0xCB, 0x20, 0x65, 0xFA, 0xA2, 0xD1, 0x20, 0x65, 0xFA,
	0xA2, 0xCD, 0x20, 0x93, 0xF8, 0x08, 0xA5, 0xCB, 0xA6, 0xCC, 0x28, 0xD0,
	0x04, 0x85, 0xCD, 0x86, 0xCE, 0x85, 0xCF, 0x86, 0xD0, 0x20, 0x76, 0xFA,
	0xA2, 0xC9, 0x6C, 0x0E, 0x02, 0x08, 0x78, 0x20, 0x4F, 0xF8, 0x08, 0xA9,
	0x06, 0x20, 0x40, 0xFC, 0xA2, 0x07, 0x20, 0x7A, 0xFB, 0x28, 0xF0, 0x8E,
	0xA2, 0x04, 0xB5, 0xCE, 0x95, 0xD2, 0xCA, 0xD0, 0xF9, 0x86, 0xD0, 0x86,
	0xD1, 0xA5, 0xD5, 0xD0, 0x02, 0xC6, 0xD6, 0xC6, 0xD5, 0x18, 0x66, 0xD2,
	0x38, 0xA2, 0xFF, 0xA5, 0xD5, 0xE5, 0xD3, 0x85, 0xCF, 0xA5, 0xD6, 0xE5,
	0xD4, 0x08, 0x66, 0xD2, 0x28, 0x90, 0x06, 0x18, 0xF0, 0x03, 0x86, 0xCF,
	0x38, 0x66, 0xD2, 0xE8, 0x20, 0x3B, 0xFB, 0xE6, 0xD0, 0xE6, 0xD4, 0xE6,
	0xCC, 0x26, 0xD2, 0xB0, 0xD5, 0x28, 0x60, 0xA2, 0x07, 0x20, 0x7A, 0xFB,
	0x86, 0xDC, 0xA0, 0x04, 0xA9, 0x2A, 0x20, 0xD1, 0xFF, 0x88, 0xD0, 0xF8,
	0xB1, 0xC9, 0x20, 0xD1, 0xFF, 0xC8, 0xC9, 0x0D, 0xD0, 0xF6, 0xA0, 0x08,
	0xB9, 0xCA, 0x00, 0x20, 0xD1, 0xFF, 0x88, 0xD0, 0xF7, 0x20, 0x81, 0xFB,
	0x24, 0xD2, 0x50, 0x0B, 0x88, 0xC8, 0xB1, 0xD3, 0x20, 0xD1, 0xFF, 0xC4,
	0xCF, 0xD0, 0xF6, 0xA5, 0xDC, 0x20, 0xD1, 0xFF, 0xA2, 0x04, 0x8E, 0x02,
	0xB0, 0xA2, 0x78, 0xD0, 0x02, 0xA2, 0x1E, 0x20, 0x66, 0xFE, 0xCA, 0xD0,
	0xFA, 0x60, 0xA2, 0x06, 0xD0, 0xF5, 0x2C, 0x01, 0xB0, 0x10, 0xFB, 0x50,
	0xF9, 0xA0, 0x00, 0x85, 0xC3, 0xA9, 0x10, 0x85, 0xC2, 0x2C, 0x01, 0xB0,
	0x10, 0x0F, 0x50, 0x0D, 0x20, 0xBD, 0xFC, 0xB0, 0xEC, 0xC6, 0xC3, 0xD0,
	0xF0, 0xC6, 0xC2, 0xD0, 0xEC, 0x70, 0x01, 0x60, 0xA0, 0x04, 0x08, 0x20,
	0xE4, 0xFB, 0x28, 0xA0, 0x04, 0xA9, 0x2A, 0xD9, 0xD3, 0x00, 0xD0, 0x03,
	0x88, 0xD0, 0xF8, 0x60, 0xC8, 0x20, 0xD4, 0xFF, 0x99, 0xED, 0x00, 0xC9,
	0x0D, 0xD0, 0xF5, 0xA0, 0xFF, 0xC8, 0xB1, 0xC9, 0xD9, 0xED, 0x00, 0xD0,
	0xEA, 0xC9, 0x0D, 0xD0, 0xF4, 0x60, 0xA0, 0x08, 0x20, 0xD4, 0xFF, 0x99,
	0xD3, 0x00, 0x88, 0xD0, 0xF7, 0x60, 0x86, 0xEC, 0x84, 0xC3, 0x08, 0x78,
	0xA9, 0x78, 0x85, 0xC0, 0x20, 0xBD, 0xFC, 0x90, 0xF7, 0xE6, 0xC0, 0x10,
	0xF7, 0xA9, 0x53, 0x85, 0xC4, 0xA2, 0x00, 0xAC, 0x02, 0xB0, 0x20, 0xCD,
	0xFC, 0xF0, 0x00, 0xF0, 0x01, 0xE8, 0xC6, 0xC4, 0xD0, 0xF4, 0xE0, 0x0C,
	0x66, 0xC0, 0x90, 0xE5, 0xA5, 0xC0, 0x28, 0xA4, 0xC3, 0xA6, 0xEC, 0x48,
	0x18, 0x65, 0xDC, 0x85, 0xDC, 0x68, 0x60, 0xA5, 0xCD, 0x30, 0x08, 0xA5,
	0xD4, 0x85, 0xCB, 0xA5, 0xD5, 0x85, 0xCC, 0x60, 0xB0, 0x04, 0xA9, 0x06,
	0xD0, 0x02, 0xA9, 0x04, 0xA2, 0x07, 0x8E, 0x02, 0xB0, 0x24, 0xEA, 0xD0,
	0x2D, 0xC9, 0x05, 0xF0, 0x16, 0xB0, 0x09, 0x20, 0xD1, 0xF7, 0x50, 0x4C,
	0x41, 0x59, 0xD0, 0x15, 0x20, 0xD1, 0xF7, 0x52, 0x45, 0x43, 0x4F, 0x52,
	0x44, 0xD0, 0x0A, 0x20, 0xD1, 0xF7, 0x52, 0x45, 0x57, 0x49, 0x4E, 0x44,
	0xEA, 0x20, 0xD1, 0xF7, 0x20, 0x54, 0x41, 0x50, 0x45, 0xEA, 0x20, 0xE3,
	0xFF, 0x4C, 0xED, 0xFF, 0x86, 0xEC, 0x84, 0xC3, 0x08, 0x78, 0x48, 0x20,
	0x23, 0xFC, 0x85, 0xC0, 0x20, 0xD8, 0xFC, 0xA9, 0x0A, 0x85, 0xC1, 0x18,
	0x90, 0x0A, 0xA2, 0x07, 0x8E, 0x02, 0xB0, 0x20, 0xDA, 0xFC, 0x30, 0x13,
	0xA0, 0x04, 0xA9, 0x04, 0x8D, 0x02, 0xB0, 0x20, 0xD8, 0xFC, 0xEE, 0x02,
	0xB0, 0x20, 0xD8, 0xFC, 0x88, 0xD0, 0xEF, 0x38, 0x66, 0xC0, 0xC6, 0xC1,
	0xD0, 0xDA, 0xA4, 0xC3, 0xA6, 0xEC, 0x68, 0x28, 0x60, 0xA2, 0x00, 0xAC,
	0x02, 0xB0, 0xE8, 0xF0, 0x07, 0x20, 0xCD, 0xFC, 0xF0, 0xF8, 0xE0, 0x08,
	0x60, 0x84, 0xC5, 0xAD, 0x02, 0xB0, 0xA8, 0x45, 0xC5, 0x29, 0x20, 0x60,
	0xA2, 0x00, 0xA9, 0x10, 0x2C, 0x02, 0xB0, 0xF0, 0xFB, 0x2C, 0x02, 0xB0,
	0xD0, 0xFB, 0xCA, 0x10, 0xF3, 0x60, 0xC9, 0x06, 0xF0, 0x1D, 0xC9, 0x15,
	0xF0, 0x1F, 0xA4, 0xE0, 0x30, 0x23, 0xC9, 0x1B, 0xF0, 0x11, 0xC9, 0x07,
	0xF0, 0x1C, 0x20, 0x44, 0xFD, 0xA2, 0x0A, 0x20, 0xC5, 0xFE, 0xD0, 0x21,
	0x4C, 0xB7, 0xFE, 0x18, 0xA2, 0x00, 0x8E, 0x00, 0xB0, 0xA2, 0x02, 0x08,
	0x16, 0xDE, 0x28, 0x76, 0xDE, 0x60, 0xA9, 0x05, 0xA8, 0x8D, 0x03, 0xB0,
	0xCA, 0xD0, 0xFD, 0x49, 0x01, 0xC8, 0x10, 0xF5, 0x60, 0xC9, 0x20, 0x90,
	0x17, 0x69, 0x1F, 0x30, 0x02, 0x49, 0x60, 0x20, 0x6B, 0xFE, 0x91, 0xDE,
	0xC8, 0xC0, 0x20, 0x90, 0x05, 0x20, 0xEC, 0xFD, 0xA0, 0x00, 0x84, 0xE0,
	0x48, 0x20, 0x6B, 0xFE, 0xB1, 0xDE, 0x45, 0xE1, 0x91, 0xDE, 0x68, 0x60,
	0x20, 0x35, 0xFE, 0xA9, 0x20, 0x20, 0x6B, 0xFE, 0x91, 0xDE, 0x10, 0xE6,
	0x20, 0x35, 0xFE, 0x4C, 0x42, 0xFD, 0x20, 0xEC, 0xFD, 0xA4, 0xE0, 0x10,
	0xD9, 0xA0, 0x80, 0x84, 0xE1, 0xA0, 0x00, 0x8C, 0x00, 0xB0, 0xA9, 0x20,
	0x99, 0x00, 0x80, 0x99, 0x00, 0x81, 0xC8, 0xD0, 0xF7, 0xA9, 0x80, 0xA0,
	0x00, 0x85, 0xDF, 0x84, 0xDE, 0xF0, 0xBB, 0x20, 0x3A, 0xFE, 0x4C, 0x42,
	0xFD, 0x18, 0xA9, 0x10, 0x85, 0xE6, 0xA2, 0x08, 0x20, 0x13, 0xFD, 0x4C,
	0x44, 0xFD, 0xA5, 0xE7, 0x49, 0x60, 0x85, 0xE7, 0xB0, 0x09, 0x29, 0x05,
	0x2E, 0x01, 0xB0, 0x2A, 0x20, 0xEA, 0xFC, 0x4C, 0x9A, 0xFE, 0xA4, 0xE0,
	0x20, 0x6B, 0xFE, 0xB1, 0xDE, 0x45, 0xE1, 0x30, 0x02, 0x49, 0x60, 0xE9,
	0x20, 0x4C, 0xE9, 0xFD, 0xA9, 0x5F, 0x49, 0x20, 0xD0, 0x23, 0x45, 0xE7,
	0x2C, 0x01, 0xB0, 0x30, 0x02, 0x49, 0x60, 0x4C, 0xDF, 0xFD, 0x69, 0x39,
	0x90, 0xF2, 0x49, 0x10, 0x2C, 0x01, 0xB0, 0x30, 0x02, 0x49, 0x10, 0x18,
	0x69, 0x20, 0x2C, 0x01, 0xB0, 0x70, 0x02, 0x29, 0x1F, 0x4C, 0x60, 0xFE,
	0xA5, 0xDE, 0xA4, 0xDF, 0xC0, 0x81, 0x90, 0x38, 0xC9, 0xE0, 0x90, 0x34,
	0xA4, 0xE6, 0x30, 0x0C, 0x88, 0xD0, 0x07, 0x20, 0x71, 0xFE, 0xB0, 0xFB,
	0xA0, 0x10, 0x84, 0xE6, 0xA0, 0x20, 0x20, 0x66, 0xFE, 0xB9, 0x00, 0x80,
	0x99, 0xE0, 0x7F, 0xC8, 0xD0, 0xF7, 0x20, 0x6B, 0xFE, 0xB9, 0x00, 0x81,
	0x99, 0xE0, 0x80, 0xC8, 0xD0, 0xF7, 0xA0, 0x1F, 0xA9, 0x20, 0x91, 0xDE,
	0x88, 0x10, 0xFB, 0x60, 0x69, 0x20, 0x85, 0xDE, 0xD0, 0x02, 0xE6, 0xDF,
	0x60, 0x88, 0x10, 0x19, 0xA0, 0x1F, 0xA5, 0xDE, 0xD0, 0x0B, 0xA6, 0xDF,
	0xE0, 0x80, 0xD0, 0x05, 0x68, 0x68, 0x4C, 0x65, 0xFD, 0xE9, 0x20, 0x85,
	0xDE, 0xB0, 0x02, 0xC6, 0xDF, 0x60, 0x20, 0xFB, 0xFE, 0x08, 0x48, 0xD8,
	0x84, 0xE5, 0x86, 0xE4, 0x20, 0xEA, 0xFC, 0x68, 0xA6, 0xE4, 0xA4, 0xE5,
	0x28, 0x60, 0x2C, 0x02, 0xB0, 0x10, 0xFB, 0x2C, 0x02, 0xB0, 0x30, 0xFB,
	0x60, 0xA0, 0x3B, 0x18, 0xA9, 0x20, 0xA2, 0x0A, 0x2C, 0x01, 0xB0, 0xF0,
	0x08, 0xEE, 0x00, 0xB0, 0x88, 0xCA, 0xD0, 0xF4, 0x4A, 0x08, 0x48, 0xAD,
	0x00, 0xB0, 0x29, 0xF0, 0x8D, 0x00, 0xB0, 0x68, 0x28, 0xD0, 0xE3, 0x60,
	0xAD, 0xF0, 0xBF, 0xF0, 0xFB, 0xA2, 0x00, 0x8E, 0xF0, 0xBF, 0x60, 0xEA,
	0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
	0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0x98, 0xA2, 0x17, 0x20, 0xC5, 0xFE, 0xBD,
	0xE3, 0xFE, 0x85, 0xE2, 0xA9, 0xFD, 0x85, 0xE3, 0x98, 0x6C, 0xE2, 0x00,
	0xCA, 0xDD, 0xCB, 0xFE, 0x90, 0xFA, 0x60, 0x00, 0x08, 0x09, 0x0A, 0x0B,
	0x0C, 0x0D, 0x0E, 0x0F, 0x1E, 0x7F, 0x00, 0x01, 0x05, 0x06, 0x08, 0x0E,
	0x0F, 0x10, 0x11, 0x1C, 0x20, 0x21, 0x3B, 0x44, 0x5C, 0x38, 0x62, 0x87,
	0x69, 0x40, 0x8D, 0x92, 0x7D, 0x50, 0xDF, 0xD2, 0x9A, 0xA2, 0xE2, 0xAE,
	0xC0, 0xDF, 0xD8, 0xD6, 0xC8, 0xC6, 0xC2, 0x48, 0xC9, 0x02, 0xF0, 0x27,
	0xC9, 0x03, 0xF0, 0x34, 0xC5, 0xFE, 0xF0, 0x2E, 0xAD, 0x0C, 0xB8, 0x29,
	0x0E, 0xF0, 0x27, 0x68, 0x2C, 0x01, 0xB8, 0x30, 0xFB, 0x8D, 0x01, 0xB8,
	0x48, 0xAD, 0x0C, 0xB8, 0x29, 0xF0, 0x09, 0x0C, 0x8D, 0x0C, 0xB8, 0x09,
	0x02, 0xD0, 0x0C, 0xA9, 0x7F, 0x8D, 0x03, 0xB8, 0xAD, 0x0C, 0xB8, 0x29,
	0xF0, 0x09, 0x0E, 0x8D, 0x0C, 0xB8, 0x68, 0x60, 0xAD, 0x0C, 0xB8, 0x29,
	0xF0, 0xB0, 0xF4, 0xA2, 0x17, 0xBD, 0x9A, 0xFF, 0x9D, 0x04, 0x02, 0xCA,
	0x10, 0xF7, 0x9A, 0x8A, 0xE8, 0x86, 0xEA, 0x86, 0xE1, 0x86, 0xE7, 0xA2,
	0x33, 0x9D, 0xEB, 0x02, 0xCA, 0x10, 0xFA, 0xA9, 0x0A, 0x85, 0xFE, 0xA9,
	0x8A, 0x8D, 0x03, 0xB0, 0xA9, 0x07, 0x8D, 0x02, 0xB0, 0x20, 0xD1, 0xF7,
	0x06, 0x0C, 0x0F, 0x41, 0x43, 0x4F, 0x52, 0x4E, 0x20, 0x42, 0x46, 0x46,
	0x30, 0x0A, 0x0A, 0x0D, 0xA9, 0x82, 0x85, 0x12, 0x58, 0xA9, 0x55, 0x8D,
	0x01, 0x29, 0xCD, 0x01, 0x29, 0xD0, 0x0C, 0x0A, 0x8D, 0x01, 0x29, 0xCD,
	0x01, 0x29, 0xD0, 0x03, 0x4C, 0xB2, 0xC2, 0x4C, 0xB6, 0xC2, 0x00, 0xA0,
	0xEF, 0xF8, 0x52, 0xFE, 0x94, 0xFE, 0x6E, 0xF9, 0xE5, 0xFA, 0xAC, 0xC2,
	0xAC, 0xC2, 0xEE, 0xFB, 0x7C, 0xFC, 0x38, 0xFC, 0x78, 0xC2, 0x85, 0xFF,
	0x68, 0x48, 0x29, 0x10, 0xD0, 0x06, 0xA5, 0xFF, 0x48, 0x6C, 0x04, 0x02,
	0xA5, 0xFF, 0x28, 0x08, 0x6C, 0x02, 0x02, 0x48, 0x6C, 0x00, 0x02, 0x6C,
	0x1A, 0x02, 0x6C, 0x18, 0x02, 0x6C, 0x16, 0x02, 0x6C, 0x14, 0x02, 0x6C,
	0x12, 0x02, 0x6C, 0x10, 0x02, 0x6C, 0x0E, 0x02, 0x6C, 0x0C, 0x02, 0x6C,
	0x0A, 0x02, 0x20, 0xE3, 0xFF, 0xC9, 0x0D, 0xD0, 0x07, 0xA9, 0x0A, 0x20,
	0xF4, 0xFF, 0xA9, 0x0D, 0x6C, 0x08, 0x02, 0x6C, 0x06, 0x02, 0xC7, 0xFF,
		0x3F, 0xFF, 0xB2, 0xFF }; */

int keyl[128];
void SetTimers(HWND);
int keys[16][6] =
{
	{0, _a_KEY_3, _a_KEY_MINUS, _a_KEY_G, _a_KEY_Q, _a_KEY_ESC},
	{0, _a_KEY_2, _a_KEY_COMMA, _a_KEY_F, _a_KEY_P, _a_KEY_Z},
	{KEY_UP, _a_KEY_1, _a_KEY_SEMICOLON, _a_KEY_E, _a_KEY_O, _a_KEY_Y},
	{KEY_RIGHT, _a_KEY_0, _a_KEY_QUOTE, _a_KEY_D, _a_KEY_N, _a_KEY_X},
	{KEY_CAPSLOCK, _a_KEY_BACKSPACE, _a_KEY_9, _a_KEY_C, _a_KEY_M, _a_KEY_W},
	{KEY_TAB, _a_KEY_END, _a_KEY_8, _a_KEY_B, _a_KEY_L, _a_KEY_V},
	{KEY_CLOSEBRACE, _a_KEY_ENTER, _a_KEY_7, _a_KEY_A, _a_KEY_K, _a_KEY_U},
	{KEY_BACKSLASH, 0, _a_KEY_6, _a_KEY_EQUALS, _a_KEY_J, _a_KEY_T},
	{KEY_OPENBRACE, 0, _a_KEY_5, _a_KEY_SLASH, _a_KEY_I, _a_KEY_S},
	{KEY_SPACE, 0, _a_KEY_4, _a_KEY_STOP, _a_KEY_H, _a_KEY_R} };

int keylookup[128];

void drawlines(int);
void loadroms();
void initvideo();
void init8255();
void atom_reset(int);
//void atom_init();
void resetvia();
void reset6502();
void exec6502(int, int);
void updatetimers();
void writememl(uint16_t, uint8_t);
uint8_t readmeml(uint16_t);
void setup();
void Watom_OnTimer(HWND, UINT, WPARAM, LPARAM);


int totcyc = 0;
int skipint, nmi, nmilock;
int timetolive, oldnmi;
int skipint2, oldnmi2;
uint8_t *ram, *videoram, *rom, * fetchc, * readcByte, * writecByte;
// Pointers to memory blocks
uint8_t* utility_ptr;
uint8_t* abasic_ptr;
uint8_t* afloat_ptr;
uint8_t* dosrom_ptr;
uint8_t* akernel_ptr;

// 6502 registers
//uint8_t a, x, y, s;
//uint16_t pc;
/* struct
   {
		int c,z,i,d,v,n;
   } p;*/

   /*Memory structures*/

uint8_t* mem[0x100];
//int memstat[0x100];

int cycles = 0;
int output = 0;
int ins = 0;

/* RAMROM */
int RR_bankreg = 0;
//int RR_enables = 0;
//int RR_jumpers = 0;


HFONT hOldFont;
//RECT Rect;

// Forward declarations of functions included in this code module:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);
void MakeBox(HDC, RECT);
void upd_status(HWND);
void readkeys();

void Watom_OnSize(HWND , UINT , WPARAM , LPARAM );

int drawscr;

void scrupdate()
{
	drawscr++;
}

int oldf8 = 0;
int oldf2 = 0;
int oldf3 = 0;

bool F2()
{
	int leen;
	leen = 2;
	OPENFILENAME ofn;       // common dialog box structure
	TCHAR szFile[260] = { 0 };       // if using TCHAR macros

	// Initialize OPENFILENAME
	ZeroMemory(&ofn, sizeof(ofn));
	ofn.lStructSize = sizeof(ofn);
	ofn.hwndOwner = hWnd;
	ofn.lpstrFile = szFile;
	ofn.nMaxFile = sizeof(szFile);
	ofn.lpstrFilter = _T("All\0*.*\0Text\0*.ATM\0");
	ofn.nFilterIndex = 1;
	ofn.lpstrFileTitle = NULL;
	ofn.nMaxFileTitle = 0;
	ofn.lpstrInitialDir = NULL;
	ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

	if (GetOpenFileName(&ofn) == TRUE)
	{
		// use ofn.lpstrFile
		int leen = 3;
		return TRUE;
	} 
	return FALSE;
}

bool F3()
{
	OPENFILENAME Ofn;       // common dialog box structure
	TCHAR szFile[260] = { 0 };       // if using TCHAR macros

	/* Initialize OPENFILENAME
	ZeroMemory(&Ofn, sizeof(Ofn));
	szFile[0] = '\0';

	Ofn.lStructSize = sizeof(OPENFILENAME);
	Ofn.hwndOwner = hWnd;
	//Ofn.lpstrFilter = szFilter;
	Ofn.lpstrFile = szFile;
	Ofn.nMaxFile = sizeof(szFile) / sizeof(*szFile);
	//Ofn.lpstrFileTitle = szFileTitle;
	//Ofn.nMaxFileTitle = sizeof(szFileTitle);
	Ofn.lpstrInitialDir = (LPSTR)NULL;
	Ofn.Flags = OFN_SHOWHELP | OFN_OVERWRITEPROMPT;
	Ofn.lpstrTitle = szTitle;

	// Display the Filename common dialog box. The  
	// filename specified by the user is passed  
	// to the CreateEnhMetaFile function and used to  
	// store the metafile on disk.  

	GetSaveFileName(&Ofn);
	*/
	return TRUE;
}



static OPENFILENAME ofn;

void PopFileInitialize(HWND hwnd)
{
	static TCHAR szFilter[] = TEXT("Atom Files (*.ATM)\0*.atm\0")  \
		TEXT("ASCII Files (*.BIN)\0*.bin\0") \
		TEXT("All Files (*.*)\0*.*\0\0");

	ofn.lStructSize = sizeof(OPENFILENAME);
	ofn.hwndOwner = hwnd;
	ofn.hInstance = NULL;
	ofn.lpstrFilter = szFilter;
	ofn.lpstrCustomFilter = NULL;
	ofn.nMaxCustFilter = 0;
	ofn.nFilterIndex = 0;
	ofn.lpstrFile = NULL;          // Set in Open and Close functions
	ofn.nMaxFile = MAX_PATH;
	ofn.lpstrFileTitle = NULL;          // Set in Open and Close functions
	ofn.nMaxFileTitle = MAX_PATH;
	ofn.lpstrInitialDir = NULL;
	ofn.lpstrTitle = NULL;
	ofn.Flags = 0;             // Set in Open and Close functions
	ofn.nFileOffset = 0;
	ofn.nFileExtension = 0;
	ofn.lpstrDefExt = TEXT("txt");
	ofn.lCustData = 0L;
	ofn.lpfnHook = NULL;
	ofn.lpTemplateName = NULL;
}

BOOL PopFileOpenDlg(HWND hwnd, PTSTR pstrFileName, PTSTR pstrTitleName)
{
	ofn.hwndOwner = hwnd;
	ofn.lpstrFile = pstrFileName;
	ofn.lpstrFileTitle = pstrTitleName;
	ofn.Flags = OFN_HIDEREADONLY | OFN_CREATEPROMPT;

	return GetOpenFileName(&ofn);
}

BOOL PopFileSaveDlg(HWND hwnd, PTSTR pstrFileName, PTSTR pstrTitleName)
{
	ofn.hwndOwner = hwnd;
	ofn.lpstrFile = pstrFileName;
	ofn.lpstrFileTitle = pstrTitleName;
	ofn.Flags = OFN_OVERWRITEPROMPT;

	return GetSaveFileName(&ofn);
}

BOOL PopFileRead(HWND hwndEdit, PTSTR pstrFileName)
{
	BYTE   bySwap;
	DWORD  dwBytesRead;
	HANDLE hFile;
	int    i, iFileLength, iUniTest;
	PBYTE  pBuffer, pText, pConv;

	// Open the file.
	if (INVALID_HANDLE_VALUE ==
		(hFile = CreateFile(pstrFileName, GENERIC_READ, FILE_SHARE_READ,
			NULL, OPEN_EXISTING, 0, NULL)))
		return FALSE;

	// Get file size in bytes and allocate memory for read.
	// Add an extra two bytes for zero termination.

	iFileLength = GetFileSize(hFile, NULL);
	iFileLength = 0x4000;
	ReadFile(hFile, ram+0x400, iFileLength, &dwBytesRead, NULL);
	CloseHandle(hFile);
	return TRUE;
}

BOOL PopFileWrite(HWND hwndEdit, PTSTR pstrFileName)
{
	DWORD  dwBytesWritten;
	HANDLE hFile;
	int    iLength;
	PTSTR  pstrBuffer;
	WORD   wByteOrderMark = 0xFEFF;
	// Open the file, creating it if necessary

	if (INVALID_HANDLE_VALUE ==
		(hFile = CreateFile(pstrFileName, GENERIC_WRITE, 0,
			NULL, CREATE_ALWAYS, 0, NULL)))
		return FALSE;

	// Get the number of characters in the edit control and allocate
	// memory for them.
	
	iLength = 0x8000 - 0x0400;  
	
	// If the edit control will return Unicode text, write the
	// byte order mark to the fil
	// Get the edit buffer and write that out to the file.

	// GetWindowText(hwndEdit, pstrBuffer, iLength + 1);
	WriteFile(hFile, ram + 0x0400, iLength * sizeof(byte),
		&dwBytesWritten, NULL);

	if ((iLength * sizeof(int)) != (int)dwBytesWritten)
	{
		CloseHandle(hFile);
		//free(pstrBuffer);
		return FALSE;
	}

	CloseHandle(hFile);
	return TRUE;
}


void atom_run()
{
	//if (drawscr > 0)
	//{
		exec6502(262, 64);
	//}
	//drawscr -= 5;

	//if (drawscr > 25)
	//	drawscr = 0;
		if (key[KEY_F8] && !oldf8)
			atom_reset(0);

		oldf8 = key[KEY_F8];		
		
		if (key[KEY_F2] && !oldf2)
			F2();
		oldf2 = key[KEY_F2];		


		if (key[KEY_F3] && !oldf3)
			F3();
		oldf3 = key[KEY_F3];
}

int atompause = 0;
void _mainthread(PVOID pvoid)
{
	//setup();
	while (1)
	{
		if (atompause)
			Sleep(10);
		else {
			atom_run();
		}
	}
}

void DoCaption(HWND hwnd, TCHAR* szTitleName)
{
	TCHAR szCaption[64 + MAX_PATH];

	wsprintf(szCaption, TEXT("%s - %s"), szAppName,
		szTitleName[0] ? szTitleName : UNTITLED);

	SetWindowText(hwnd, szCaption);
}

void OkMessage(HWND hwnd, TCHAR* szMessage, TCHAR* szTitleName)
{
	TCHAR szBuffer[64 + MAX_PATH];

	wsprintf(szBuffer, szMessage, szTitleName[0] ? szTitleName : UNTITLED);

	MessageBox(hwnd, szBuffer, szAppName, MB_OK | MB_ICONEXCLAMATION);
}



int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
	_In_opt_ HINSTANCE hPrevInstance,
	_In_ LPWSTR    lpCmdLine,
	_In_ int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

	// TODO: Place code here.

	// Initialize global strings
	LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadStringW(hInstance, IDC_MQTT, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// Perform application initialization:
	if (!InitInstance(hInstance, nCmdShow))
	{
		return FALSE;
	}

	HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MQTT));

	MSG msg;
	mainthread = (HANDLE)_beginthread(_mainthread, 0, NULL);

	// Main message loop:
	while (GetMessage(&msg, nullptr, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return (int)msg.wParam;
}


//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEXW wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = WndProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MQTT));
	wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wcex.lpszMenuName = MAKEINTRESOURCEW(IDC_MQTT);
	wcex.lpszClassName = szWindowClass;
	wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassExW(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
	hInst = hInstance; // Store instance handle in our global variable

	   hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

	if (!hWnd)
	{
		return FALSE;
	}

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE: Processes messages for the main window.
//
//  WM_COMMAND  - process the application menu
//  WM_PAINT    - Paint the main window
//  WM_DESTROY  - post a quit message and return
//
//

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	static POINT org;
	static POINT len;
	//static HWND      hwndEdit;
	static TCHAR     szFileName[MAX_PATH], szTitleName[MAX_PATH];
	int c; // temp variabele voor keyboard
	// var voor textcopyclipboard
	//int xx, yy;
	//HANDLE hGlobalMemory;
	//LPSTR lpGlobalMemory;
	int wLength = 100;
	//HBITMAP hBitmap;
	//HDC hdc;
	//HMENU hMenu;
	//int nFiles, aantal;
	//char cBuf[128];
	//MSG usermsg;
	//DWORD bkcolor, fgcolor;
	//UINT nThreshold;
	//POINT ptCurrent;
	switch (message)
	{
	case WM_CREATE:
	{
		//int nFontload;
		//BOOL bStatus;
		//OFSTRUCT of;
		//WORD wReturn;
		//TCHAR   szBuf[144];
		//TCHAR	szFontpath[160];
		//TCHAR   szWorkpath[160];
		//void* pvBits;
		HDC hdc;
		GetClientRect(hWnd, &hRect);
		hdc = GetDC(hWnd);
/*		ZeroMemory(&Bi, sizeof(BITMAPINFO));

		Bi.biSize = sizeof(BITMAPINFOHEADER);
		Bi.biWidth = 256;
		Bi.biHeight = 8;
		Bi.biPlanes = 1;
		Bi.biBitCount = 4;
		Bi.biCompression = BI_RGB;
		Bi.biSizeImage = 256 * 8;
		Bi.biXPelsPerMeter = 0;
		Bi.biYPelsPerMeter = 0;
		Bi.biClrUsed = 0;
		Bi.biClrImportant = 0;
		*/
		PopFileInitialize(hWnd);
		SetTimers(hWnd);
		setup();	
			for (int i = 0; i < 32; i++) {
				for (int j = 0; j < 192; j++) {
					BitMapBits[j][i] = 0xFF;
				}
			}

			for (int i = 0; i < 20; i++) {
				BitMapBits[i / 5][i % 4] = byBits[i];
			}
			hBitmap = CreateBitmap(256, 192, 1, 1, BitMapBits); //lb
		nWidth = hRect.right / venster_xrb;
		nHeight = (hRect.bottom - 30) / (venster_ylo + 1);
		GetClientRect(hWnd, &hRect);

		Createfnt(hWnd);
		SelectObject(hdc, hFont);
		GetTextMetrics(hdc, &tm);
		cxChar = tm.tmAveCharWidth;
		cyChar = (cyClient - 30) / (venster_ylo + 1);
		cxIcon = GetSystemMetrics(SM_CXICON);
		cyIcon = GetSystemMetrics(SM_CYICON);
		ReleaseDC(hWnd, hdc);
	}

	break;
	case WM_SIZE:
	{
		HDC hdc;
		hdc = GetDC(hWnd);
		SetBkColor(hdc, kleurtbl[0]);
		SetTextColor(hdc, kleurtbl[7]);
		cxClient = LOWORD(lParam);
		cyClient = HIWORD(lParam);
		GetWindowRect(hWnd, &hRect);
		defver = hRect.left;
		defhor = hRect.top;
		defwidth = hRect.right;
		defheight = hRect.bottom;
		cxChar = nWidth = ((cxClient -256) / venster_xrb) * 2;
		cyChar = nHeight = (cyClient - 30) / (venster_ylo + 1);
		DeleteObject(hFont);
		Createfnt(hWnd);
		shWnd = hWnd;
		// calculate window size in characters
		if (hWnd == GetFocus()) {
			CreateCaret(hWnd, NULL, cxChar, cyChar);
			SetCaretPos(xco * cxChar, yco * cyChar);
		}
		PostMessage(hWnd, WM_SETFOCUS, 0, 0L);
		ReleaseDC(hWnd, hdc);
		InvalidateRect(hWnd, NULL, TRUE);
	}
	break;
	case WM_DROPFILES:
		return 0;
	case WM_COMMAND:
		{	
		int wmId = LOWORD(wParam);
		// Parse the menu selections:
			switch (wmId)
			{
			case ID_FILE_LOAD:
				if (PopFileOpenDlg(hWnd, szFileName, szTitleName)) 				{
					if (!PopFileRead(hWnd, szFileName)) 					{
						//OkMessage(hWnd, TEXT("Could not read file %s!"),
						//	szTitleName);
						szFileName[0] = 0x0;
							szTitleName[0] = 0x0;
					}

				}

				DoCaption(hWnd, szTitleName);
				break;
				          case ID_FILE_SAVEAS:
               if (PopFileSaveDlg (hWnd, szFileName, szTitleName))
               {
                    DoCaption (hWnd, szTitleName) ;
                    
                    if (PopFileWrite (hWnd, szFileName))
                    {
                         return 1 ;
                    }
                    else
                    {
                         //OkMessage (hWnd, TEXT ("Could not write file %s"),
                          //          szTitleName) ;
                         return 0 ;
                    }
               }
               return 0 ;
			case IDM_ABOUT:
				//DeleteObject(hBitmap);
				//hBitmap = CreateBitmap(255, 192, 1, 1, BitMapBits); //lb
				DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
				break;
			case IDM_EXIT:
				DestroyWindow(hWnd);
				break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
			}
		}
	break;
	case WM_TIMER:
	case WM_TIMECHANGE:
		 Watom_OnTimer(hWnd, message, wParam, lParam);
		scrupdate();

		return 0;
	case WM_PAINT:
	{
		PAINTSTRUCT ps;
		HDC hdc = BeginPaint(hWnd, &ps);
		RECT hRect, hBox; // , rect;
		HBRUSH hBrush;
		DWORD bkcolor, fgcolor;
		int cnt = 0x8000;
		TCHAR text[33];
		//unsigned char	lb;
		text[32] = 0x00;


		hOldFont = (HFONT)SelectObject(hdc, hFont);
	
		//Logical units are device dependent pixels, so this will create a handle to a logical font that is 36 pixels in height.
	//The width, when set to 10, will cause the font mapper to choose a font which, in this case, is compressed.

		//SetRect(&rect, 500, 200, 1400, 600);
		SetTextColor(hdc, RGB(0, 0, 255));
		hBrush = CreateSolidBrush(kleurtbl[8]);
		GetClientRect(hWnd, &hRect);
		hRect.top = hRect.bottom - 26;
		FillRect(hdc, &hRect, hBrush);
		DeleteObject(hBrush);
		hBox.top = hRect.top + 1;
		hBox.bottom = hRect.bottom - 1;
		hBox.left = hRect.left + 1;
		hBox.right = hRect.right + 1;
		MakeBox(hdc, hBox);
		hBox.left = hRect.left + 105;
		hBox.right = hRect.left + 1;
		MakeBox(hdc, hBox);
		hBox.left = hRect.left + 150;
		hBox.right = hRect.right - 1;
		MakeBox(hdc, hBox);
		upd_status(hWnd); //*/
		// hOldFont = (HFONT)SelectObject(hdc, hFont);
		bkcolor = GetBkColor(hdc);
		fgcolor = GetTextColor(hdc);
		SetBkColor(hdc, kleurtbl[0]);
		SetTextColor(hdc, kleurtbl[7]);
		if (bGraph == TRUE) {
		//	DrawBitmap(ps.hdc, hBitmap, 0, 0, SRCCOPY);
		int leen = 1;
			}
			//	}
		// else 
		// {
			for (int n = 0; n < 16; n++) {
				for (int m = 0; m < 32; m++) {
					//lb = ram[cnt++];
					text[m] = table[ram[cnt++]];
				}

				TextOut(hdc, 257, (n * dHeight), text, wcslen(text));
			}

			SetBkColor(hdc, bkcolor);
			SetTextColor(hdc, fgcolor);
			SelectObject(hdc, hOldFont);
			if (!IsIconic(hWnd)) {
				SelectObject(hdc, hFont);
				SetBkColor(hdc, kleurtbl[0]);
				SetTextColor(hdc, kleurtbl[7]);
			}

			//DeleteObject(hFont);
		// }
		EndPaint(hWnd, &ps);

	}
		break;

	case WM_SYSKEYDOWN:
	case WM_KEYDOWN:
		if (LOWORD(wParam) != 255)
		{
			//                        rpclog("Key %04X %04X\n",LOWORD(wParam),VK_LEFT);
			c = MapVirtualKey(LOWORD(wParam), 0);
			c = hw_to_mycode[c];
			//                        rpclog("MVK %i %i %i\n",c,hw_to_mycode[c],KEY_PGUP);
			if (LOWORD(wParam) == VK_LEFT)
				c = _a_KEY_LEFT;
			if (LOWORD(wParam) == VK_RIGHT)
				c = _a_KEY_RIGHT;
			if (LOWORD(wParam) == VK_UP)
				c = _a_KEY_UP;
			if (LOWORD(wParam) == VK_DOWN)
				c = _a_KEY_DOWN;
			if (LOWORD(wParam) == VK_HOME)
				c = _a_KEY_HOME;
			if (LOWORD(wParam) == VK_END)
				c = _a_KEY_END;
			if (LOWORD(wParam) == VK_INSERT)
				c = _a_KEY_INSERT;
			if (LOWORD(wParam) == VK_DELETE)
				c = _a_KEY_DEL;
			if (LOWORD(wParam) == VK_PRIOR)
				c = _a_KEY_PGUP;
			if (LOWORD(wParam) == VK_NEXT)
				c = _a_KEY_PGDN;
			//                        rpclog("MVK2 %i %i %i\n",c,hw_to_mycode[c],KEY_PGUP);
			key[c] = 1;
			readkeys();
			upd_status(hWnd);
		}
		break;

	case WM_ENTERMENULOOP:
		//		rpclog("EnterMenuLoop\n");
		atompause = 1;
		//EnterCriticalSection(&cs);
		break;
	case WM_EXITMENULOOP:
		//		rpclog("ExitMenuLoop\n");
		atompause = 0;
		//                clearkeys();
		for (c = 0; c < 128; c++)
			key[c] = 0;
		//LeaveCriticalSection(&cs);
		break;

	case WM_SETFOCUS:
		//		rpclog("SetFocus\n");
		//                clearkeys();
		for (c = 0; c < 128; c++)
			key[c] = 0;
		atompause = 0;
		break;
	case WM_SYSKEYUP:
	case WM_KEYUP:
		if (LOWORD(wParam) != 255)
		{

			//                        rpclog("Key %04X %04X\n",LOWORD(wParam),VK_LEFT);
			c = MapVirtualKey(LOWORD(wParam), 0);
			c = hw_to_mycode[c];
			if (LOWORD(wParam) == VK_LEFT)
				c = _a_KEY_LEFT;
			if (LOWORD(wParam) == VK_RIGHT)
				c = _a_KEY_RIGHT;
			if (LOWORD(wParam) == VK_UP)
				c = _a_KEY_UP;
			if (LOWORD(wParam) == VK_DOWN)
				c = _a_KEY_DOWN;
			if (LOWORD(wParam) == VK_HOME)
				c = _a_KEY_HOME;
			if (LOWORD(wParam) == VK_END)
				c = _a_KEY_END;
			if (LOWORD(wParam) == VK_INSERT)
				c = _a_KEY_INSERT;
			if (LOWORD(wParam) == VK_DELETE)
				c = _a_KEY_DEL;
			if (LOWORD(wParam) == VK_PRIOR)
				c = _a_KEY_PGUP;
			if (LOWORD(wParam) == VK_NEXT)
				c = _a_KEY_PGDN;
			//                        rpclog("MVK %i\n",c);
			key[c] = 0;
			readkeys();
			upd_status(hWnd);
		}
		break;

	case WM_DESTROY:
		PostQuitMessage(0);
		resettimer(hWnd);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}
void upd_status(HWND hWnd)
{
	RECT hRect;
	WCHAR s[99];
	WCHAR t[99]; // 12345678901
	char space[] = " ";
	HDC hdc;
	DWORD bkcolor, fgcolor;
	if (!IsIconic(hWnd)) {
		swprintf_s(s, 99, L"%2d.%2d:%2d.%2d", xco_sta, yco_sta, xco_sto, yco_sto);
		GetClientRect(hWnd, &hRect);
		hdc = GetDC(hWnd);
		bkcolor = GetBkColor(hdc);
		fgcolor = GetTextColor(hdc);
		SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT));
		SetBkMode(hdc, OPAQUE);
		SetBkColor(hdc, kleurtbl[8]);
		SetTextColor(hdc, kleurtbl[0]);
		readkeys();
		if (bShift) 
			swprintf_s(t, 99, L"SHIFT %d", nFrameRate++);
		else
			swprintf_s(t, 99, L"shift %d", nFrameRate++);
	
		/* if (bPagemode) strcat(t, "PAGEMODE ");
		else strcat(t, "pagemode ");
		if (bCaps) strcat(t, "CAPS ");
		else strcat(t, "caps ");
		if (bPrinterstatus) strcat(t, "PRINTER ");
		else strcat(t, "printer ");
		if (bSchermstatus) strcat(t, "SCHERM ");
		else strcat(t, "scherm ");
		*/
		TextOut(hdc, hRect.left + 170, hRect.bottom - 20, t, wcslen(t));
		SetBkColor(hdc, bkcolor);
		SetTextColor(hdc, fgcolor);
		ReleaseDC(hWnd, hdc);
	}
}
void MakeBox(HDC hdc, RECT hRect)
{
	HBRUSH hBrush;
	hRect.top += 3;
	hRect.left += 3;
	hRect.bottom -= 2;
	hRect.right -= 2;
	hBrush = CreateSolidBrush(kleurtbl[0]);
	FrameRect(hdc, &hRect, hBrush);
	DeleteObject(hBrush);
	hRect.top -= 1;
	hRect.left -= 1;
	hBrush = CreateSolidBrush(kleurtbl[7]);
	FrameRect(hdc, &hRect, hBrush);
	hRect.top -= 1;
	hRect.left -= 1;
	hRect.bottom -= 1;
	hRect.right -= 1;
	FrameRect(hdc, &hRect, hBrush);
	DeleteObject(hBrush);
}

void Createfnt(HWND hWnd)
{
	TEXTMETRIC tm;
	HFONT hTmpfnt;
	LOGFONT hLogFont;
	HDC			hdc;
	char font[] = "RLatom.ttf";

	if (nHeight == 0)
		nHeight = 3;
	int lb = 0;
	/* hTmpfnt = CreateFont(nHeight,
		0,
		0, // no sloping
		0, // no escaping
		FW_NORMAL, // dik is in
		FALSE, // geen italic
		FALSE, // geen streep er onder
		FALSE, // geen doorhaling
		0,
		OUT_RASTER_PRECIS,
		CLIP_STROKE_PRECIS,
		PROOF_QUALITY,
		FIXED_PITCH,
		TEXT("atom")
	); */

	hTmpfnt = CreateFont(nHeight, 0, 0, 0, FW_NORMAL, FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_RASTER_PRECIS,
		CLIP_STROKE_PRECIS, PROOF_QUALITY, FIXED_PITCH, TEXT("RLatom"));

	//SelectObject(hdc, hFont);
	hdc = GetDC(hWnd);
	hOldFont = (HFONT)SelectObject(hdc, hTmpfnt);
	GetTextMetrics(hdc, &tm);
	hLogFont.lfHeight = -tm.tmHeight;
	hLogFont.lfWidth = nWidth;
	hLogFont.lfWeight = tm.tmWeight;
	hLogFont.lfEscapement = 0;
	hLogFont.lfOrientation = 0;
	hLogFont.lfItalic = FALSE;
	hLogFont.lfUnderline = FALSE;
	hLogFont.lfStrikeOut = FALSE;
	hLogFont.lfCharSet = DEFAULT_CHARSET;
	hLogFont.lfOutPrecision = OUT_RASTER_PRECIS;
	hLogFont.lfClipPrecision = CLIP_STROKE_PRECIS;
	hLogFont.lfQuality = PROOF_QUALITY;
	hLogFont.lfPitchAndFamily = FIXED_PITCH;
	swprintf_s(hLogFont.lfFaceName, 31, L"RLatom");
	hFont = CreateFontIndirect(&hLogFont);
	DeleteObject(hTmpfnt);
	SelectObject(hdc, hFont);
	GetTextMetrics(hdc, &tm);
	dHeight = tm.tmDescent + tm.tmAscent - tm.tmInternalLeading;
	GetCharABCWidths(hdc, (UINT) 'a', (UINT) 'z', (LPABC)& abc);
	dWidth = nWidth = (abc['b' - 'a'].abcA + abc['b' - 'a'].abcB + abc['b' - 'a'].abcC);
	SelectObject(hdc, hOldFont);
	ReleaseDC(hWnd, hdc);
}
void readkeys()
{
	unsigned int nShift, nCaps, nCtrl;
	nShift = GetKeyState(VK_SHIFT);
	nCtrl = GetKeyState(VK_CONTROL);
	nCaps = GetKeyState(VK_CAPITAL);
	if ((nShift & 0x8000) == 0x8000)
		bShift = TRUE;
	else
		bShift = FALSE;
	if ((nCtrl & 0x8000) == 0x8000)
		bCtrl = TRUE;
	else
		bCtrl = FALSE;
	if ((nCaps & 0x8000) == 0x8000) {
		bCaps = nCaps & 0x0001;
	}
}

void setup1()
{
	for (int c = 0; c < 128; c++)
		keylookup[c] = c;
}
void setup()
{
	setup1();
	initmem();
	loadroms();
	//reset6502();
	initvideo();
	init8255();
	debugon = true;
	resetvia();

	atom_reset(0);
	//int wc = 999;
	debugon = false;
}

void initmem()
{
	ram = (uint8_t*)malloc(0x10000);
	videoram = (uint8_t*)malloc(0x1ff);
	rom = (uint8_t*)malloc(0xffff);
	fetchc = (uint8_t *)malloc(0x7fff);
	readcByte = (uint8_t *)malloc(0xffff);
	writecByte = (uint8_t *)malloc(0xffff);
	// (ROM_MEM_SIZE + RAM_ROM_SIZE + ROM_SIZE_GDOS2015);

	memset(ram, 0, 0xffff);
	memset(rom, 0xea, 0xffff);

	//for (c = 0; c < 0x100; c++)
	//	memstat[c] = 2;

	//ram[8] = rand() & 255;
	//ram[9] = rand() & 255;
	//ram[10] = rand() & 255;
	//ram[11] = rand() & 255;
}



void changetimerspeed(int i)
{
	// LB remove_int(scrupdate);
	// LB  install_int_ex(scrupdate, BPS_TO_TIMER(i * 6));
}

void atom_exit()
{
	//saveconfig();
	// LB closeddnoise();
	//FinalizeMMC();
	//        dumpregs();
	//        dumpram();
}

#define readmem(a) readmeml(a)
#define writemem(a, v) writememl(a, v)
//#define readmem(a) ((memstat[(a) >> 8] == 2) ? readmeml(a) : mem[(a) >> 8][(a)&0xFF])
/* #define writemem(a, b)             \
  if (memstat[(a) >> 8] == 0)      \
	mem[(a) >> 8][(a)&0xFF] = b;   \
  else if (memstat[(a) >> 8] == 2) \
	writememl(a, b, lines);
*/

// MH - function needs to be declared static inline to compile on OSX
static inline uint16_t getsw()
{
	uint16_t temp = readmem(pc);
	pc++;

	temp |= (readmem(pc) << 8);
	pc++;
	return temp;
}
#define getw() getsw()
//#define getw() (readmem(pc)|(readmem(pc+1)<<8)); pc+=2

void reset6502()
{
	//        atexit(dumpram);
	//reset_rom();
	pc = readmem(0xFFFC) | (readmem(0xFFFD) << 8);
	p.i = 1;
	nmi = oldnmi = nmilock = 0;
}

FILE* flog;
void fpclog(char* format, uint16_t pc)
{
	char buf[256];

	if (pc > 0xFD00)
	   return;

	sprintf(buf, "flog.txt", exedir);

	if (!flog)
		flog = fopen(buf, "wt");
	//turn;
	va_list ap;
	va_start(ap, format);
	vsprintf(buf, format, ap);
	va_end(ap);
	fputs(buf, flog);
	fflush(flog);
}

void dumpregs()
{
	//dumpram();
	printf("6502 registers :\n");
	printf("A=%02X X=%02X Y=%02X S=01%02X PC=%04X\n", a, x, y, s, pc);
	printf("Status : %c%c%c%c%c%c\n", (p.n) ? 'N' : ' ', (p.v) ? 'V' : ' ', (p.d) ? 'D' : ' ', (p.i) ? 'I' : ' ', (p.z) ? 'Z' : ' ', (p.c) ? 'C' : ' ');
}

#define setzn(v) \
  p.z = !(v);    \
  p.n = (v)&0x80

#define push(v) ram[0x100 + (s--)] = v
#define pull() ram[0x100 + (++s)]

#define polltime(c)                   \
  {                                   \
    cycles -= c;                      \
    totcyc += c;                      \
    via.t1c -= c;                     \
    if (!(via.acr & 0x20))            \
      via.t2c -= c;                   \
    if (via.t1c < -1 || via.t2c < -1) \
      updatetimers();                 \
  }

/*ADC/SBC temp variables*/
uint16_t tempw;
int tempv, hc, al, ah;
uint8_t tempb;
#define ADC(temp)                                         \
  if (!p.d)                                               \
  {                                                       \
    tempw = (a + temp + (p.c ? 1 : 0));                   \
    p.v = (!((a ^ temp) & 0x80) && ((a ^ tempw) & 0x80)); \
    a = tempw & 0xFF;                                     \
    p.c = tempw & 0x100;                                  \
    setzn(a);                                             \
  }                                                       \
  else                                                    \
  {                                                       \
    ah = 0;                                               \
    p.z = p.n = 0;                                        \
    tempb = a + temp + (p.c ? 1 : 0);                     \
    if (!tempb)                                           \
      p.z = 1;                                            \
    al = (a & 0xF) + (temp & 0xF) + (p.c ? 1 : 0);        \
    if (al > 9)                                           \
    {                                                     \
      al -= 10;                                           \
      al &= 0xF;                                          \
      ah = 1;                                             \
    }                                                     \
    ah += ((a >> 4) + (temp >> 4));                       \
    if (ah & 8)                                           \
      p.n = 1;                                            \
    p.v = (((ah << 4) ^ a) & 128) && !((a ^ temp) & 128); \
    p.c = 0;                                              \
    if (ah > 9)                                           \
    {                                                     \
      p.c = 1;                                            \
      ah -= 10;                                           \
      ah &= 0xF;                                          \
    }                                                     \
    a = (al & 0xF) | (ah << 4);                           \
  }

#define SBC(temp)                                         \
  if (!p.d)                                               \
  {                                                       \
    tempw = a - (temp + (p.c ? 0 : 1));                   \
    tempv = (int16_t)a - (int16_t)(temp + (p.c ? 0 : 1)); \
    p.v = (((a ^ temp) & 0x80) && ((a ^ tempw) & 0x80));  \
    p.c = tempv >= 0;                                     \
    a = tempw & 0xFF;                                     \
    setzn(a);                                             \
  }                                                       \
  else                                                    \
  {                                                       \
    hc = 0;                                               \
    p.z = p.n = 0;                                        \
    tempb = a - temp - ((p.c) ? 0 : 1);                   \
    if (!(tempb))                                         \
      p.z = 1;                                            \
    al = (a & 15) - (temp & 15) - ((p.c) ? 0 : 1);        \
    if (al & 16)                                          \
    {                                                     \
      al -= 6;                                            \
      al &= 0xF;                                          \
      hc = 1;                                             \
    }                                                     \
    ah = (a >> 4) - (temp >> 4);                          \
    if (hc)                                               \
      ah--;                                               \
    if ((a - (temp + ((p.c) ? 0 : 1))) & 0x80)            \
      p.n = 1;                                            \
    p.v = ((a ^ temp) & 0x80) && ((a ^ tempb) & 0x80);    \
    p.c = 1;                                              \
    if (ah & 16)                                          \
    {                                                     \
      p.c = 0;                                            \
      ah -= 6;                                            \
      ah &= 0xF;                                          \
    }                                                     \
    a = (al & 0xF) | ((ah & 0xF) << 4);                   \
  }

// int lns;
uint8_t opcode;
void exec6502(int linenum, int cpl)
{
	uint16_t addr;
	uint8_t temp;
	int tempi;
	int8_t offset;
	int c;
	int lines;
	int oldcyc;
	int halfline;
	char outs[256];

	for (lines = 0; lines < linenum; lines++)
	{
		//                rpclog("Exec line %i\n",lines);
		int lns = lines;
		if (lines < 262 || lines == 311) {
			//LB: weg te halen..   
			 drawline(lines);
		temp = 1;
		}
		for (halfline = 0; halfline < 2; halfline++) {
		cycles += (cpl >> 1);
		//                badline=0;
		while (cycles > 0)
		{
			oldcyc = cycles;
			if (skipint == 1)
				skipint = 0;
			opcode = readmem(pc);
			pc++;
			switch (opcode)
			{
			case 0x00: /*BRK*/
					   /*                                printf("BRK at %04X\n",pc);
										  dumpregs();
										  dumpram();
										  exit(-1);*/
				pc++;
				push(pc >> 8);
				push(pc & 0xFF);
				temp = 0x30;
				if (p.c)
					temp |= 1;
				if (p.z)
					temp |= 2;
				if (p.d)
					temp |= 8;
				if (p.v)
					temp |= 0x40;
				if (p.n)
					temp |= 0x80;
				push(temp);
				pc = readmem(0xFFFE) | (readmem(0xFFFF) << 8);
				p.i = 1;
				polltime(7);
				break;

			case 0x01: /*ORA (,x)*/
				temp = readmem(pc) + x;
				pc++;
				addr = readmem(temp) | (readmem(temp + 1) << 8);
				a |= readmem(addr);
				setzn(a);
				polltime(6);
				break;

			case 0x05: /*ORA zp*/
				addr = readmem(pc);
				pc++;
				a |= readmem(addr);
				setzn(a);
				polltime(3);
				break;

			case 0x06: /*ASL zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				p.c = temp & 0x80;
				temp <<= 1;
				setzn(temp);
				writemem(addr, temp);
				polltime(5);
				break;

			case 0x08: /*PHP*/
				temp = 0x30;
				if (p.c)
					temp |= 1;
				if (p.z)
					temp |= 2;
				if (p.i)
					temp |= 4;
				if (p.d)
					temp |= 8;
				if (p.v)
					temp |= 0x40;
				if (p.n)
					temp |= 0x80;
				push(temp);
				polltime(3);
				break;

			case 0x09: /*ORA imm*/
				a |= readmem(pc);
				pc++;
				setzn(a);
				polltime(2);
				break;

			case 0x0A: /*ASL A*/
				p.c = a & 0x80;
				a <<= 1;
				setzn(a);
				polltime(2);
				break;

			case 0x0B: /*ANC imm*/
				a &= readmem(pc);
				pc++;
				setzn(a);
				p.c = p.n;
				polltime(2);
				break;

			case 0x0D: /*ORA abs*/
				addr = getw();
				a |= readmem(addr);
				setzn(a);
				polltime(4);
				break;

			case 0x0E: /*ASL abs*/
				addr = getw();
				temp = readmem(addr);
				p.c = temp & 0x80;
				temp <<= 1;
				setzn(temp);
				writemem(addr, temp);
				polltime(6);
				break;

			case 0x10: /*BPL*/
				offset = (int8_t)readmem(pc);
				pc++;
				temp = 2;
				if (!p.n)
				{
					temp++;
					if ((pc & 0xFF00) ^ ((pc + offset) & 0xFF00))
						temp++;
					pc += offset;
				}
				polltime(temp);
				break;

			case 0x11: /*ORA (),y*/
				temp = readmem(pc);
				pc++;
				addr = readmem(temp) + (readmem(temp + 1) << 8);
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				a |= readmem(addr + y);
				setzn(a);
				polltime(5);
				break;

			case 0x15: /*ORA zp,x*/
				addr = readmem(pc);
				pc++;
				a |= ram[(addr + x) & 0xFF];
				setzn(a);
				polltime(3);
				break;

			case 0x16: /*ASL zp,x*/
				addr = (readmem(pc) + x) & 0xFF;
				pc++;
				temp = ram[addr];
				p.c = temp & 0x80;
				temp <<= 1;
				setzn(temp);
				ram[addr] = temp;
				polltime(5);
				break;

			case 0x18: /*CLC*/
				p.c = 0;
				polltime(2);
				break;

			case 0x19: /*ORA abs,y*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				a |= readmem(addr + y);
				setzn(a);
				polltime(4);
				break;

			case 0x1D: /*ORA abs,x*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + x) & 0xFF00))
					polltime(1);
				addr += x;
				a |= readmem(addr);
				setzn(a);
				polltime(4);
				break;

			case 0x1E: /*ASL abs,x*/
				addr = getw();
				addr += x;
				temp = readmem(addr);
				p.c = temp & 0x80;
				temp <<= 1;
				writemem(addr, temp);
				setzn(temp);
				polltime(7);
				break;

			case 0x20: /*JSR*/
				addr = getw();
				pc--;
				push(pc >> 8);
				push(pc);
				pc = addr;
				polltime(6);
				break;

			case 0x21: /*AND (,x)*/
				temp = readmem(pc) + x;
				pc++;
				addr = readmem(temp) | (readmem(temp + 1) << 8);
				a &= readmem(addr);
				setzn(a);
				polltime(6);
				break;

			case 0x24: /*BIT zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				p.z = !(a & temp);
				p.v = temp & 0x40;
				p.n = temp & 0x80;
				polltime(3);
				break;

			case 0x25: /*AND zp*/
				addr = readmem(pc);
				pc++;
				a &= readmem(addr);
				setzn(a);
				polltime(3);
				break;

			case 0x26: /*ROL zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				tempi = p.c;
				p.c = temp & 0x80;
				temp <<= 1;
				if (tempi)
					temp |= 1;
				setzn(temp);
				writemem(addr, temp);
				polltime(5);
				break;

			case 0x28: /*PLP*/
				temp = pull();
				p.c = temp & 1;
				p.z = temp & 2;
				p.i = temp & 4;
				p.d = temp & 8;
				p.v = temp & 0x40;
				p.n = temp & 0x80;
				polltime(4);
				break;

			case 0x29: /*AND*/
				a &= readmem(pc);
				pc++;
				setzn(a);
				polltime(2);
				break;

			case 0x2A: /*ROL A*/
				tempi = p.c;
				p.c = a & 0x80;
				a <<= 1;
				if (tempi)
					a |= 1;
				setzn(a);
				polltime(2);
				break;

			case 0x2C: /*BIT abs*/
				addr = getw();
				temp = readmem(addr);
				p.z = !(a & temp);
				p.v = temp & 0x40;
				p.n = temp & 0x80;
				polltime(4);
				break;

			case 0x2D: /*AND abs*/
				addr = getw();
				a &= readmem(addr);
				setzn(a);
				polltime(4);
				break;

			case 0x2E: /*ROL abs*/
				addr = getw();
				temp = readmem(addr);
				tempi = p.c;
				p.c = temp & 0x80;
				temp <<= 1;
				if (tempi)
					temp |= 1;
				writemem(addr, temp);
				setzn(temp);
				polltime(6);
				break;

			case 0x30: /*BMI*/
				offset = (int8_t)readmem(pc);
				pc++;
				temp = 2;
				if (p.n)
				{
					temp++;
					if ((pc & 0xFF00) ^ ((pc + offset) & 0xFF00))
						temp++;
					pc += offset;
				}
				polltime(temp);
				break;

			case 0x31: /*AND (),y*/
				temp = readmem(pc);
				pc++;
				addr = readmem(temp) + (readmem(temp + 1) << 8);
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				a &= readmem(addr + y);
				setzn(a);
				polltime(5);
				break;

			case 0x35: /*AND zp,x*/
				addr = readmem(pc);
				pc++;
				a &= ram[(addr + x) & 0xFF];
				setzn(a);
				polltime(3);
				break;

			case 0x36: /*ROL zp,x*/
				addr = readmem(pc);
				pc++;
				addr += x;
				addr &= 0xFF;
				temp = ram[addr];
				tempi = p.c;
				p.c = temp & 0x80;
				temp <<= 1;
				if (tempi)
					temp |= 1;
				setzn(temp);
				ram[addr] = temp;
				polltime(5);
				break;

			case 0x38: /*SEC*/
				p.c = 1;
				polltime(2);
				break;

			case 0x39: /*AND abs,y*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				a &= readmem(addr + y);
				setzn(a);
				polltime(4);
				break;

			case 0x3D: /*AND abs,x*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + x) & 0xFF00))
					polltime(1);
				addr += x;
				a &= readmem(addr);
				setzn(a);
				polltime(4);
				break;

			case 0x3E: /*ROL abs,x*/
				addr = getw();
				addr += x;
				temp = readmem(addr);
				tempi = p.c;
				p.c = temp & 0x80;
				temp <<= 1;
				if (tempi)
					temp |= 1;
				writemem(addr, temp);
				setzn(temp);
				polltime(7);
				break;

			case 0x40: /*RTI*/
					   //                                output=0;
				temp = pull();
				p.c = temp & 1;
				p.z = temp & 2;
				p.i = temp & 4;
				p.d = temp & 8;
				p.v = temp & 0x40;
				p.n = temp & 0x80;
				pc = pull();
				pc |= (pull() << 8);
				polltime(6);
				nmilock = 0;
				break;

			case 0x41: /*EOR (,x)*/
				temp = readmem(pc) + x;
				pc++;
				addr = readmem(temp) | (readmem(temp + 1) << 8);
				a ^= readmem(addr);
				setzn(a);
				polltime(6);
				break;

			case 0x45: /*EOR zp*/
				addr = readmem(pc);
				pc++;
				a ^= readmem(addr);
				setzn(a);
				polltime(3);
				break;

			case 0x46: /*LSR zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				p.c = temp & 1;
				temp >>= 1;
				setzn(temp);
				writemem(addr, temp);
				polltime(5);
				break;

			case 0x48: /*PHA*/
				push(a);
				polltime(3);
				break;

			case 0x49: /*EOR*/
				a ^= readmem(pc);
				pc++;
				setzn(a);
				polltime(2);
				break;

			case 0x4A: /*LSR A*/
				p.c = a & 1;
				a >>= 1;
				setzn(a);
				polltime(2);
				break;

			case 0x4C: /*JMP*/
				addr = getw();
				pc = addr;
				polltime(3);
				break;

			case 0x4D: /*EOR abs*/
				addr = getw();
				a ^= readmem(addr);
				setzn(a);
				polltime(4);
				break;

			case 0x4E: /*LSR abs*/
				addr = getw();
				polltime(4);
				temp = readmem(addr);
				polltime(1);
				writemem(addr, temp);
				polltime(1);
				p.c = temp & 1;
				temp >>= 1;
				setzn(temp);
				writemem(addr, temp);
				polltime(6);
				break;

			case 0x50: /*BVC*/
				offset = (int8_t)readmem(pc);
				pc++;
				temp = 2;
				if (!p.v)
				{
					temp++;
					if ((pc & 0xFF00) ^ ((pc + offset) & 0xFF00))
						temp++;
					pc += offset;
				}
				polltime(temp);
				break;

			case 0x51: /*EOR (),y*/
				temp = readmem(pc);
				pc++;
				addr = readmem(temp) + (readmem(temp + 1) << 8);
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				a ^= readmem(addr + y);
				setzn(a);
				polltime(5);
				break;

			case 0x55: /*EOR zp,x*/
				addr = readmem(pc);
				pc++;
				a ^= ram[(addr + x) & 0xFF];
				setzn(a);
				polltime(3);
				break;

			case 0x56: /*LSR zp,x*/
				addr = (readmem(pc) + x) & 0xFF;
				pc++;
				temp = ram[addr];
				p.c = temp & 1;
				temp >>= 1;
				setzn(temp);
				ram[addr] = temp;
				polltime(5);
				break;

			case 0x58: /*CLI*/
					   //                                if (pc<0x8000) printf("CLI at %04X\n",pc);
				p.i = 0;
				skipint = 1;
				polltime(2);
				break;

			case 0x59: /*EOR abs,y*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				a ^= readmem(addr + y);
				setzn(a);
				polltime(4);
				break;

			case 0x5D: /*EOR abs,x*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + x) & 0xFF00))
					polltime(1);
				addr += x;
				a ^= readmem(addr);
				setzn(a);
				polltime(4);
				break;

			case 0x5E: /*LSR abs,x*/
				addr = getw();
				addr += x;
				temp = readmem(addr);
				p.c = temp & 1;
				temp >>= 1;
				writemem(addr, temp);
				setzn(temp);
				polltime(7);
				break;

			case 0x60: /*RTS*/
				pc = pull();
				pc |= (pull() << 8);
				pc++;
				polltime(6);
				break;

			case 0x61: /*ADC (,x)*/
				temp = readmem(pc) + x;
				pc++;
				addr = readmem(temp) | (readmem(temp + 1) << 8);
				temp = readmem(addr);
				ADC(temp);
				polltime(6);
				break;

			case 0x65: /*ADC zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				ADC(temp);
				polltime(3);
				break;

			case 0x66: /*ROR zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				tempi = p.c;
				p.c = temp & 1;
				temp >>= 1;
				if (tempi)
					temp |= 0x80;
				setzn(temp);
				writemem(addr, temp);
				polltime(5);
				break;

			case 0x68: /*PLA*/
				a = pull();
				setzn(a);
				polltime(4);
				break;

			case 0x69: /*ADC imm*/
				temp = readmem(pc);
				pc++;
				ADC(temp);
				polltime(2);
				break;

			case 0x6A: /*ROR A*/
				tempi = p.c;
				p.c = a & 1;
				a >>= 1;
				if (tempi)
					a |= 0x80;
				setzn(a);
				polltime(2);
				break;

			case 0x6C: /*JMP ()*/
				addr = getw();
				if ((addr & 0xFF) == 0xFF)
					pc = readmem(addr) | (readmem(addr - 0xFF) << 8);
				else
					pc = readmem(addr) | (readmem(addr + 1) << 8);
				polltime(5);
				break;

			case 0x6D: /*ADC abs*/
				addr = getw();
				temp = readmem(addr);
				ADC(temp);
				polltime(4);
				break;

			case 0x6E: /*ROR abs*/
				addr = getw();
				polltime(4);
				temp = readmem(addr);
				polltime(1);
				writemem(addr, temp);
				polltime(1);
				tempi = p.c;
				p.c = temp & 1;
				temp >>= 1;
				if (tempi)
					temp |= 0x80;
				setzn(temp);
				writemem(addr, temp);
				break;

			case 0x70: /*BVS*/
				offset = (int8_t)readmem(pc);
				pc++;
				temp = 2;
				if (p.v)
				{
					temp++;
					if ((pc & 0xFF00) ^ ((pc + offset) & 0xFF00))
						temp++;
					pc += offset;
				}
				polltime(temp);
				break;

			case 0x71: /*ADC (),y*/
				temp = readmem(pc);
				pc++;
				addr = readmem(temp) + (readmem(temp + 1) << 8);
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				temp = readmem(addr + y);
				ADC(temp);
				polltime(5);
				break;

			case 0x75: /*ADC zp,x*/
				addr = readmem(pc);
				pc++;
				temp = ram[(addr + x) & 0xFF];
				ADC(temp);
				polltime(4);
				break;

			case 0x76: /*ROR zp,x*/
				addr = readmem(pc);
				pc++;
				addr += x;
				addr &= 0xFF;
				temp = ram[addr];
				tempi = p.c;
				p.c = temp & 1;
				temp >>= 1;
				if (tempi)
					temp |= 0x80;
				setzn(temp);
				ram[addr] = temp;
				polltime(5);
				break;

			case 0x78: /*SEI*/
					   //                                if (pc<0x8000) printf("SEI at %04X\n",pc);
				p.i = 1;
				polltime(2);
				//                                if (output2) printf("SEI at line %i %04X %02X %02X\n",lines,pc,ram[0x103+s],ram[0x104+s]);
				break;

			case 0x79: /*ADC abs,y*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				temp = readmem(addr + y);
				ADC(temp);
				polltime(4);
				break;

			case 0x7D: /*ADC abs,x*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + x) & 0xFF00))
					polltime(1);
				addr += x;
				temp = readmem(addr);
				ADC(temp);
				polltime(4);
				break;

			case 0x7E: /*ROR abs,x*/
				addr = getw();
				addr += x;
				temp = readmem(addr);
				tempi = p.c;
				p.c = temp & 1;
				temp >>= 1;
				if (tempi)
					temp |= 0x80;
				writemem(addr, temp);
				setzn(temp);
				polltime(7);
				break;

			case 0x81: /*STA (,x)*/
				temp = readmem(pc) + x;
				pc++;
				addr = readmem(temp) | (readmem(temp + 1) << 8);
				writemem(addr, a);
				polltime(6);
				break;

			case 0x84: /*STY zp*/
				addr = readmem(pc);
				pc++;
				writemem(addr, y);
				polltime(3);
				break;

			case 0x85: /*STA zp*/
				addr = readmem(pc);
				pc++;
				writemem(addr, a);
				polltime(3);
				break;

			case 0x86: /*STX zp*/
				addr = readmem(pc);
				pc++;
				writemem(addr, x);
				polltime(3);
				break;

			case 0x88: /*DEY*/
				y--;
				setzn(y);
				polltime(2);
				break;

			case 0x8A: /*TXA*/
				a = x;
				setzn(a);
				polltime(2);
				break;

			case 0x8C: /*STY abs*/
				addr = getw();
				polltime(3);
				writemem(addr, y);
				polltime(1);
				break;

			case 0x8D: /*STA abs*/
				addr = getw();
				polltime(3);
				writemem(addr, a);
				polltime(1);
				break;

			case 0x8E: /*STX abs*/
				addr = getw();
				polltime(3);
				writemem(addr, x);
				polltime(1);
				break;

			case 0x90: /*BCC*/
				offset = (int8_t)readmem(pc);
				pc++;
				temp = 2;
				if (!p.c)
				{
					temp++;
					if ((pc & 0xFF00) ^ ((pc + offset) & 0xFF00))
						temp++;
					pc += offset;
				}
				polltime(temp);
				break;

			case 0x91: /*STA (),y*/
				temp = readmem(pc);
				pc++;
				addr = readmem(temp) + (readmem(temp + 1) << 8) + y;
				writemem(addr, a);
				polltime(6);
				break;

			case 0x94: /*STY zp,x*/
				addr = readmem(pc);
				pc++;
				ram[(addr + x) & 0xFF] = y;
				polltime(4);
				break;

			case 0x95: /*STA zp,x*/
				addr = readmem(pc);
				pc++;
				writemem((addr + x) & 0xFF, a);
				//                                ram[(addr+x)&0xFF]=a;
				polltime(4);
				break;

			case 0x96: /*STX zp,y*/
				addr = readmem(pc);
				pc++;
				ram[(addr + y) & 0xFF] = x;
				polltime(4);
				break;

			case 0x98: /*TYA*/
				a = y;
				setzn(a);
				polltime(2);
				break;

			case 0x99: /*STA abs,y*/
				addr = getw();
				polltime(4);
				writemem(addr + y, a);
				polltime(1);
				break;

			case 0x9A: /*TXS*/
				s = x;
				polltime(2);
				break;

			case 0x9D: /*STA abs,x*/
				addr = getw();
				polltime(4);
				writemem(addr + x, a);
				polltime(1);
				break;

			case 0xA0: /*LDY imm*/
				y = readmem(pc);
				pc++;
				setzn(y);
				polltime(2);
				break;

			case 0xA1: /*LDA (,x)*/
				temp = readmem(pc) + x;
				pc++;
				addr = readmem(temp) | (readmem(temp + 1) << 8);
				a = readmem(addr);
				setzn(a);
				polltime(6);
				break;

			case 0xA2: /*LDX imm*/
				x = readmem(pc);
				pc++;
				setzn(x);
				polltime(2);
				break;

			case 0xA4: /*LDY zp*/
				addr = readmem(pc);
				pc++;
				y = readmem(addr);
				setzn(y);
				polltime(3);
				break;

			case 0xA5: /*LDA zp*/
				addr = readmem(pc);
				pc++;
				a = readmem(addr);
				setzn(a);
				polltime(3);
				break;

			case 0xA6: /*LDX zp*/
				addr = readmem(pc);
				pc++;
				x = readmem(addr);
				setzn(x);
				polltime(3);
				break;

			case 0xA8: /*TAY*/
				y = a;
				setzn(y);
				break;

			case 0xA9: /*LDA imm*/
				a = readmem(pc);
				pc++;
				setzn(a);
				polltime(2);
				break;

			case 0xAA: /*TAX*/
				x = a;
				setzn(x);
				polltime(2);
				break;

			case 0xAC: /*LDY abs*/
				addr = getw();
				polltime(3);
				y = readmem(addr);
				setzn(y);
				polltime(1);
				break;

			case 0xAD: /*LDA abs*/
				addr = getw();
				polltime(3);
				a = readmem(addr);
				setzn(a);
				polltime(1);
				break;

			case 0xAE: /*LDX abs*/
				addr = getw();
				polltime(3);
				x = readmem(addr);
				setzn(x);
				polltime(1);
				break;

			case 0xB0: /*BCS*/
				offset = (int8_t)readmem(pc);
				pc++;
				temp = 2;
				if (p.c)
				{
					temp++;
					if ((pc & 0xFF00) ^ ((pc + offset) & 0xFF00))
						temp++;
					pc += offset;
				}
				polltime(temp);
				break;

			case 0xB1: /*LDA (),y*/
				temp = readmem(pc);
				pc++;
				addr = readmem(temp) + (readmem(temp + 1) << 8);
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				a = readmem(addr + y);
				setzn(a);
				polltime(5);
				break;

			case 0xB4: /*LDY zp,x*/
				addr = readmem(pc);
				pc++;
				y = ram[(addr + x) & 0xFF];
				setzn(y);
				polltime(3);
				break;

			case 0xB5: /*LDA zp,x*/
				addr = readmem(pc);
				pc++;
				a = ram[(addr + x) & 0xFF];
				setzn(a);
				polltime(3);
				break;

			case 0xB6: /*LDX zp,y*/
				addr = readmem(pc);
				pc++;
				x = ram[(addr + y) & 0xFF];
				setzn(x);
				polltime(3);
				break;

			case 0xB8: /*CLV*/
				p.v = 0;
				polltime(2);
				break;

			case 0xB9: /*LDA abs,y*/
				addr = getw();
				polltime(3);
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				a = readmem(addr + y);
				setzn(a);
				polltime(1);
				break;

			case 0xBA: /*TSX*/
				x = s;
				setzn(x);
				polltime(2);
				break;

			case 0xBC: /*LDY abs,x*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + x) & 0xFF00))
					polltime(1);
				y = readmem(addr + x);
				setzn(y);
				polltime(4);
				break;

			case 0xBD: /*LDA abs,x*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + x) & 0xFF00))
					polltime(1);
				a = readmem(addr + x);
				setzn(a);
				polltime(4);
				break;

			case 0xBE: /*LDX abs,y*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				x = readmem(addr + y);
				setzn(x);
				polltime(4);
				break;

			case 0xC0: /*CPY imm*/
				temp = readmem(pc);
				pc++;
				setzn(y - temp);
				p.c = (y >= temp);
				polltime(2);
				break;

			case 0xC1: /*CMP (,x)*/
				temp = readmem(pc) + x;
				pc++;
				addr = readmem(temp) | (readmem(temp + 1) << 8);
				temp = readmem(addr);
				setzn(a - temp);
				p.c = (a >= temp);
				polltime(6);
				break;

			case 0xC4: /*CPY zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				setzn(y - temp);
				p.c = (y >= temp);
				polltime(3);
				break;

			case 0xC5: /*CMP zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				setzn(a - temp);
				p.c = (a >= temp);
				polltime(3);
				break;

			case 0xC6: /*DEC zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr) - 1;
				writemem(addr, temp);
				setzn(temp);
				polltime(5);
				break;

			case 0xC8: /*INY*/
				y++;
				setzn(y);
				polltime(2);
				break;

			case 0xC9: /*CMP imm*/
				temp = readmem(pc);
				pc++;
				setzn(a - temp);
				p.c = (a >= temp);
				polltime(2);
				break;

			case 0xCA: /*DEX*/
				x--;
				setzn(x);
				polltime(2);
				break;

			case 0xCC: /*CPY abs*/
				addr = getw();
				temp = readmem(addr);
				setzn(y - temp);
				p.c = (y >= temp);
				polltime(4);
				break;

			case 0xCD: /*CMP abs*/
				addr = getw();
				temp = readmem(addr);
				setzn(a - temp);
				p.c = (a >= temp);
				polltime(4);
				break;

			case 0xCE: /*DEC abs*/
				addr = getw();
				polltime(4);
				temp = readmem(addr) - 1;
				polltime(1);
				writemem(addr, temp + 1);
				polltime(1);
				writemem(addr, temp);
				setzn(temp);
				break;

			case 0xD0: /*BNE*/
				offset = (int8_t)readmem(pc);
				pc++;
				temp = 2;
				if (!p.z)
				{
					temp++;
					if ((pc & 0xFF00) ^ ((pc + offset) & 0xFF00))
						temp++;
					pc += offset;
				}
				polltime(temp);
				break;

			case 0xD1: /*CMP (),y*/
				temp = readmem(pc);
				pc++;
				addr = readmem(temp) + (readmem(temp + 1) << 8);
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				temp = readmem(addr + y);
				setzn(a - temp);
				p.c = (a >= temp);
				polltime(5);
				break;

			case 0xD5: /*CMP zp,x*/
				addr = readmem(pc);
				pc++;
				temp = ram[(addr + x) & 0xFF];
				setzn(a - temp);
				p.c = (a >= temp);
				polltime(3);
				break;

			case 0xD6: /*DEC zp,x*/
				addr = readmem(pc);
				pc++;
				ram[(addr + x) & 0xFF]--;
				setzn(ram[(addr + x) & 0xFF]);
				polltime(5);
				break;

			case 0xD8: /*CLD*/
				p.d = 0;
				polltime(2);
				break;

			case 0xD9: /*CMP abs,y*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				temp = readmem(addr + y);
				setzn(a - temp);
				p.c = (a >= temp);
				polltime(4);
				break;

			case 0xDD: /*CMP abs,x*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + x) & 0xFF00))
					polltime(1);
				temp = readmem(addr + x);
				setzn(a - temp);
				p.c = (a >= temp);
				polltime(4);
				break;

			case 0xDE: /*DEC abs,x*/
				addr = getw();
				addr += x;
				temp = readmem(addr) - 1;
				writemem(addr, temp);
				setzn(temp);
				polltime(6);
				break;

			case 0xE0: /*CPX imm*/
				temp = readmem(pc);
				pc++;
				setzn(x - temp);
				p.c = (x >= temp);
				polltime(3);
				break;

				/*SP8 CHANGE SBC(oper,X) */

			case 0xE1: /*SBC (,x)*/
				temp = readmem(pc) + x;
				pc++;
				addr = readmem(temp) | (readmem(temp + 1) << 8);
				temp = readmem(addr);
				SBC(temp);
				polltime(6);
				break;

				/*SP8 END */

			case 0xE4: /*CPX zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				setzn(x - temp);
				p.c = (x >= temp);
				polltime(3);
				break;

			case 0xE5: /*SBC zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr);
				SBC(temp);
				polltime(3);
				break;

			case 0xE6: /*INC zp*/
				addr = readmem(pc);
				pc++;
				temp = readmem(addr) + 1;
				writemem(addr, temp);
				setzn(temp);
				polltime(5);
				break;

			case 0xE8: /*INX*/
				x++;
				setzn(x);
				polltime(2);
				break;

			case 0xE9: /*SBC imm*/
				temp = readmem(pc);
				pc++;
				SBC(temp);
				polltime(2);
				break;

			case 0xEA: /*NOP*/
				polltime(2);
				break;

			case 0xEC: /*CPX abs*/
				addr = getw();
				temp = readmem(addr);
				setzn(x - temp);
				p.c = (x >= temp);
				polltime(3);
				break;

			case 0xED: /*SBC abs*/
				addr = getw();
				temp = readmem(addr);
				SBC(temp);
				polltime(4);
				break;

			case 0xEE: /*DEC abs*/
				addr = getw();
				polltime(4);
				temp = readmem(addr) + 1;
				polltime(1);
				writemem(addr, temp - 1);
				polltime(1);
				writemem(addr, temp);
				setzn(temp);
				break;

			case 0xF0: /*BEQ*/
				offset = (int8_t)readmem(pc);
				pc++;
				temp = 2;
				if (p.z)
				{
					temp++;
					if ((pc & 0xFF00) ^ ((pc + offset) & 0xFF00))
						temp++;
					pc += offset;
				}
				polltime(temp);
				break;

			case 0xF1: /*SBC (),y*/
				temp = readmem(pc);
				pc++;
				addr = readmem(temp) + (readmem(temp + 1) << 8);
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				temp = readmem(addr + y);
				SBC(temp);
				polltime(5);
				break;

			case 0xF5: /*SBC zp,x*/
				addr = readmem(pc);
				pc++;
				temp = ram[(addr + x) & 0xFF];
				SBC(temp);
				polltime(3);
				break;

			case 0xF6: /*INC zp,x*/
				addr = readmem(pc);
				pc++;
				ram[(addr + x) & 0xFF]++;
				setzn(ram[(addr + x) & 0xFF]);
				polltime(5);
				break;

			case 0xF8: /*SED*/
				p.d = 1;
				polltime(2);
				break;

			case 0xF9: /*SBC abs,y*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + y) & 0xFF00))
					polltime(1);
				temp = readmem(addr + y);
				SBC(temp);
				polltime(4);
				break;

			case 0xFD: /*SBC abs,x*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + x) & 0xFF00))
					polltime(1);
				temp = readmem(addr + x);
				SBC(temp);
				polltime(4);
				break;

			case 0xFE: /*INC abs,x*/
				addr = getw();
				addr += x;
				temp = readmem(addr) + 1;
				writemem(addr, temp);
				setzn(temp);
				polltime(6);
				break;

			case 0x04: /*Undocumented - NOP zp*/
				addr = readmem(pc);
				pc++;
				polltime(3);
				break;

			case 0xF4: /*Undocumented - NOP zpx*/
				addr = readmem(pc);
				pc++;
				polltime(4);
				break;

			case 0xA3: /*Undocumented - LAX (,y)*/
				temp = readmem(pc) + x;
				pc++;
				addr = readmem(temp) | (readmem(temp + 1) << 8);
				a = x = readmem(addr);
				setzn(a);
				polltime(6);
				break;

			case 0x07: /*Undocumented - SLO zp*/
				addr = readmem(pc);
				pc++;
				c = ram[addr] & 0x80;
				ram[addr] <<= 1;
				a |= ram[addr];
				setzn(a);
				polltime(5);
				break;

			case 0x23: /*Undocumented - RLA*/
				break;   /*This was found in Repton 3 and
											   looks like a mistake, so I'll
											   ignore it for now*/

			case 0x2F:       /*Undocumented - RLA abs*/
				addr = getw(); /*Found in The Hobbit*/
				temp = readmem(addr);
				tempi = p.c;
				p.c = temp & 0x80;
				temp <<= 1;
				if (tempi)
					temp |= 1;
				writemem(addr, temp);
				a &= temp;
				setzn(a);
				polltime(6);
				break;

			case 0x4B: /*Undocumented - ASR*/
				a &= readmem(pc);
				pc++;
				p.c = a & 1;
				a >>= 1;
				setzn(a);
				polltime(2);
				break;

			case 0x67: /*Undocumented - RRA zp*/
				addr = readmem(pc);
				pc++;
				ram[addr] >>= 1;
				if (p.c)
					ram[addr] |= 1;
				temp = ram[addr];
				ADC(temp);
				polltime(5);
				break;

			case 0x80: /*Undocumented - NOP imm*/
				readmem(pc);
				pc++;
				polltime(2);
				break;

			case 0x87: /*Undocumented - SAX zp*/
				addr = readmem(pc);
				pc++;
				ram[addr] = a & x;
				polltime(3);
				break;

			case 0x9C: /*Undocumented - SHY abs,x*/
				addr = getw();
				writemem(addr + x, y & ((addr >> 8) + 1));
				polltime(5);
				break;

			case 0xDA: /*Undocumented - NOP*/
					   //                                case 0xFA:
				polltime(2);
				break;

			case 0xDC: /*Undocumented - NOP abs,x*/
				addr = getw();
				if ((addr & 0xFF00) ^ ((addr + x) & 0xFF00))
					polltime(1);
				readmem(addr + x);
				polltime(4);
				break;

			default:
				switch (opcode & 0xF)
				{
				case 0xA:
					break;
				case 0x0:
				case 0x2:
				case 0x3:
				case 0x4:
				case 0x7:
				case 0x9:
				case 0xB:
					pc++;
					break;
				case 0xC:
				case 0xE:
				case 0xF:
					pc += 2;
					break;
				}
			}
			oldcyc -= cycles;
			/*                        if (!pc)
											  {
													  printf("PC at 0\n");
													  dumpregs();
													  dumpram();
													  exit(-1);
											  }
											  //                        if (pc==0x8000) a=1;
					  if (pc == 0xC2CF || pc < 0x8000)
						  tapeon = 0;
					  if (pc == 0xFB8E)
						  tapeon = 1; */
						  /*                        if (pc==0xFC23)
															{
																	rpclog("Cassette byte - %02X %c",a,a);
																	rpclog("\n");
																	if (a!=lastdat) rpclog("Doesn't match!\n");
															}*/
															/*                        if (pc==0xFC1E) rpclog("COS received %02X %c\n",a,(a&0xE0)?a:a+0x20);
																													  if (pc==0xFBC7) rpclog("Preamble test returned - %i\n",p.c);
																													  if (pc==0xFBD3) rpclog("Finished loading filename - %02X %02X %02X %02X %02X %02X\n",ram[0xED],ram[0xEE],ram[0xEF],ram[0xF0],ram[0xF1],ram[0xF2]);
																													  if (pc==0xFBDB) rpclog("Compare %02X with %02X - %i\n",a,ram[0xED+y],p.z);
																													  if (pc==0xFBE1) rpclog("Filename match\n");
																													  if (pc==0xF9E0) rpclog("Loading block...\n");
																													  if (pc==0xFA07) rpclog("Finished block, %i\n",p.c);*/
																													  //                        if (pc==0xF172) output=1;
																													  //                        if (output)
			debugdisaddr = pc;
			debugdisassemble();
			sprintf(outs, "%02X A=%02X X=%02X Y=%02X PC=%04X %c%c%c%c%c%c %i\n", opcode, a, x, y, pc, (p.n) ? 'N' : ' ', (p.v) ? 'V' : ' ', (p.d) ? 'D' : ' ', (p.i) ? 'I' : ' ', (p.z) ? 'Z' : ' ', (p.c) ? 'C' : ' ', totcyc);
			fpclog(outs, pc);
			ins++;
			/*                        if (timetolive)
											  {
													  timetolive--;
													  if (!timetolive) exit(-1);
											  }*/
			if (nmi && !oldnmi)
			{
				push(pc >> 8);
				push(pc & 0xFF);
				temp = 0x20;
				if (p.c)
					temp |= 1;
				if (p.z)
					temp |= 2;
				if (p.i)
					temp |= 4;
				if (p.d)
					temp |= 8;
				if (p.v)
					temp |= 0x40;
				if (p.n)
					temp |= 0x80;
				push(temp);
				pc = readmem(0xFFFA) | (readmem(0xFFFB) << 8);
				p.i = 1;
				polltime(7);
				nmi = 0;
				nmilock = 1;
				//                                rpclog("NMI %04X\n",pc);
			}
			oldnmi = nmi;

			if ((interrupt && !p.i && !skipint) || skipint == 2)
			{
				//                                printf("Intrupt\n");
				//                                if (skipint==2) printf("interrupt\n");
				//				rpclog("Interrupt\n");
				skipint = 0;
				push(pc >> 8);
				push(pc & 0xFF);
				temp = 0x20;
				if (p.c)
					temp |= 1;
				if (p.z)
					temp |= 2;
				if (p.i)
					temp |= 4;
				if (p.d)
					temp |= 8;
				if (p.v)
					temp |= 0x40;
				if (p.n)
					temp |= 0x80;
				push(temp);
				pc = readmem(0xFFFE) | (readmem(0xFFFF) << 8);
				p.i = 1;
				polltime(7);
				//                                if (pc<0x100)
				//                                {
				//                                        printf("Interrupt line %i %04X %04X %02X %02X %02X %02X %i %i %i\n",lines,cia2.t1c,cia2.t2c,cia1.ifr,vic.ifr,cia2.ifr,cia2.ier,nmi,oldnmi,nmilock);
				//                                        output2=1;
				//                                }
				//                                output=1;
				//                                printf("Interrupt line %i %i %02X %02X %02X %02X\n",interrupt,lines,sysvia.ifr&sysvia.ier,uservia.ifr&uservia.ier,uservia.ier,uservia.ifr);
			}
			if (interrupt && !p.i && skipint)
			{
				skipint = 2;
				//                                printf("skipint=2\n");
			}
		}
		 }
	}
	//        rpclog("Exec over\n");
}

void load_rom(int Size, int Offset)
{
	FILE* RomFile;
	int 	bytes;
	char Name[] = "C:/Users/LEENDERTBIJNAGTE/Dropbox/AtomFP/AtomulatorWinV1.28/Atomulator-master/roms/akernel.rom";

	// rpclog("loading rom %s at %05X, size=%04X ", Name, Offset, Size);

	RomFile = fopen(Name, "rb");
	if (RomFile != NULL)
	{
		bytes = fread(&rom[Offset], 1, Size, RomFile);
		fclose(RomFile);

		// rpclog("bytes read %X\n", bytes);
	}
	// else
		// rpclog("Loading %s failed !\n", Name);
}


void loadd_rom(int Size, int Offset)
{
	FILE* RomFile;
	int 	bytes;
	char Name[] = "C:/Users/LEENDERTBIJNAGTE/source/repos/MQTT/roms/dosrom.rom";
	//C:\Users\LEENDERTBIJNAGTE\Dropbox\AtomFP\bin\dist

		// rpclog("loading rom %s at %05X, size=%04X ", Name, Offset, Size);

	RomFile = fopen(Name, "rb");
	if (RomFile != NULL)
	{
		bytes = fread(&rom[Offset], 1, Size, RomFile);
		fclose(RomFile);

		// rpclog("bytes read %X\n", bytes);
	}
	// else
		// rpclog("Loading %s failed !\n", Name);
}

void loada_rom(int Size, int Offset)
{
	FILE* RomFile;
	int 	bytes;
	char Name[] = "C:/Users/LEENDERTBIJNAGTE/Dropbox/AtomFP/AtomulatorWinV1.28/Atomulator-master/roms/axr1.rom";
	//C:\Users\LEENDERTBIJNAGTE\Dropbox\AtomFP\bin\dist

		// rpclog("loading rom %s at %05X, size=%04X ", Name, Offset, Size);

	RomFile = fopen(Name, "rb");
	if (RomFile != NULL)
	{
		bytes = fread(&rom[Offset], 1, Size, RomFile);
		fclose(RomFile);

		// rpclog("bytes read %X\n", bytes);
	}
	// else
		// rpclog("Loading %s failed !\n", Name);
}

void loadfp_rom(int Size, int Offset)
{
	FILE* RomFile;
	int 	bytes;
	char Name[] = "C:/Users/LEENDERTBIJNAGTE/Dropbox/AtomFP/bin/dist/001.bin";
	

		// rpclog("loading rom %s at %05X, size=%04X ", Name, Offset, Size);

	RomFile = fopen(Name, "rb");
	if (RomFile != NULL)
	{
		bytes = fread(&rom[Offset], 1, Size, RomFile);
		fclose(RomFile);

		// rpclog("bytes read %X\n", bytes);
	}
	// else
		// rpclog("Loading %s failed !\n", Name);
}


void loadroms()
{
	load_rom( ROM_SIZE_ATOM, 0xF000);
	loadfp_rom(ROM_SIZE_ATOM, 0xD000);
	loadd_rom(ROM_SIZE_ATOM, 0xe000);
//	loada_rom(ROM_SIZE_ATOM, 0xa000);

	//load_rom("roms/afloat.rom", ROM_SIZE_ATOM, ROM_OFS_AFLOAT);
	//load_rom("roms/abasic.rom", ROM_SIZE_ATOM, ROM_OFS_ABASIC);
	//load_rom("roms/axr1.rom", ROM_SIZE_ATOM, ROM_OFS_UTILITY);
	//load_rom("roms/ramrom.rom", RAM_ROM_SIZE, ROM_OFS_RAMROM);
	//load_rom("roms/gdos2015.rom", ROM_SIZE_GDOS2015, ROM_OFS_GDOS2015);
	memcpy(&rom[0xc000], CrawData, 4096);
	abasic_ptr = &rom[0xc000];
	//memcpy(&rom[0xd000], DrawData, 4096);
	afloat_ptr = &rom[0xd000];
	dosrom_ptr = &rom[0xe000];
	utility_ptr = &rom[0xa000];
	//memcpy(&rom[0xf000], FrawData, 4096);
	akernel_ptr = &rom[0xf000];
	memcpy(&ram[0x2900], Invader + 0X16, sizeof(Invader));

}

void init8255()
{
	int c, d;

	memset(keyl, 0, sizeof(keyl));
	for (c = 0; c < 16; c++)
	{
		for (d = 0; d < 6; d++)
		{
			keyl[keys[c][d]] = c | (d << 4) | 0x80;
		}
	}
}


int keyrow;

void write8255(uint16_t addr, uint8_t val)
{
	int oldgfx = gfxmode;

	switch (addr & 0xF)
	{
	case 0:
		keyrow = val & 0xF;
		//                if (gfxmode!=(val>>4)) printf("GFX mode now %02X %04X\n",val,pc);
		gfxmode = (val >> 4) & 0x0F;
		if (gfxmode != oldgfx)
			printf("gfxmode changed at PC=%04X from %02X to %02X\n", pc, oldgfx, gfxmode);
		if ((gfxmode == 0x0f) && (bGraph == FALSE)) {
			bGraph = TRUE;
		}

		//                printf("GFX mode now %02X %04X\n",val,pc);
		//                printf("Keyrow now %i %04X\n",keyrow,pc);
		break;
	case 2:
		css = (val & 8) >> 2;
		speaker = val & 4;
		//		rpclog("Speaker %i\n", (val & 4) >> 2);
		break;
	case 3:
		switch (val & 0xE)
		{
		case 0x4:
			speaker = val & 1;
			//rpclog("Speaker %i\n", (val & 4) >> 2);
			break;

		case 0x6:
			css = (val & 1) ? 2 : 0;
			break;
		}
		break;
		//                        rpclog("8255 port 3 %02X\n",val);
	}
	//        printf("Write 8255 %04X %02X\n",addr,val);
}

uint8_t read8255(uint16_t addr)
{
	uint8_t temp = 0xFF;
	int c;
	int lb;
	int wc = 0;

	//        printf("Read 8255 %04X %04X\n",addr,pc);
	switch (addr & 3)
	{
	case 0:
		return (keyrow & 0x0F) | ((gfxmode << 4) & 0xF0);
	case 1:
		for (c = 0; c < 128; c++)
		{
			if (key[c] && keyl[keylookup[c]] & 0x80 && keyrow == (keyl[keylookup[c]] & 0xF))
				temp &= ~(1 << ((keyl[keylookup[c]] & 0x70) >> 4));
			if (key[c] && keylookup[c] == _a_KEY_LCONTROL)
				temp &= ~0x40;
			if (key[c] && (keylookup[c] == _a_KEY_LSHIFT || keylookup[c] == _a_KEY_RSHIFT))
				temp &= ~0x80;
		}
		lb = temp;
		if (lb != 255)
			lb = temp;
		/*                if (key[keys[keyrow][0]]) temp&=~1;
						if (key[keys[keyrow][1]]) temp&=~2;
						if (key[keys[keyrow][2]]) temp&=~4;
						if (key[keys[keyrow][3]]) temp&=~8;
						if (key[keys[keyrow][4]]) temp&=~0x10;
						if (key[keys[keyrow][5]]) temp&=~0x20;
						if (key[keys2[keyrow][0]]) temp&=~1;
						if (key[keys2[keyrow][1]]) temp&=~2;
						if (key[keys2[keyrow][2]]) temp&=~4;
						if (key[keys2[keyrow][3]]) temp&=~8;
						if (key[keys2[keyrow][4]]) temp&=~0x10;
						if (key[keys2[keyrow][5]]) temp&=~0x20;
		   //                rpclog("temp=%02X\n",temp);*/
		   //                if (key[keylookup[KEY_LCONTROL]] || key[keylookup[KEY_RCONTROL]]) temp&=~0x40;
		   //                if (key[keylookup[KEY_LSHIFT]] || key[keylookup[KEY_RSHIFT]]) temp&=~0x80;

		   // SP10 KEYBOARD JOYSTICK
		// SP10 END

		return temp;
	case 2:
		if (vbl)
			temp &= ~0x80;
		if (key[KEY_ALT] || key[KEY_ALTGR])
			temp &= ~0x40;
		if (!css)
			temp &= ~8;
		if (!speaker)
			temp &= ~4;
		//                printf("VBL %i %04X\n",vbl,pc);
		return temp;
		//                default:
		//                printf("Read 8255 %04X\n",addr);
	}
	return 0;
}

void updateIFR()
{
	if ((via.ifr & 0x7F) & (via.ier & 0x7F))
	{
		via.ifr |= 0x80;
		interrupt |= 2;
	}
	else
	{
		via.ifr &= ~0x80;
		interrupt &= ~2;
	}
}

int timerout = 1;
int lns;
void updatetimers()
{
	if (via.t1c < -3)
	{
		while (via.t1c < -3)
			via.t1c += via.t1l + 4;
		if (!via.t1hit)
		{
			via.ifr |= TIMER1INT;
			updateIFR();
		}

		if ((via.acr & 0x80) && !via.t1hit)
		{
			via.orb ^= 0x80;
			via.irb ^= 0x80;
			via.portb ^= 0x80;
			timerout ^= 1;
		}

		if (!(via.acr & 0x40))
			via.t1hit = 1;
	}

	if (!(via.acr & 0x20) /* && !via.t2hit*/)
	{
		if (via.t2c < -3 && !via.t2hit)
		{
			//                        via.t2c+=via.t2l+4;
			//                        rpclog(" Timer 2 reset %05X %05X %04X\n",via.t2c,via.t2l,pc);
			if (!via.t2hit)
			{
				via.ifr |= TIMER2INT;
				updateIFR();
				//                                output=1;
			}
			via.t2hit = 1;
		}
	}
}

void writekey(uint16_t addr, uint8_t val)
{
	keyleen.key = val;
}

double ActionFP(double arg1, double arg2, int functie) 
{
	return 0;
}
static uint8_t fpstatus = 0;

byte bATOM[5], cATOM[5];

int FPGA2Atom(double waarde) {
union Data {
	double x;
	byte INTEL[8];
} data;
if (waarde == 0.0) {
	bATOM[0] = 0;
}
else {
	data.x = waarde;
	__asm
	{
		; mov eax, num; Get first argument
		; mov ecx, power; Get second argument
		; shl eax, cl; EAX = EAX * (2 to the power of CL)
		;
		; atom
			MOV AH, BYTE PTR data.INTEL[7]; LAADT MANTISSA IN AX : BX:BX
			MOV AL, BYTE PTR data.INTEL[6]
			MOV BH, BYTE PTR data.INTEL[5]
			MOV BL, BYTE PTR data.INTEL[4]
			MOV DH, BYTE PTR data.INTEL[3]
			MOV DL, BYTE PTR data.INTEL[2]
			MOV CX, 11; LAADT TELLER
			LB1 : SHL DX, 1; SCHUIF LINKS
			RCL BX, 1
			RCL AX, 1
			dec		cx
			jnz		LB1
			;  LOOP LB1; ELF MAAL DOEN
			SHL AX, 1; EVEN OPSCHUIVEN
			MOV CL, BYTE PTR data.INTEL[7]; LEES TEKEN VAN INTEL
			SHL CL, 1; SCHUIF TEKEN IN CARRY
			RCR AX, 1; SCHUIF TEKEN IN MANTISSA
			MOV BYTE PTR bATOM[1], AH; ATOM MANTISSA WEGSCHRIJVEN
			MOV BYTE PTR bATOM[2], AL
			MOV BYTE PTR bATOM[3], BH
			MOV BYTE PTR bATOM[4], BL
			MOV AH, BYTE PTR data.INTEL[7]; LAADT INTEL EXPONENT
			MOV AL, BYTE PTR data.INTEL[6]
			MOV CL, 4; LAADT TELLER
			SHR AX, CL; BEPAAL EXPONENT
			AND AX, 7FFH; ALLEEN ONDERSTE 11 BITS
			SUB AX, 1022; ATOM EXPONENT BEREKENEN
			PUSHF; SAVE CARRY
			SHL AL, 1; EVEN PLAATSMAKEN VOOR BIAS
			POPF; HAAL CARRY TERUG
			RCR AL, 1; ZET CARRY ALS BIAS
			XOR AL, 80h; INVERTEER OM KLOPPEND TE MAKEN
			MOV BYTE PTR bATOM[0], AL; BERG ATOM EXPONENT OP
			nop
			;   RET; doet de lus al..

	}
	// Return with result in EAX
	// waarde staat in de bAtomtabel..
}
}

double Atom2FPGA() {
	union Data {
		double x;
		byte INTEL[8];
	} data;
	static int j = 0;

	for (int i = 0; i < 5; i++) {
		j = j + bATOM[i];
	}
	if (j == 0) {
		data.x = 0;
}
	else {
		__asm
		{
			XOR     AX, AX; CLEAR INTEL WAARDE
			MOV     WORD PTR data.INTEL[0], AX
			MOV     WORD PTR data.INTEL[2], AX
			MOV     WORD PTR data.INTEL[4], AX
			MOV     WORD PTR data.INTEL[6], AX
			MOV     AH, BYTE PTR bATOM[1]; ATOM MANTISSA NAAR AX : BX
			MOV     AL, BYTE PTR bATOM[2]
			MOV     BH, BYTE PTR bATOM[3]
			MOV     BL, BYTE PTR bATOM[4]
			XOR     DX, DX; DX OOK BIJ INTEL MANTISSA
			MOV     CX, 11; LAADT TELLER
			ATEL1 : SHR     AX, 1; SCHUIF MANTISSA DRIE BITS
			RCR     BX, 1
			RCR     DX, 1
			dec		cx
			JNZ		ATEL1
			; LOOP    ATEL1
			MOV     CL, BYTE PTR bATOM[1]; LAADT SIGN BIT IN CL7
			xor cl, 80h; sign omdraaien
			SHL     AX, 1; MAAK PLAATS VOOR SIGN BIT
			SHL     CL, 1; ZET SIGN BIT IN CARRY
			RCR     AX, 1; SCHUIF SIGN BIT IN AX
			AND     AX, 1000000000001111B; EXPONENT NOG BEREKENEN
			MOV     CL, BYTE PTR bATOM[0]; LAADT EXPONENT IN CL
			XOR     CL, 80H; INVERTEER BIAS BIT
			XCHG    AX, CX; WISSEL AX EN CX TIJDELIJK
			CBW
			XCHG    AX, CX; WISSEL AX EN CX WEER
			ADD     CX, 1022; BEREKEN INTEL'S EXPONENT 
			SHL     CX, 1; RESULTAAT OPSCHUIVEN
			SHL     CX, 1
			SHL     CX, 1
			SHL     CX, 1
			XOR     AX, CX; EXPONENT TOEVOEGEN
			MOV     WORD PTR data.INTEL[6], AX; RESULTAAT OPSLAAN
			MOV     WORD PTR data.INTEL[4], BX
			MOV     WORD PTR data.INTEL[2], DX
			nop
			;   RET; doet de lus al..
		}
	}
	return data.x; // Return with result in EAX
}
double Atom3FPGA() {
union Data {
	double x;
	byte INTEL[8];
} data;
static int j = 0;

	for (int i = 0; i < 5; i++) {
		j = j + cATOM[i];
}
	if (j == 0) {
		data.x = 0;
	}
	else {

	__asm
	{
		XOR     AX, AX; CLEAR INTEL WAARDE
		MOV     WORD PTR data.INTEL[0], AX
		MOV     WORD PTR data.INTEL[2], AX
		MOV     WORD PTR data.INTEL[4], AX
		MOV     WORD PTR data.INTEL[6], AX
		MOV     AH, BYTE PTR cATOM[1]; ATOM MANTISSA NAAR AX : BX
		MOV     AL, BYTE PTR cATOM[2]
		MOV     BH, BYTE PTR cATOM[3]
		MOV     BL, BYTE PTR cATOM[4]
		XOR     DX, DX; DX OOK BIJ INTEL MANTISSA
		MOV     CX, 0BH; LAADT TELLER
		ATEL2 : SHR     AX, 1; SCHUIF MANTISSA DRIE BITS
		RCR     BX, 1
		RCR     DX, 1
		dec		cx
		jnz		ATEL2
		; LOOP    ATEL2
		MOV     CL, BYTE PTR cATOM[1]; LAADT SIGN BIT IN CL7
		xor cl, 80h; inverteer tekenbit
		SHL     AX, 1; MAAK PLAATS VOOR SIGN BIT
		SHL     CL, 1; ZET SIGN BIT IN CARRY
		RCR     AX, 1; SCHUIF SIGN BIT IN AX
		AND     AX, 1000000000001111B; EXPONENT NOG BEREKENEN
		MOV     CL, BYTE PTR cATOM[0]; LAADT EXPONENT IN CL
		XOR     CL, 80H; INVERTEER BIAS BIT
		XCHG    AX, CX; WISSEL AX EN CX TIJDELIJK
		CBW
		XCHG    AX, CX; WISSEL AX EN CX WEER
		ADD     CX, 1022; BEREKEN INTEL'S EXPONENT 
		SHL     CX, 1; RESULTAAT OPSCHUIVEN
		SHL     CX, 1
		SHL     CX, 1
		SHL     CX, 1
		XOR     AX, CX; EXPONENT TOEVOEGEN
		MOV     WORD PTR data.INTEL[6], AX; RESULTAAT OPSLAAN
		MOV     WORD PTR data.INTEL[4], BX
		MOV     WORD PTR data.INTEL[2], DX
		nop
		;   RET; doet de lus al..
	}
	}
	return data.x; // Return with result in EAX
}


uint8_t readFPRL(uint16_t addr) 
{
	uint8_t	status = 0;
	//        printf("Read 8255 %04X %04X\n",addr,pc);
	switch (addr & 0x0f)
	{
	case 0x0a:
		status = bATOM[0];
		break;

	case 0x0b:
		status = bATOM[1];
		break;

	case 0x0c:
		status = bATOM[2];
		break;

	case 0x0d:
		status = bATOM[3];
		break;

	case 0x0e:
		status = bATOM[4];
		break;


	case 0x0f:
		status = fpstatus;
	}
	return status;
}


uint8_t writeFPRL(uint16_t addr, uint8_t val)
{
//	FPROC: = 0
//	FPADD : = 1
//	FPSUB : = 2
//	FPMUL : = 3
//	FPDIV : = 4
//	FPABS : = 5
//	FPRNDINT : = 6
//	FPSQRT : = 7
//	FPTAN : = 8
//	FPSIN : = 9
//	FPCOS : = 10
//	FPDEG : = 11
//	FPRAD : = 12
//	FPOWER : = 13
//	FPHTN : = 14
//	FPLN : = 15
//	FPLOG : = 16
//	FPYTOX : = 17
//	FPEXP : = 18
//	FPTENTOX : = 19
//	FPACOT : = 20
//	FPACS : = 21
//	FPASN : = 22
//	FPSEC : = 23
//	FPCSC : = 24
//	FPATN : = 25
//	FPTWOTOX : = 26
//	FPATHH : = 27
//	FPCOMP : = 28


	// arg 1 is gelezen van Bcxx
	// b9x00-04 - arg1 atom 00 01 02 03 04
	// b9x05-09 - arg2 atom 05 06 07 08 09
	// b9x0a-	- return	0a 0b 0c 0d 0e
	// b9x0f	- status	0f: write 0b0xx put 1-127 as command
	// 						0f: read  0b1xxxx Nan, zero, > (to do)
	int lb;
	lb = 0;
	switch (addr & 0xF) {
	case 0x00:
		bATOM[0] = val;
		break;
	case 0x01:
		bATOM[1] = val;
		break;
	case 0x02:
		bATOM[2] = val;
		break;
	case 0x03:
		bATOM[3] = val;
		break;
	case 0x04:
		bATOM[4] = val;
		break;

	case 0x05:
		cATOM[0] = val;
		break;
	case 0x06:
		cATOM[1] = val;
		break;
	case 0x07:
		cATOM[2] = val;
		break;
	case 0x08:
		cATOM[3] = val;
		break;
	case 0x09:
		cATOM[4] = val;
		break;

	case 0x0f: 
	{
		double temp;
		fpstatus = 128;
		switch (val & 127) {
		case FPROC:
			fpstatus = 1;
			break;
		case FPEXP:
			FPGA2Atom(expf(Atom2FPGA()));
			fpstatus = 0;
			break;
		case FPHTN:
			FPGA2Atom(tanhf(Atom2FPGA()));
			fpstatus = 0;
			break;
		case FPLOG:
			FPGA2Atom(logf(Atom2FPGA()));
			fpstatus = 0;
			break;
		case FPTAN:
			FPGA2Atom(tanf(Atom2FPGA()));
			fpstatus = 0;
			break;
		case FPDEG: // nog wat te doen..
			temp = Atom2FPGA();
			temp = degf(temp);
			FPGA2Atom(temp);
			fpstatus = 0;
			break;
		case FPACS:
			temp = acosf(Atom2FPGA());
			FPGA2Atom(temp);
			if (temp == 0.0) {
				bATOM[0] = 0;
			}

			fpstatus = 0;
			break;
		case FPASN:
			FPGA2Atom(asinf(Atom2FPGA()));
			fpstatus = 0;
			break;
		case FPATN:
			FPGA2Atom(atanf(Atom2FPGA()));
			fpstatus = 0;
			break;

		case FPRAD:
		{
			double pie;
			double temp2;
			pie = acos(-1);
			temp = Atom2FPGA();
			// FPGA2Atom(temp * 180.0 / pie);
			// fp. cos rad 60
				temp2 = ((temp * pie) / 180.0);
				FPGA2Atom(temp2);
				fpstatus = 0;
			break;
			// if (isnan(1.0 / 0.0) {
		}
		case FPADD:
			FPGA2Atom(Atom3FPGA() + Atom2FPGA());
				fpstatus = 0;
				break;
		case FPDIV:
			FPGA2Atom(Atom3FPGA() / Atom2FPGA());
				fpstatus = 0;
				break;
		case FPMUL:
			double Atom3, Atom2, Atom1;
			Atom3 = Atom3FPGA();
			Atom2 = Atom2FPGA();
			Atom1 = Atom3 * Atom2;
			FPGA2Atom(Atom1);
			fpstatus = 0;
			break;
		case FPSUB:
			FPGA2Atom(Atom3FPGA() - Atom2FPGA());
			fpstatus = 0;
			break;
		case FPYTOX:
			FPGA2Atom(powf(Atom3FPGA(), Atom2FPGA()));
			fpstatus = 0;
			break;

		case FPCOS:
			temp = cosf(Atom2FPGA());
			FPGA2Atom(temp);
			fpstatus = 0;
			break;
		case FPSIN:
			double temp1;
			double pie;
			pie = acosf(-1);
			// typical usage
			temp = sinf(pie / 1);
			temp = Atom2FPGA();
			temp1 =	sinf(temp);
			FPGA2Atom(temp1);
			fpstatus = 0;
			break;
		case FPSQRT:
			FPGA2Atom(sqrt(Atom2FPGA()));
			fpstatus = 0;
			break;
		default:
			break;
			}
		}
	}
	return fpstatus;
}


void writevia(uint16_t addr, uint8_t val)
{
	//        rpclog("VIA write %04X %02X %04X\n",addr,val,pc);
	switch (addr & 0xF)
	{
	case ORA:
		via.ifr &= 0xfc; //~PORTAINT;
		updateIFR();
	case ORAnh:
		via.ora = val;
		via.porta = (via.porta & ~via.ddra) | (via.ora & via.ddra);

		/*SP7 CHANGES*/

		switch (val)
		{
		case 13:
			printf("\n");

			break;
		default:
			printf("%C", val);
		}
		/*END SP7*/

		break;
	case ORB:
		via.orb = val;
		via.portb = (via.portb & ~via.ddrb) | (via.orb & via.ddrb);
		via.ifr &= 0xfe; //~PORTBINT;
		updateIFR();
		break;

	case DDRA:
		via.ddra = val;
		break;
	case DDRB:
		via.ddrb = val;
		break;
	case ACR:
		via.acr = val;
		break;
	case PCR:
		via.pcr = val;
		break;
	case T1LL:
	case T1CL:
		//                printf("T1L write %02X at %04X %i\n",val,pc,lns);
		via.t1l &= 0xFF00;
		via.t1l |= val;
		break;
	case T1LH:
		//                printf("T1LH write %02X at %04X %i\n",val,pc,lns);
		via.t1l &= 0xFF;
		via.t1l |= (val << 8);
		if (via.acr & 0x40)
		{
			via.ifr &= ~TIMER1INT;
			updateIFR();
		}
		//                printf("%04X\n",via.t1l>>1);
		break;
	case T1CH:
		if ((via.acr & 0xC0) == 0x80)
			timerout = 0;
		//                printf("T1CH write %02X at %04X %i\n",val,pc,lns);
		via.t1l &= 0xFF;
		via.t1l |= (val << 8);
		//                if (via.t1c<1) printf("UT1 reload %i\n",via.t1c);
		//                printf("T1 l now %05X\n",via.t1l);
		via.t1c = via.t1l + 1;
		via.ifr &= ~TIMER1INT;
		updateIFR();
		via.t1hit = 0;
		break;
	case T2CL:
		via.t2l &= 0xFF00;
		via.t2l |= val;
		//                printf("T2CL=%02X at line %i\n",val,line);
		break;
	case T2CH: // && !(via.ifr&TIMER2INT))
		if ((via.t2c == -3 && (via.ier & TIMER2INT)) ||
			(via.ifr & via.ier & TIMER2INT))
		{
			interrupt |= 128;
			//                        rpclog("uTimer 2 extra interrupt\n");
		}
		//                if (output) rpclog("Write uT2CH %i\n",via.t2c);
		via.t2l &= 0xFF;
		via.t2l |= (val << 8);
		//                if (via.t2c<1) printf("UT2 reload %i\n",via.t2c);
		via.t2c = via.t2l + 1;
		via.ifr &= ~TIMER2INT;
		updateIFR();
		via.t2hit = 0;
		//                output=0;
		//                printf("T2CH=%02X at line %i\n",val,line);
		break;
	case IER:
		/*                if (val==0x40)
					{
							printf("Here\n");
	   //                        output=1;
					}*/
		if (val & 0x80)
			via.ier |= (val & 0x7F);
		else
			via.ier &= ~(val & 0x7F);
		updateIFR();
		//                rpclog("Write IER %02X %04X %02X\n",val,pc,via.ier);
		//                if (via.ier&0x40) printf("0x40 enabled at %04X\n",pc);
		//                via.ifr&=~via.ier;
		break;
	case IFR:
		via.ifr &= ~(val & 0x7F);
		updateIFR();
		//                rpclog("Write IFR %02X %04X %02X\n",val,pc,via.ifr);
		break;
	}
}
uint8_t readkey(uint16_t addr)
{
	uint8_t temp;
	temp = keyleen.key;
	// printf("Read U %04X %04X\n",addr,pc);
	return temp;
}

uint8_t readvia(uint16_t addr)
{
	uint8_t temp;

	//        if (addr>=4 && addr<=9) printf("Read U %04X %04X\n",addr,pc);
	//        rpclog("Read  VIA %04X %04X\n",addr,pc);
	switch (addr & 0xF)
	{
	case ORA:
		via.ifr &= ~PORTAINT;
		updateIFR();
	case ORAnh:
		temp = via.ora & via.ddra;
		temp |= (via.porta & ~via.ddra);
		temp &= 0x7F;
		return temp;

	case ORB:
		//                via.ifr&=~PORTBINT;
		updateIFR();
		temp = via.orb & via.ddrb;
		if (via.acr & 2)
			temp |= (via.irb & ~via.ddrb);
		else
			temp |= (via.portb & ~via.ddrb);
		temp |= 0xFF;
		if (timerout)
			temp |= 0x80;
		else
			temp &= ~0x80;
		//                printf("ORB read %02X\n",temp);
		//                temp|=0xF0;
		return temp;

	case DDRA:
		return via.ddra;
	case DDRB:
		return via.ddrb;
	case T1LL:
		//                printf("Read T1LL %02X %04X\n",(via.t1l&0x1FE)>>1,via.t1l);
		return via.t1l & 0xFF;
	case T1LH:
		//                printf("Read T1LH %02X\n",via.t1l>>9);
		return via.t1l >> 8;
	case T1CL:
		via.ifr &= ~TIMER1INT;
		updateIFR();
		//                printf("Read T1CL %02X %i %08X\n",((via.t1c+2)>>1)&0xFF,via.t1c,via.t1c);
		if (via.t1c < -1)
			return 0xFF;
		return via.t1c & 0xFF;
	case T1CH:
		if (via.t1c < -1)
			return 0xFF;
		return via.t1c >> 8;
	case T2CL:
		via.ifr &= ~TIMER2INT;
		updateIFR();
		//                printf("Read T2CL %02X\n",((via.t2c+2)>>1)&0xFF);
		//                if (via.t2c<0) return 0xFF;
		return via.t2c & 0xFF;
	case T2CH:
		//                printf("Read T2CH %02X\n",((via.t2c+2)>>1)>>8);
		//                printf("T2CH read %05X %04X %02X %04X %i %02X\n",via.t2c,via.t2c>>1,via.t2c>>9,pc,p.i,a);
		//                if (via.t2c<0) return 0xFF;
		return via.t2c >> 8;
	case ACR:
		return via.acr;
	case PCR:
		return via.pcr;
	case IER:
		return via.ier | 0x80;
	case IFR:
		//                rpclog("IFR %02X\n",via.ifr);
		return via.ifr;
	}
	return 0xFF;
}

void resetvia()
{
	via.ora = 0x80;
	via.ifr = via.ier = 0;
	via.t1c = via.t1l = 0x1FFFE;
	via.t2c = via.t2l = 0x1FFFE;
	via.t1hit = via.t2hit = 1;
	timerout = 1;
	via.acr = 0;

	// To make sure interrupts get cleared at reset
	updateIFR();
}

void dumpvia()
{
	printf("T1 = %04X %04X T2 = %04X %04X\n", via.t1c, via.t1l, via.t2c, via.t2l);
	printf("%02X %02X  %02X %02X\n", via.ifr, via.ier, via.pcr, via.acr);
}


void atom_reset(int power_on)
{
	printf("atom_reset(%d)\n", power_on);
	//	memset(ram, 0, 0x10000);
	if (power_on)
	{
		ram[8] = 12;   // random(255);
		ram[9] = 19;   // random(255);
		ram[10] = 235; // random(255);
		ram[11] = 127; //  random(255);

		// Clear BBC basic workspace.
		// if(bbcmode)
		//	memset(&ram[0], 0, 0x10000);
	}
	resetvia();

	// debuglog("exedir=%s\n", exedir);
	// InitMMC();

	reset6502();
	printf("atom_reset():done\n");

	// SP3 FOR JOYSTICK SUPPORT

	//install_joystick(JOY_TYPE_AUTODETECT);

	// END SP3
}

int RamEnabled(uint16_t addr)
{
	int result;

	result = ((addr < 0x400) ||                                              // Always RAM
		((addr >= 0x0400) && (addr < 0x09FF) && (main_ramflag > 3)) || // Low ram
		((addr >= 0x0B00) && (addr < 0x1FFF) && (main_ramflag > 3)) || // Low ram
		((addr >= 0x0A00) && (addr < 0x0AFF) && (main_ramflag > 4)) || // Low ram + RAM in disk area
		((addr >= 0x2800) && (addr < 0x3C00) && (main_ramflag > 0)) || // 5K on motherboard
		((addr >= 0x2000) && (addr < 0x2800) && (main_ramflag > 1)) || // DOS additional 3K
		((addr >= 0x3C00) && (addr < 0x4000) && (main_ramflag > 1)) ||
		((addr >= 0x4000) && (addr < 0x8000) && (main_ramflag > 2)) || // Extra 16K
		ramrom_enable);                                                // Always enabled for RAMROM.

	return result;
}

uint8_t readmeml(uint16_t addr)
{
	uint8_t addrh = (addr >> 8); // It seems all unmapped addresses just return the high byte of the address....
	int ram_enabled;

	ram_enabled = RamEnabled(addr);

	//if (debugon)
	//{
	//  debugread(addr);
	//}

	if (debugon)
	{
		printf("Lees Adres: %04x\r\n", addr);
	}

	if (addr == 0xDA9C)
		int lb = 0;

	if (pc == addr)
	{
		fetchc[addr] = 31;
	}
	else
	{
		readcByte[addr] = 31;
	}

	if (addr >= 0xB900 && addr <= 0xB90F) {
		return readFPRL(addr); /* FP FPGA */
	}

	int i = (addr & 0xFC00); // was fc00

	if (i == 0x0800)
	{
		if ((addr & 0x0F00) == 0x0A00) /*FDC*/
		{
			if ((ramrom_enable && RR_BLKA_enabled()) ||
				(!ramrom_enable && ram_enabled))
				return ram[addr];
			// LB else
			// LB 	return read8271(addr);                  /*FDC*/
		}
		else
			return ram_enabled ? ram[addr] : addrh;
	}

	if (i <= 0x6C00)
		return ram_enabled ? ram[addr] : addrh; /* RAM, DOS RAM */

	if (i <= 0x7C00)
	{
		if (!ramrom_enable || (RR_enables & RAMROM_FLAG_EXTRAM) == 0)
			return ram[addr];

		return ram_enabled ? ram[addr] : addrh;
		; // dont let the code execution fall through
	}

	if (i <= 0x9C00) /* Video RAM */
	{
		// lb if (snow && cycles >= 0 && cycles < 32)
		if (cycles >= 0 && cycles < 32)
			fetcheddat[31 - cycles] = ram[addr];

		if (addr < vid_top)
			return ram[addr];
		else
			return addrh;
	}

	if (i == 0xB000)
	{
		int i;
		i = 0;
		int temp = read8255(addr); /* 8255 PIA */
		return temp;
	}
	//if (i == 0xB400)
	//  return ReadMMC(addr); /* MMC      */
	if (i == 0xB800)
		return readvia(addr); /* 6522 VIA */

	if (addr == 0xBFF0) {
		// printf("read key");
		return readkey(addr); /* readkey VIA */
	}
	if (i == 0xBC00)
	{
		// GDOS 2015, BC10.
		// LB if ((fdc1770) && (addr >= WDBASE) && (addr <= CTRLREG))
		// LB return read1770(addr);

		// LB if ((sndatomsid) && (addr >= 0xBDC0) && (addr <= 0xBDDF))
		// LB 	return sid_read(addr & 0x1F);

		if (ramrom_enable)
		{
			switch (addr)
			{
			case 0xBFFF:
				return (0xB0 | (RR_bankreg & 0x0F));
			case 0xBFFE:
				return (0xB0 | (RR_enables & 0x0F));
			case 0xBFFD:
				return (0xB0 | (RR_jumpers & 0x0F));
			default:
				return 0xBF;
			}
		}

		return addrh; // don't let the code execution fall through
	}

	if (i <= 0xAC00)
		return utility_ptr[addr & 0x0FFF]; /* Utility ROM        */
	if (i <= 0xCC00)
		return abasic_ptr[addr & 0x0FFF]; /* BASIC              */
	if (i <= 0xDC00)
		return afloat_ptr[addr & 0x0FFF]; /* Floating point ROM */
	if (i <= 0xEC00)
		return dosrom_ptr[addr & 0x0FFF]; /* Disc ROM           */

	return akernel_ptr[addr & 0x0FFF]; /* Kernel             */
}

// The compiler has a tough time in optimizing the case statement in this format
// Hand coded using if statements
//
//void writememl(uint16_t addr, uint8_t val)
//{
//    if (debugon) {
//        debugwrite(addr, val);
//    }
//
//    writecByte[addr] = 31;
//
//    switch (addr & 0xFC00) {
//    case 0x0000:         /*Block zero RAM*/
//	ram[addr] = val;
//	return;
//
//    case 0x0400:                           case 0x0C00:
//    case 0x1000: case 0x1400: case 0x1800: case 0x1C00:
//    case 0x2000: case 0x2400:         /*DOS RAM*/
//    case 0x2800: case 0x2C00:
//    case 0x3000: case 0x3400: case 0x3800: case 0x3C00:
//    case 0x4000: case 0x4400: case 0x4800: case 0x4C00:
//    case 0x5000: case 0x5400: case 0x5800: case 0x5C00:
//    case 0x6000: case 0x6400: case 0x6800: case 0x6C00:
//	ram[addr] = val;
//	return;
//
//    case 0x7000: case 0x7400: case 0x7800: case 0x7C00:
//	if(!ramrom_enable || (RR_enables & RAMROM_FLAG_EXTRAM)==0)
//	    {
//		ram[addr] = val;
//		return;
//	    }
//
//    case 0x8000: case 0x8400: case 0x8800: case 0x8C00:         /*Video RAM*/
//    case 0x9000: case 0x9400: case 0x9800: case 0x9C00:
//	if (snow && cycles >= 0 && cycles < 32)
//	    fetcheddat[31 - cycles] = val;
//	ram[addr] = val;
//	return;
//
//    case 0x0800:
//	if ((addr & 0x0F00) == 0xA00)    /*FDC*/
//	    {
//		if(ramrom_enable && RR_BLKA_enabled())
//		    ram[addr]=val;
//		else
//		    write8271(addr, val);
//
//		return;
//	    }
//	else
//	    ram[addr]=val;
//
//	return;
//
//    case 0xB000:         /*8255 PIA*/
//	write8255(addr, val);
//	return;
//
//    case 0xB800:         /*6522 VIA*/
//	if (addr < 0xB810)
//	    writevia(addr, val);
//	//                        if (addr=0xBFFF) rpclog("Write BFFF %02X\n",val);
//	return;
//
//    case 0xB400:
//
//	//            debuglog("addr=%04X, val=%02X\n",addr,val);
//
//	WriteMMC(addr,val);
//	return;
//
//    case 0xBC00:
//	if((sndatomsid) && (addr>=0xBDC0) && (addr<=0xBDDF))
//	    {
//		sid_write(addr & 0x1F,val);
//		return;
//	    }
//
//	if(ramrom_enable)
//	    {
//		switch(addr)
//		    {
//
//		    case 0xBFFF :
//			RR_bankreg = val & 0x0F;
//			set_rr_ptrs();
//			break;
//
//		    case 0xBFFE :
//			RR_enables = val & 0x0F;
//			set_rr_ptrs();
//			break;
//		    }
//	    }
//
//    case 0xA000: case 0xA400: case 0xA800: case 0xAC00:             /*Utility ROM*/
//	// Special case of RAM mapped into utility rom space and rom bank 0 selected
//
//	if(ramrom_enable && (RR_enables & RAMROM_FLAG_EXTRAM) && (RR_bankreg==0))
//	    utility_ptr[addr & 0x0FFF]=val;
//	break;
//
//    case 0xC000: case 0xC400: case 0xC800: case 0xCC00:             /*BASIC*/
//    case 0xD000: case 0xD400: case 0xD800: case 0xDC00:             /*Floating point ROM*/
//    case 0xE000: case 0xE400: case 0xE800: case 0xEC00:             /*Disc ROM*/
//    case 0xF000: case 0xF400: case 0xF800: case 0xFC00:             /*Kernel*/
//
//	return;
//    }
//    return;
////        printf("Error : Bad write to %04X data %02X\n",addr,val);
////        dumpregs();
////        exit(-1);
//}

void writememl(uint16_t addr, uint8_t val)
{
	int ram_enabled;

	ram_enabled = RamEnabled(addr);

	if (debugon)
	{
		printf("Adres: %04x, data: %02x\r\n", addr, val);
	}

	writecByte[addr] = 31;

	int i = (addr & 0xFD00);

	if (i == 0x0800)
	{
		if ((addr & 0x0F00) == 0x0A00) /*FDC*/
		{
			if ((ramrom_enable && RR_BLKA_enabled()) ||
				(!ramrom_enable && ram_enabled))
			{
				if (ram_enabled)
					ram[addr] = val;
			}
			// LB else
			// LB 	write8271(addr, val);                  /*FDC*/
			return;
		}
		else
		{
			if (ram_enabled)
				ram[addr] = val;
			return;
		}
	}

	if (i <= 0x6C00)
	{
		if (ram_enabled) {
			// if (addr > 0xff) 
			ram[addr] = val; /* RAM, DOS RAM */
		}
		return;
	}

	if (i <= 0x7C00)
	{
		if ((!ramrom_enable || (RR_enables & RAMROM_FLAG_EXTRAM) == 0) ||
			(ram_enabled && !ramrom_enable))
			ram[addr] = val;

		return;
	}

	if (i <= 0x9C00) /* Video RAM */
	{
		//lb if (snow && cycles >= 0 && cycles < 32)
		if (cycles >= 0 && cycles < 32)
			fetcheddat[31 - cycles] = val;

		if (addr < vid_top) {
			ram[addr] = val;
			if (addr > 0x7FFF) {
				SetByte(addr - 0x8000, val); // lb
			}
		}

		return;
	}

	if (i == 0xB000)
	{
		write8255(addr, val); /* 8255 PIA */
		return;
	}

	if (i == 0xB400)
	{
		//WriteMMC(addr, val); /* MMC      */
		return;
	}
	if (i == 0xB900) {
		if (addr < 0xB910) {
			writeFPRL(addr, val); /* FP FPGA */
		}
	}

	if (i == 0xB800)
	{
		if (addr < 0xB810)
			writevia(addr, val); /* 6522 VIA */
		return;
	}
	if (addr == 0xBFF0) {
		int lb = 0;
		writekey(addr, val); /* keyboard */
	}
	if (i == 0xBC00)
	{
		// GDOS-2015 BC10.
		// LB if ((fdc1770) && (addr >= WDBASE) && (addr <= CTRLREG))
		// LB 	write1770(addr, val);

		// LB if ((sndatomsid) && (addr >= 0xBDC0) && (addr <= 0xBDDF))
		// LB {
		// LB 	sid_write(addr & 0x1F, val);
		// LB 	return;
		// LB }

		/* if (ramrom_enable)
		{
		  if (addr == 0xBFFF)
		  {
			RR_bankreg = val & 0x0F;
			set_rr_ptrs();
		  }

		  if (addr == 0xBFFE)
		  {
			RR_enables = val & 0x0F;
			set_rr_ptrs();
		  }
		} */
		return;
	}

	if (i <= 0xAC00) /* Utility ROM        */
	{
		// Special case of RAM mapped into utility rom space and rom bank 0 selected

		if (ramrom_enable && (RR_enables & RAMROM_FLAG_EXTRAM) && (RR_bankreg == 0))
			utility_ptr[addr & 0x0FFF] = val;
		return;
	}

	// Otherwise a ROM - BASIC, Floating Point, Disc or Kernel
	return;
}


void drawline(int line)
{
	int addr;
	//, chr, col;
	//int x, xx;
	//uint8_t temp;

	if (!line)
		vbl = cy = sy = 0;

	if (line < 192)
	{
		switch (gfxmode)
		{
		case 0: case 2: case 4: case 6:         //Text mode
		case 8: case 10: case 12: case 14:
			//bGraph = FALSE;
			addr = (cy << 5) + 0x8000;
			/*
			for (x = 0; x < 256; x += 8)
			{
				chr = fetcheddat[x >> 3];
				if (chr & 0x40)
				{
					temp = chr;
					chr <<= ((sy >> 2) << 1);
					chr = (chr >> 4) & 3;
					if (chr & 2)
						col = semigrcol[(temp >> 6) | (css << 1)];
					else
						col = 0;
					//	b->line[line][x] = b->line[line][x + 1] = b->line[line][x + 2] = b->line[line][x + 3] = col;
					if (chr & 1)
						col = semigrcol[(temp >> 6) | (css << 1)];
					else
						col = 0;
					//	b->line[line][x + 4] = b->line[line][x + 5] = b->line[line][x + 6] = b->line[line][x + 7] = col;
				}
				else
				{
					chr = ((chr & 0x3F) * 12) + sy;
					if (fetcheddat[x >> 3] & 0x80)
					{
						int lb;
						for (xx = 0; xx < 8; xx++)
						{
							//			b->line[line][x + xx] 
							lb = textcol[(((fontdata[chr] >> (xx ^ 7)) & 1) ^ 1) | css];
						}
					}
					else
					{
						int lb;
						for (xx = 0; xx < 8; xx++)
						{

							//			b->line[line][x + xx] = 
							lb = textcol[((fontdata[chr] >> (xx ^ 7)) & 1) | css];
						}
					}
				}
			}
			sy++;
			if (sy == 12)
			{
				sy = 0;
				cy++;
			} */
			// addr = (cy << 5) + 0x8000;
			/*for (x = 0; x < 32; x++) {
				if (fetcheddat[x] != ram[addr]) {
					fetcheddat[x] = ram[addr++];
					bDirty = 1;
				} 
			} */
			bDirty = 1;
			break;

			// Propper graphics modes 
			/*
		case 1:         // 64x64, 4 colours
			for (x = 0; x < 256; x += 16)
			{
				temp = fetcheddat[x >> 3];
				for (xx = 0; xx < 16; xx += 4)
				{
					b->line[line][x + xx] = b->line[line][x + xx + 1] = b->line[line][x + xx + 2] = b->line[line][x + xx + 3] = semigrcol[(temp >> 6) | (css << 1)];
					temp <<= 2;
				}
			}

			addr = (((line + 1) / 3) << 4) | 0x8000;
			for (x = 0; x < 32; x++)
				fetcheddat[x] = ram[addr + (x >> 1)];

			break;

		case 3:         // 128x64, 2 colours
			for (x = 0; x < 256; x += 16)
			{
				temp = fetcheddat[x >> 3];
				for (xx = 0; xx < 16; xx += 2)
				{
					b->line[line][x + xx] = b->line[line][x + xx + 1] = (temp & 0x80) ? grcol[css | 1] : grcol[css];
					temp <<= 1;
				}
			}

			addr = (((line + 1) / 3) << 4) | 0x8000;
			for (x = 0; x < 32; x++)
				fetcheddat[x] = ram[addr + (x >> 1)];

			break;

			//* PATCH FOR CORRECT CLEAR2a

		case 5: //128x64, 4 colours
			for (x = 0; x < 256; x += 8)
			{
				temp = fetcheddat[x >> 3];
				for (xx = 0; xx < 8; xx += 2)
				{
					b->line[line][x + xx] = b->line[line][x + xx + 1] = semigrcol[(temp >> 6) | (css << 1)];
					temp <<= 2;
				}
			}

			addr = (((line + 1) / 3) << 5) | 0x8000;
			for (x = 0; x < 32; x++)
				fetcheddat[x] = ram[addr + x];
			break;

			// PATCH CHANGES

		case 7:         // 128x96, 2 colours
			for (x = 0; x < 256; x += 16)
			{
				temp = fetcheddat[x >> 3];
				for (xx = 0; xx < 16; xx += 2)
				{
					b->line[line][x + xx] = b->line[line][x + xx + 1] = (temp & 0x80) ? grcol[css | 1] : grcol[css];
					temp <<= 1;
				}
			}

			addr = (((line + 1) >> 1) << 4) | 0x8000;
			for (x = 0; x < 32; x++)
				fetcheddat[x] = ram[addr + (x >> 1)];

			break;

		case 9:         // 128x96, 4 colours
			for (x = 0; x < 256; x += 8)
			{
				temp = fetcheddat[x >> 3];
				for (xx = 0; xx < 8; xx += 2)
				{
					b->line[line][x + xx] = b->line[line][x + xx + 1] = semigrcol[(temp >> 6) | (css << 1)];
					temp <<= 2;
				}
			}

			addr = (((line + 1) >> 1) << 5) | 0x8000;

			for (x = 0; x < 32; x++)
				fetcheddat[x] = ram[addr + x];

			break;

		case 11:         // 128x192, 2 colours
			for (x = 0; x < 256; x += 16)
			{
				temp = fetcheddat[x >> 3];
				for (xx = 0; xx < 16; xx += 2)
				{
					b->line[line][x + xx] = b->line[line][x + xx + 1] = (temp & 0x80) ? grcol[css | 1] : grcol[css];
					temp <<= 1;
				}
			}

			addr = ((line + 1) << 4) | 0x8000;
			for (x = 0; x < 32; x++)
				fetcheddat[x] = ram[addr + (x >> 1)];

			break;

		case 13:         // 128x192, 4 colours
			for (x = 0; x < 256; x += 8)
			{
				temp = fetcheddat[x >> 3];
				for (xx = 0; xx < 8; xx += 2)
				{
					b->line[line][x + xx] = b->line[line][x + xx + 1] = semigrcol[(temp >> 6) | (css << 1)];
					temp <<= 2;
				}
			}

			addr = ((line + 1) << 5) | 0x8000;

			for (x = 0; x < 32; x++)
				fetcheddat[x] = ram[addr + x];

			break;
		*/
		case 15:         // 256x192, 2 colours
			int lb;
			lb = 0;
			/*
			for (x = 0; x < 256; x += 8)
			{
				int lb;
				temp = fetcheddat[x >> 3];
				for (xx = 0; xx < 8; xx++)
				{
					// b->line[line][x + xx] 
					lb = (temp & 0x80) ? grcol[css | 1] : grcol[css];
					temp <<= 1;
				}
			}
			*/
			addr = ((line + 1) << 5) | 0x8000;
			// rpclog("addr=%04X\n",addr);
			for (x = 0; x < 32; x++) {
				fetcheddat[x] = ram[addr + x];
			//	SetByte(addr + x, ram[addr + x]);
			}
			//addr = ((line + 1) << 5) | 0x8000;
			// SetByte(addr-0x8000, ram[addr]);
			
			break;

			//                        default:
			//                        printf("Bad GFX mode %i\n",gfxmode);
			//                        dumpregs();
			//                        dumpram();
			//                        exit(-1);
		}
	}

	if (line == 192)
	{
		frmcount++;
		fskipcount++;
		// hier complete frame om te laten zien..
		frmcount = 0;
		int cnt = 0x8000;
		//system("cls");
		bDirty = 0;
		for (int i = 0; i < 512; i++) {
			if (videoram[i] != ram[0x8000 + i]) {
				bDirty = 1;
				videoram[i] = ram[0x8000 + i];
			}
		}
		if (bDirty == 1) {
			InvalidateRect(shWnd, NULL, NULL);
			nFrameRate = 0;
		}
		vbl = 1;
		//}
	}

	if (line == 224)
		vbl = 0;
	/*
	if ((line == 261 && !palnotntsc) || line == 311)
	{
		switch (gfxmode)
		{

			// PATCH FOR CORRECT CLEAR2a

		case 0: case 2: case 4: case 6:         //Text mode
		case 8: case 10: case 12: case 14:
		case 5: case 9: case 13: case 15:
			for (x = 0; x < 32; x++)
				fetcheddat[x] = ram[0x8000 + x];
			break;
			//* END PATCH

		case 1: case 3: case 7: case 11:         //16-byte per line
			for (x = 0; x < 32; x++)
				fetcheddat[x] = ram[0x8000 + (x >> 1)];
			break;

		}
	}

	//        sndbuffer[line]=(speaker)?255:0;
	*/
}


int depth;
void initvideo()
{
	//	set_color_depth(8);
	//	b = create_bitmap(256, 192);

		//	if (colourboard)
		//		set_palette(atompal);
		//	else
		//		set_palette(monopal);
}

uint8_t dreadmem(uint16_t addr)
{
	//if (addr >= 0xA00 && addr < 0xAFF && RR_bit_set(RAMROM_FLAG_DISKROM))
	//  return 0xFF;
	if (addr >= 0xB000 && addr < 0xBFFF)
		return 0xFF;
	return readmem(addr);
}

void debugout(char* s, uint16_t pc)
{
	if (nAtom) {
		fpclog(s, pc);
	}
	//fflush(stdout);
}

void startdebug()
{
}

void debuglog(char* format, ...)
{
}

void debugdisassemble()
{
	uint16_t temp;
	char s[256];
	uint8_t op = dreadmem(debugdisaddr);
	uint8_t p1 = dreadmem(debugdisaddr + 1), p2 = dreadmem(debugdisaddr + 2);

	sprintf(s, "%04X : ", debugdisaddr);
	debugout(s, debugdisaddr);
	debugout(dopname[op], debugdisaddr);
	sprintf(s, " ");
	debugout(s, debugdisaddr);
	switch (dopaddr[op])
	{
	case IMP:
		sprintf(s, "        ");
		debugout(s, debugdisaddr);
		break;
	case IMPA:
		sprintf(s, "A       ");
		debugout(s, debugdisaddr);
		break;
	case IMM:
		sprintf(s, "#%02X     ", p1);
		debugout(s, debugdisaddr);
		debugdisaddr++;
		break;
	case ZP:
		sprintf(s, "%02X      ", p1);
		debugout(s, debugdisaddr);
		debugdisaddr++;
		break;
	case ZPX:
		sprintf(s, "%02X,X    ", p1);
		debugout(s, debugdisaddr);
		debugdisaddr++;
		break;
	case ZPY:
		sprintf(s, "%02X,Y    ", p1);
		debugout(s, debugdisaddr);
		debugdisaddr++;
		break;
	case IND:
		sprintf(s, "(%02X)    ", p1);
		debugout(s, debugdisaddr);
		debugdisaddr++;
		break;
	case INDX:
		sprintf(s, "(%02X,X)  ", p1);
		debugout(s, debugdisaddr);
		debugdisaddr++;
		break;
	case INDY:
		sprintf(s, "(%02X),Y  ", p1);
		debugout(s, debugdisaddr);
		debugdisaddr++;
		break;
	case ABS:
		sprintf(s, "%02X%02X    ", p2, p1);
		debugout(s, debugdisaddr);
		debugdisaddr += 2;
		break;
	case ABSX:
		sprintf(s, "%02X%02X,X  ", p2, p1);
		debugout(s, debugdisaddr);
		debugdisaddr += 2;
		break;
	case ABSY:
		sprintf(s, "%02X%02X,Y  ", p2, p1);
		debugout(s, debugdisaddr);
		debugdisaddr += 2;
		break;
	case IND16:
		sprintf(s, "(%02X%02X)  ", p2, p1);
		debugout(s, debugdisaddr);
		debugdisaddr += 2;
		break;
	case IND1X:
		sprintf(s, "(%02X%02X,X)", p2, p1);
		debugout(s, debugdisaddr);
		debugdisaddr += 2;
		break;
	case BRA:
		temp = debugdisaddr + 2 + (signed char)p1;
		sprintf(s, "%04X    ", temp);
		debugout(s, debugdisaddr);
		debugdisaddr++;
		break;
	}
	debugdisaddr++;
	//        writecByteonsole(consf,"\n",strlen("\n"),NULL,NULL);
}

BOOL DrawBitmap(HDC hdc, HBITMAP hBitmap, short xStart, short yStart, DWORD dwROP)
{
	//BITMAP Bitmap;
	HDC		hMemDC;
	HGDIOBJ hOldDC;
	BOOL	bResult = TRUE;

	if (!hdc || !hBitmap)
		return FALSE;

	hMemDC = CreateCompatibleDC(hdc);
	hOldDC = SelectObject(hMemDC, hBitmap);
	int leen = GetObject(hBitmap, sizeof(BITMAP), (LPSTR)&BitMapBits);

	//bResult = StretchBlt(hdc, 0, 0, defwidth-100, defheight-170, hMemDC, 0, 0, 256, 192, SRCCOPY);
	if (!BitBlt(hdc, xStart, yStart, 256, 192, hMemDC, 0, 0, SRCCOPY))
	{
		MessageBox(hWnd, L"BitBlt has failed", L"Failed", MB_OK);
		bResult = FALSE;
	}
	SelectObject(hdc, hOldDC);
	DeleteDC(hMemDC);

	return bResult;
}

void Watom_OnTimer(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	if (bGraph == TRUE) {
	HDC hdc = GetDC(hWnd);
	DeleteObject(hBitmap);
	hBitmap = CreateBitmap(256, 192, 1, 1, BitMapBits); //lb
	DrawBitmap(hdc, hBitmap, 0, 0, SRCCOPY);
	ReleaseDC(hWnd, hdc);
	}
}


void SetTimers(HWND hWnd)
{
	if (SetTimer(hWnd, 1, 50, NULL) == 0) {
		MessageBox(hWnd, L"Geen timers over voor grafische modes", L"Error", MB_OK);
	}
}
void resettimer(HWND hWnd)
{
	KillTimer(hWnd, 1);
}

void SetByte(unsigned int noffset, BYTE waarde)
{
	int welke;
	int offset = noffset;
		welke = offset / 32;
		offset = offset % 32;

		if (bGraph == TRUE && waarde != 0)
			int leen = waarde;
		
		BitMapBits[welke][offset] = waarde;
}
